package rekordbox

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"

	nulltype "github.com/mattn/go-nulltype"
)

// DjmdMenuItem represents a row from 'djmdMenuItems'.
type DjmdMenuItem struct {
	ID                nulltype.NullString `json:"id"`                   // ID
	Class             nulltype.NullInt64  `json:"class"`                // Class
	Name              nulltype.NullString `json:"name"`                 // Name
	UUID              nulltype.NullString `json:"uuid"`                 // UUID
	RbDataStatus      nulltype.NullInt64  `json:"rb_data_status"`       // rb_data_status
	RbLocalDataStatus nulltype.NullInt64  `json:"rb_local_data_status"` // rb_local_data_status
	RbLocalDeleted    nulltype.NullInt64  `json:"rb_local_deleted"`     // rb_local_deleted
	RbLocalSynced     nulltype.NullInt64  `json:"rb_local_synced"`      // rb_local_synced
	Usn               nulltype.NullInt64  `json:"usn"`                  // usn
	RbLocalUsn        nulltype.NullInt64  `json:"rb_local_usn"`         // rb_local_usn
	CreatedAt         Time                `json:"created_at"`           // created_at
	UpdatedAt         Time                `json:"updated_at"`           // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the DjmdMenuItem exists in the database.
func (dmi *DjmdMenuItem) Exists() bool {
	return dmi._exists
}

// Deleted returns true when the DjmdMenuItem has been marked for deletion from
// the database.
func (dmi *DjmdMenuItem) Deleted() bool {
	return dmi._deleted
}

// Insert inserts the DjmdMenuItem to the database.
func (c *Client) InsertDjmdMenuItem(ctx context.Context, dmi *DjmdMenuItem) error {
	db := c.db

	switch {
	case dmi._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case dmi._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO djmdMenuItems (` +
		`ID, Class, Name, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12` +
		`)`
	// run
	logf(sqlstr, dmi.ID, dmi.Class, dmi.Name, dmi.UUID, dmi.RbDataStatus, dmi.RbLocalDataStatus, dmi.RbLocalDeleted, dmi.RbLocalSynced, dmi.Usn, dmi.RbLocalUsn, dmi.CreatedAt, dmi.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, dmi.ID, dmi.Class, dmi.Name, dmi.UUID, dmi.RbDataStatus, dmi.RbLocalDataStatus, dmi.RbLocalDeleted, dmi.RbLocalSynced, dmi.Usn, dmi.RbLocalUsn, dmi.CreatedAt, dmi.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	dmi._exists = true
	return nil
}

// Update updates a DjmdMenuItem in the database.
func (c *Client) UpdateDjmdMenuItem(ctx context.Context, dmi *DjmdMenuItem) error {
	db := c.db

	switch {
	case !dmi._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case dmi._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE djmdMenuItems SET ` +
		`Class = $1, Name = $2, UUID = $3, rb_data_status = $4, rb_local_data_status = $5, rb_local_deleted = $6, rb_local_synced = $7, usn = $8, rb_local_usn = $9, created_at = $10, updated_at = $11 ` +
		`WHERE ID = $12`
	// run
	logf(sqlstr, dmi.Class, dmi.Name, dmi.UUID, dmi.RbDataStatus, dmi.RbLocalDataStatus, dmi.RbLocalDeleted, dmi.RbLocalSynced, dmi.Usn, dmi.RbLocalUsn, dmi.CreatedAt, dmi.UpdatedAt, dmi.ID)
	if _, err := db.ExecContext(ctx, sqlstr, dmi.Class, dmi.Name, dmi.UUID, dmi.RbDataStatus, dmi.RbLocalDataStatus, dmi.RbLocalDeleted, dmi.RbLocalSynced, dmi.Usn, dmi.RbLocalUsn, dmi.CreatedAt, dmi.UpdatedAt, dmi.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the DjmdMenuItem to the database.
func (c *Client) SaveDjmdMenuItem(ctx context.Context, dmi *DjmdMenuItem) error {
	if dmi.Exists() {
		return c.UpdateDjmdMenuItem(ctx, dmi)
	}
	return c.InsertDjmdMenuItem(ctx, dmi)
}

// Upsert performs an upsert for DjmdMenuItem.
func (c *Client) UpsertDjmdMenuItem(ctx context.Context, dmi *DjmdMenuItem) error {
	db := c.db

	switch {
	case dmi._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO djmdMenuItems (` +
		`ID, Class, Name, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12` +
		`)` +
		` ON CONFLICT (ID) DO ` +
		`UPDATE SET ` +
		`Class = EXCLUDED.Class, Name = EXCLUDED.Name, UUID = EXCLUDED.UUID, rb_data_status = EXCLUDED.rb_data_status, rb_local_data_status = EXCLUDED.rb_local_data_status, rb_local_deleted = EXCLUDED.rb_local_deleted, rb_local_synced = EXCLUDED.rb_local_synced, usn = EXCLUDED.usn, rb_local_usn = EXCLUDED.rb_local_usn, created_at = EXCLUDED.created_at, updated_at = EXCLUDED.updated_at `
	// run
	logf(sqlstr, dmi.ID, dmi.Class, dmi.Name, dmi.UUID, dmi.RbDataStatus, dmi.RbLocalDataStatus, dmi.RbLocalDeleted, dmi.RbLocalSynced, dmi.Usn, dmi.RbLocalUsn, dmi.CreatedAt, dmi.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, dmi.ID, dmi.Class, dmi.Name, dmi.UUID, dmi.RbDataStatus, dmi.RbLocalDataStatus, dmi.RbLocalDeleted, dmi.RbLocalSynced, dmi.Usn, dmi.RbLocalUsn, dmi.CreatedAt, dmi.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	dmi._exists = true
	return nil
}

// Delete deletes the DjmdMenuItem from the database.
func (c *Client) DeleteDjmdMenuItem(ctx context.Context, dmi *DjmdMenuItem) error {
	db := c.db

	switch {
	case !dmi._exists: // doesn't exist
		return nil
	case dmi._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM djmdMenuItems ` +
		`WHERE ID = $1`
	// run
	logf(sqlstr, dmi.ID)
	if _, err := db.ExecContext(ctx, sqlstr, dmi.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	dmi._deleted = true
	return nil
}

func scanDjmdMenuItemRows(rows *sql.Rows) ([]*DjmdMenuItem, error) {
	var res []*DjmdMenuItem
	for rows.Next() {
		dmi := DjmdMenuItem{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dmi.ID, &dmi.Class, &dmi.Name, &dmi.UUID, &dmi.RbDataStatus, &dmi.RbLocalDataStatus, &dmi.RbLocalDeleted, &dmi.RbLocalSynced, &dmi.Usn, &dmi.RbLocalUsn, &dmi.CreatedAt, &dmi.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dmi)
	}

	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

func (c *Client) AllDjmdMenuItem(ctx context.Context) ([]*DjmdMenuItem, error) {
	db := c.db

	const sqlstr = `SELECT * FROM DjmdMenuItem`
	rows, err := db.QueryContext(ctx, sqlstr)
	if err != nil {
		return nil, logerror(err)
	}

	defer rows.Close()
	res, err := scanDjmdMenuItemRows(rows)
	if err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdMenuItemsByUUID retrieves a row from 'djmdMenuItems' as a DjmdMenuItem.
//
// Generated from index 'djmd_menu_items__u_u_i_d'.
func (c *Client) DjmdMenuItemsByUUID(ctx context.Context, uuid nulltype.NullString) ([]*DjmdMenuItem, error) {
	// func DjmdMenuItemsByUUID(ctx context.Context, db DB, uuid nulltype.NullString) ([]*DjmdMenuItem, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, Class, Name, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdMenuItems ` +
		`WHERE UUID = $1`
	// run
	logf(sqlstr, uuid)
	rows, err := db.QueryContext(ctx, sqlstr, uuid)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdMenuItem
	for rows.Next() {
		dmi := DjmdMenuItem{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dmi.ID, &dmi.Class, &dmi.Name, &dmi.UUID, &dmi.RbDataStatus, &dmi.RbLocalDataStatus, &dmi.RbLocalDeleted, &dmi.RbLocalSynced, &dmi.Usn, &dmi.RbLocalUsn, &dmi.CreatedAt, &dmi.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dmi)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdMenuItemsByRbDataStatus retrieves a row from 'djmdMenuItems' as a DjmdMenuItem.
//
// Generated from index 'djmd_menu_items_rb_data_status'.
func (c *Client) DjmdMenuItemsByRbDataStatus(ctx context.Context, rbDataStatus nulltype.NullInt64) ([]*DjmdMenuItem, error) {
	// func DjmdMenuItemsByRbDataStatus(ctx context.Context, db DB, rbDataStatus nulltype.NullInt64) ([]*DjmdMenuItem, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, Class, Name, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdMenuItems ` +
		`WHERE rb_data_status = $1`
	// run
	logf(sqlstr, rbDataStatus)
	rows, err := db.QueryContext(ctx, sqlstr, rbDataStatus)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdMenuItem
	for rows.Next() {
		dmi := DjmdMenuItem{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dmi.ID, &dmi.Class, &dmi.Name, &dmi.UUID, &dmi.RbDataStatus, &dmi.RbLocalDataStatus, &dmi.RbLocalDeleted, &dmi.RbLocalSynced, &dmi.Usn, &dmi.RbLocalUsn, &dmi.CreatedAt, &dmi.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dmi)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdMenuItemsByRbLocalDataStatus retrieves a row from 'djmdMenuItems' as a DjmdMenuItem.
//
// Generated from index 'djmd_menu_items_rb_local_data_status'.
func (c *Client) DjmdMenuItemsByRbLocalDataStatus(ctx context.Context, rbLocalDataStatus nulltype.NullInt64) ([]*DjmdMenuItem, error) {
	// func DjmdMenuItemsByRbLocalDataStatus(ctx context.Context, db DB, rbLocalDataStatus nulltype.NullInt64) ([]*DjmdMenuItem, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, Class, Name, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdMenuItems ` +
		`WHERE rb_local_data_status = $1`
	// run
	logf(sqlstr, rbLocalDataStatus)
	rows, err := db.QueryContext(ctx, sqlstr, rbLocalDataStatus)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdMenuItem
	for rows.Next() {
		dmi := DjmdMenuItem{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dmi.ID, &dmi.Class, &dmi.Name, &dmi.UUID, &dmi.RbDataStatus, &dmi.RbLocalDataStatus, &dmi.RbLocalDeleted, &dmi.RbLocalSynced, &dmi.Usn, &dmi.RbLocalUsn, &dmi.CreatedAt, &dmi.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dmi)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdMenuItemsByRbLocalDeleted retrieves a row from 'djmdMenuItems' as a DjmdMenuItem.
//
// Generated from index 'djmd_menu_items_rb_local_deleted'.
func (c *Client) DjmdMenuItemsByRbLocalDeleted(ctx context.Context, rbLocalDeleted nulltype.NullInt64) ([]*DjmdMenuItem, error) {
	// func DjmdMenuItemsByRbLocalDeleted(ctx context.Context, db DB, rbLocalDeleted nulltype.NullInt64) ([]*DjmdMenuItem, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, Class, Name, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdMenuItems ` +
		`WHERE rb_local_deleted = $1`
	// run
	logf(sqlstr, rbLocalDeleted)
	rows, err := db.QueryContext(ctx, sqlstr, rbLocalDeleted)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdMenuItem
	for rows.Next() {
		dmi := DjmdMenuItem{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dmi.ID, &dmi.Class, &dmi.Name, &dmi.UUID, &dmi.RbDataStatus, &dmi.RbLocalDataStatus, &dmi.RbLocalDeleted, &dmi.RbLocalSynced, &dmi.Usn, &dmi.RbLocalUsn, &dmi.CreatedAt, &dmi.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dmi)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdMenuItemsByRbLocalUsnID retrieves a row from 'djmdMenuItems' as a DjmdMenuItem.
//
// Generated from index 'djmd_menu_items_rb_local_usn__i_d'.
func (c *Client) DjmdMenuItemsByRbLocalUsnID(ctx context.Context, rbLocalUsn nulltype.NullInt64, id nulltype.NullString) ([]*DjmdMenuItem, error) {
	// func DjmdMenuItemsByRbLocalUsnID(ctx context.Context, db DB, rbLocalUsn nulltype.NullInt64, id nulltype.NullString) ([]*DjmdMenuItem, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, Class, Name, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdMenuItems ` +
		`WHERE rb_local_usn = $1 AND ID = $2`
	// run
	logf(sqlstr, rbLocalUsn, id)
	rows, err := db.QueryContext(ctx, sqlstr, rbLocalUsn, id)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdMenuItem
	for rows.Next() {
		dmi := DjmdMenuItem{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dmi.ID, &dmi.Class, &dmi.Name, &dmi.UUID, &dmi.RbDataStatus, &dmi.RbLocalDataStatus, &dmi.RbLocalDeleted, &dmi.RbLocalSynced, &dmi.Usn, &dmi.RbLocalUsn, &dmi.CreatedAt, &dmi.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dmi)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdMenuItemByID retrieves a row from 'djmdMenuItems' as a DjmdMenuItem.
//
// Generated from index 'sqlite_autoindex_djmdMenuItems_1'.
func (c *Client) DjmdMenuItemByID(ctx context.Context, id nulltype.NullString) (*DjmdMenuItem, error) {
	// func DjmdMenuItemByID(ctx context.Context, db DB, id nulltype.NullString) (*DjmdMenuItem, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, Class, Name, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdMenuItems ` +
		`WHERE ID = $1`
	// run
	logf(sqlstr, id)
	dmi := DjmdMenuItem{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&dmi.ID, &dmi.Class, &dmi.Name, &dmi.UUID, &dmi.RbDataStatus, &dmi.RbLocalDataStatus, &dmi.RbLocalDeleted, &dmi.RbLocalSynced, &dmi.Usn, &dmi.RbLocalUsn, &dmi.CreatedAt, &dmi.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &dmi, nil
}
