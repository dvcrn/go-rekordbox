package rekordbox

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// DjmdColor represents a row from 'djmdColor'.
type DjmdColor struct {
	ID                sql.NullString `json:"ID"`                   // ID
	ColorCode         sql.NullInt64  `json:"ColorCode"`            // ColorCode
	SortKey           sql.NullInt64  `json:"SortKey"`              // SortKey
	Commnt            sql.NullString `json:"Commnt"`               // Commnt
	UUID              sql.NullString `json:"UUID"`                 // UUID
	RbDataStatus      sql.NullInt64  `json:"rb_data_status"`       // rb_data_status
	RbLocalDataStatus sql.NullInt64  `json:"rb_local_data_status"` // rb_local_data_status
	RbLocalDeleted    sql.NullInt64  `json:"rb_local_deleted"`     // rb_local_deleted
	RbLocalSynced     sql.NullInt64  `json:"rb_local_synced"`      // rb_local_synced
	Usn               sql.NullInt64  `json:"usn"`                  // usn
	RbLocalUsn        sql.NullInt64  `json:"rb_local_usn"`         // rb_local_usn
	CreatedAt         Time           `json:"created_at"`           // created_at
	UpdatedAt         Time           `json:"updated_at"`           // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the DjmdColor exists in the database.
func (dc *DjmdColor) Exists() bool {
	return dc._exists
}

// Deleted returns true when the DjmdColor has been marked for deletion from
// the database.
func (dc *DjmdColor) Deleted() bool {
	return dc._deleted
}

// Insert inserts the DjmdColor to the database.
func (c *Client) InsertDjmdColor(ctx context.Context, dc *DjmdColor) error {
	db := c.db

	switch {
	case dc._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case dc._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO djmdColor (` +
		`ID, ColorCode, SortKey, Commnt, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13` +
		`)`
	// run
	logf(sqlstr, dc.ID, dc.ColorCode, dc.SortKey, dc.Commnt, dc.UUID, dc.RbDataStatus, dc.RbLocalDataStatus, dc.RbLocalDeleted, dc.RbLocalSynced, dc.Usn, dc.RbLocalUsn, dc.CreatedAt, dc.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, dc.ID, dc.ColorCode, dc.SortKey, dc.Commnt, dc.UUID, dc.RbDataStatus, dc.RbLocalDataStatus, dc.RbLocalDeleted, dc.RbLocalSynced, dc.Usn, dc.RbLocalUsn, dc.CreatedAt, dc.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	dc._exists = true
	return nil
}

// Update updates a DjmdColor in the database.
func (c *Client) UpdateDjmdColor(ctx context.Context, dc *DjmdColor) error {
	db := c.db

	switch {
	case !dc._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case dc._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE djmdColor SET ` +
		`ColorCode = $1, SortKey = $2, Commnt = $3, UUID = $4, rb_data_status = $5, rb_local_data_status = $6, rb_local_deleted = $7, rb_local_synced = $8, usn = $9, rb_local_usn = $10, created_at = $11, updated_at = $12 ` +
		`WHERE ID = $13`
	// run
	logf(sqlstr, dc.ColorCode, dc.SortKey, dc.Commnt, dc.UUID, dc.RbDataStatus, dc.RbLocalDataStatus, dc.RbLocalDeleted, dc.RbLocalSynced, dc.Usn, dc.RbLocalUsn, dc.CreatedAt, dc.UpdatedAt, dc.ID)
	if _, err := db.ExecContext(ctx, sqlstr, dc.ColorCode, dc.SortKey, dc.Commnt, dc.UUID, dc.RbDataStatus, dc.RbLocalDataStatus, dc.RbLocalDeleted, dc.RbLocalSynced, dc.Usn, dc.RbLocalUsn, dc.CreatedAt, dc.UpdatedAt, dc.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the DjmdColor to the database.
func (c *Client) SaveDjmdColor(ctx context.Context, dc *DjmdColor) error {
	if dc.Exists() {
		return c.UpdateDjmdColor(ctx, dc)
	}
	return c.InsertDjmdColor(ctx, dc)
}

// Upsert performs an upsert for DjmdColor.
func (c *Client) UpsertDjmdColor(ctx context.Context, dc *DjmdColor) error {
	db := c.db

	switch {
	case dc._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO djmdColor (` +
		`ID, ColorCode, SortKey, Commnt, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13` +
		`)` +
		` ON CONFLICT (ID) DO ` +
		`UPDATE SET ` +
		`ColorCode = EXCLUDED.ColorCode, SortKey = EXCLUDED.SortKey, Commnt = EXCLUDED.Commnt, UUID = EXCLUDED.UUID, rb_data_status = EXCLUDED.rb_data_status, rb_local_data_status = EXCLUDED.rb_local_data_status, rb_local_deleted = EXCLUDED.rb_local_deleted, rb_local_synced = EXCLUDED.rb_local_synced, usn = EXCLUDED.usn, rb_local_usn = EXCLUDED.rb_local_usn, created_at = EXCLUDED.created_at, updated_at = EXCLUDED.updated_at `
	// run
	logf(sqlstr, dc.ID, dc.ColorCode, dc.SortKey, dc.Commnt, dc.UUID, dc.RbDataStatus, dc.RbLocalDataStatus, dc.RbLocalDeleted, dc.RbLocalSynced, dc.Usn, dc.RbLocalUsn, dc.CreatedAt, dc.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, dc.ID, dc.ColorCode, dc.SortKey, dc.Commnt, dc.UUID, dc.RbDataStatus, dc.RbLocalDataStatus, dc.RbLocalDeleted, dc.RbLocalSynced, dc.Usn, dc.RbLocalUsn, dc.CreatedAt, dc.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	dc._exists = true
	return nil
}

// Delete deletes the DjmdColor from the database.
func (c *Client) DeleteDjmdColor(ctx context.Context, dc *DjmdColor) error {
	db := c.db

	switch {
	case !dc._exists: // doesn't exist
		return nil
	case dc._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM djmdColor ` +
		`WHERE ID = $1`
	// run
	logf(sqlstr, dc.ID)
	if _, err := db.ExecContext(ctx, sqlstr, dc.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	dc._deleted = true
	return nil
}

func scanDjmdColorRows(rows *sql.Rows) ([]*DjmdColor, error) {
	var res []*DjmdColor
	for rows.Next() {
		dc := DjmdColor{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dc.ID, &dc.ColorCode, &dc.SortKey, &dc.Commnt, &dc.UUID, &dc.RbDataStatus, &dc.RbLocalDataStatus, &dc.RbLocalDeleted, &dc.RbLocalSynced, &dc.Usn, &dc.RbLocalUsn, &dc.CreatedAt, &dc.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dc)
	}

	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

func (c *Client) AllDjmdColor(ctx context.Context) ([]*DjmdColor, error) {
	db := c.db

	const sqlstr = `SELECT * FROM DjmdColor`
	rows, err := db.QueryContext(ctx, sqlstr)
	if err != nil {
		return nil, logerror(err)
	}

	defer rows.Close()
	res, err := scanDjmdColorRows(rows)
	if err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdColorByUUID retrieves a row from 'djmdColor' as a DjmdColor.
//
// Generated from index 'djmd_color__u_u_i_d'.
func (c *Client) DjmdColorByUUID(ctx context.Context, uuid sql.NullString) ([]*DjmdColor, error) {
	// func DjmdColorByUUID(ctx context.Context, db DB, uuid sql.NullString) ([]*DjmdColor, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, ColorCode, SortKey, Commnt, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdColor ` +
		`WHERE UUID = $1`
	// run
	logf(sqlstr, uuid)
	rows, err := db.QueryContext(ctx, sqlstr, uuid)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdColor
	for rows.Next() {
		dc := DjmdColor{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dc.ID, &dc.ColorCode, &dc.SortKey, &dc.Commnt, &dc.UUID, &dc.RbDataStatus, &dc.RbLocalDataStatus, &dc.RbLocalDeleted, &dc.RbLocalSynced, &dc.Usn, &dc.RbLocalUsn, &dc.CreatedAt, &dc.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dc)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdColorByRbDataStatus retrieves a row from 'djmdColor' as a DjmdColor.
//
// Generated from index 'djmd_color_rb_data_status'.
func (c *Client) DjmdColorByRbDataStatus(ctx context.Context, rbDataStatus sql.NullInt64) ([]*DjmdColor, error) {
	// func DjmdColorByRbDataStatus(ctx context.Context, db DB, rbDataStatus sql.NullInt64) ([]*DjmdColor, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, ColorCode, SortKey, Commnt, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdColor ` +
		`WHERE rb_data_status = $1`
	// run
	logf(sqlstr, rbDataStatus)
	rows, err := db.QueryContext(ctx, sqlstr, rbDataStatus)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdColor
	for rows.Next() {
		dc := DjmdColor{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dc.ID, &dc.ColorCode, &dc.SortKey, &dc.Commnt, &dc.UUID, &dc.RbDataStatus, &dc.RbLocalDataStatus, &dc.RbLocalDeleted, &dc.RbLocalSynced, &dc.Usn, &dc.RbLocalUsn, &dc.CreatedAt, &dc.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dc)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdColorByRbLocalDataStatus retrieves a row from 'djmdColor' as a DjmdColor.
//
// Generated from index 'djmd_color_rb_local_data_status'.
func (c *Client) DjmdColorByRbLocalDataStatus(ctx context.Context, rbLocalDataStatus sql.NullInt64) ([]*DjmdColor, error) {
	// func DjmdColorByRbLocalDataStatus(ctx context.Context, db DB, rbLocalDataStatus sql.NullInt64) ([]*DjmdColor, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, ColorCode, SortKey, Commnt, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdColor ` +
		`WHERE rb_local_data_status = $1`
	// run
	logf(sqlstr, rbLocalDataStatus)
	rows, err := db.QueryContext(ctx, sqlstr, rbLocalDataStatus)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdColor
	for rows.Next() {
		dc := DjmdColor{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dc.ID, &dc.ColorCode, &dc.SortKey, &dc.Commnt, &dc.UUID, &dc.RbDataStatus, &dc.RbLocalDataStatus, &dc.RbLocalDeleted, &dc.RbLocalSynced, &dc.Usn, &dc.RbLocalUsn, &dc.CreatedAt, &dc.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dc)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdColorByRbLocalDeleted retrieves a row from 'djmdColor' as a DjmdColor.
//
// Generated from index 'djmd_color_rb_local_deleted'.
func (c *Client) DjmdColorByRbLocalDeleted(ctx context.Context, rbLocalDeleted sql.NullInt64) ([]*DjmdColor, error) {
	// func DjmdColorByRbLocalDeleted(ctx context.Context, db DB, rbLocalDeleted sql.NullInt64) ([]*DjmdColor, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, ColorCode, SortKey, Commnt, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdColor ` +
		`WHERE rb_local_deleted = $1`
	// run
	logf(sqlstr, rbLocalDeleted)
	rows, err := db.QueryContext(ctx, sqlstr, rbLocalDeleted)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdColor
	for rows.Next() {
		dc := DjmdColor{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dc.ID, &dc.ColorCode, &dc.SortKey, &dc.Commnt, &dc.UUID, &dc.RbDataStatus, &dc.RbLocalDataStatus, &dc.RbLocalDeleted, &dc.RbLocalSynced, &dc.Usn, &dc.RbLocalUsn, &dc.CreatedAt, &dc.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dc)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdColorByRbLocalUsnID retrieves a row from 'djmdColor' as a DjmdColor.
//
// Generated from index 'djmd_color_rb_local_usn__i_d'.
func (c *Client) DjmdColorByRbLocalUsnID(ctx context.Context, rbLocalUsn sql.NullInt64, id sql.NullString) ([]*DjmdColor, error) {
	// func DjmdColorByRbLocalUsnID(ctx context.Context, db DB, rbLocalUsn sql.NullInt64, id sql.NullString) ([]*DjmdColor, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, ColorCode, SortKey, Commnt, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdColor ` +
		`WHERE rb_local_usn = $1 AND ID = $2`
	// run
	logf(sqlstr, rbLocalUsn, id)
	rows, err := db.QueryContext(ctx, sqlstr, rbLocalUsn, id)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdColor
	for rows.Next() {
		dc := DjmdColor{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dc.ID, &dc.ColorCode, &dc.SortKey, &dc.Commnt, &dc.UUID, &dc.RbDataStatus, &dc.RbLocalDataStatus, &dc.RbLocalDeleted, &dc.RbLocalSynced, &dc.Usn, &dc.RbLocalUsn, &dc.CreatedAt, &dc.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dc)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdColorByID retrieves a row from 'djmdColor' as a DjmdColor.
//
// Generated from index 'sqlite_autoindex_djmdColor_1'.
func (c *Client) DjmdColorByID(ctx context.Context, id sql.NullString) (*DjmdColor, error) {
	// func DjmdColorByID(ctx context.Context, db DB, id sql.NullString) (*DjmdColor, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, ColorCode, SortKey, Commnt, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdColor ` +
		`WHERE ID = $1`
	// run
	logf(sqlstr, id)
	dc := DjmdColor{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&dc.ID, &dc.ColorCode, &dc.SortKey, &dc.Commnt, &dc.UUID, &dc.RbDataStatus, &dc.RbLocalDataStatus, &dc.RbLocalDeleted, &dc.RbLocalSynced, &dc.Usn, &dc.RbLocalUsn, &dc.CreatedAt, &dc.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &dc, nil
}
