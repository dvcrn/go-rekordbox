package rekordbox

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"

	nulltype "github.com/mattn/go-nulltype"
)

// DjmdKey represents a row from 'djmdKey'.
type DjmdKey struct {
	ID                nulltype.NullString `json:"ID"`                   // ID
	ScaleName         nulltype.NullString `json:"ScaleName"`            // ScaleName
	Seq               nulltype.NullInt64  `json:"Seq"`                  // Seq
	UUID              nulltype.NullString `json:"UUID"`                 // UUID
	RbDataStatus      nulltype.NullInt64  `json:"rb_data_status"`       // rb_data_status
	RbLocalDataStatus nulltype.NullInt64  `json:"rb_local_data_status"` // rb_local_data_status
	RbLocalDeleted    nulltype.NullInt64  `json:"rb_local_deleted"`     // rb_local_deleted
	RbLocalSynced     nulltype.NullInt64  `json:"rb_local_synced"`      // rb_local_synced
	Usn               nulltype.NullInt64  `json:"usn"`                  // usn
	RbLocalUsn        nulltype.NullInt64  `json:"rb_local_usn"`         // rb_local_usn
	CreatedAt         Time                `json:"created_at"`           // created_at
	UpdatedAt         Time                `json:"updated_at"`           // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the DjmdKey exists in the database.
func (dk *DjmdKey) Exists() bool {
	return dk._exists
}

// Deleted returns true when the DjmdKey has been marked for deletion from
// the database.
func (dk *DjmdKey) Deleted() bool {
	return dk._deleted
}

// Insert inserts the DjmdKey to the database.
func (c *Client) InsertDjmdKey(ctx context.Context, dk *DjmdKey) error {
	db := c.db

	switch {
	case dk._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case dk._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO djmdKey (` +
		`ID, ScaleName, Seq, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12` +
		`)`
	// run
	logf(sqlstr, dk.ID, dk.ScaleName, dk.Seq, dk.UUID, dk.RbDataStatus, dk.RbLocalDataStatus, dk.RbLocalDeleted, dk.RbLocalSynced, dk.Usn, dk.RbLocalUsn, dk.CreatedAt, dk.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, dk.ID, dk.ScaleName, dk.Seq, dk.UUID, dk.RbDataStatus, dk.RbLocalDataStatus, dk.RbLocalDeleted, dk.RbLocalSynced, dk.Usn, dk.RbLocalUsn, dk.CreatedAt, dk.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	dk._exists = true
	return nil
}

// Update updates a DjmdKey in the database.
func (c *Client) UpdateDjmdKey(ctx context.Context, dk *DjmdKey) error {
	db := c.db

	switch {
	case !dk._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case dk._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE djmdKey SET ` +
		`ScaleName = $1, Seq = $2, UUID = $3, rb_data_status = $4, rb_local_data_status = $5, rb_local_deleted = $6, rb_local_synced = $7, usn = $8, rb_local_usn = $9, created_at = $10, updated_at = $11 ` +
		`WHERE ID = $12`
	// run
	logf(sqlstr, dk.ScaleName, dk.Seq, dk.UUID, dk.RbDataStatus, dk.RbLocalDataStatus, dk.RbLocalDeleted, dk.RbLocalSynced, dk.Usn, dk.RbLocalUsn, dk.CreatedAt, dk.UpdatedAt, dk.ID)
	if _, err := db.ExecContext(ctx, sqlstr, dk.ScaleName, dk.Seq, dk.UUID, dk.RbDataStatus, dk.RbLocalDataStatus, dk.RbLocalDeleted, dk.RbLocalSynced, dk.Usn, dk.RbLocalUsn, dk.CreatedAt, dk.UpdatedAt, dk.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the DjmdKey to the database.
func (c *Client) SaveDjmdKey(ctx context.Context, dk *DjmdKey) error {
	if dk.Exists() {
		return c.UpdateDjmdKey(ctx, dk)
	}
	return c.InsertDjmdKey(ctx, dk)
}

// Upsert performs an upsert for DjmdKey.
func (c *Client) UpsertDjmdKey(ctx context.Context, dk *DjmdKey) error {
	db := c.db

	switch {
	case dk._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO djmdKey (` +
		`ID, ScaleName, Seq, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12` +
		`)` +
		` ON CONFLICT (ID) DO ` +
		`UPDATE SET ` +
		`ScaleName = EXCLUDED.ScaleName, Seq = EXCLUDED.Seq, UUID = EXCLUDED.UUID, rb_data_status = EXCLUDED.rb_data_status, rb_local_data_status = EXCLUDED.rb_local_data_status, rb_local_deleted = EXCLUDED.rb_local_deleted, rb_local_synced = EXCLUDED.rb_local_synced, usn = EXCLUDED.usn, rb_local_usn = EXCLUDED.rb_local_usn, created_at = EXCLUDED.created_at, updated_at = EXCLUDED.updated_at `
	// run
	logf(sqlstr, dk.ID, dk.ScaleName, dk.Seq, dk.UUID, dk.RbDataStatus, dk.RbLocalDataStatus, dk.RbLocalDeleted, dk.RbLocalSynced, dk.Usn, dk.RbLocalUsn, dk.CreatedAt, dk.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, dk.ID, dk.ScaleName, dk.Seq, dk.UUID, dk.RbDataStatus, dk.RbLocalDataStatus, dk.RbLocalDeleted, dk.RbLocalSynced, dk.Usn, dk.RbLocalUsn, dk.CreatedAt, dk.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	dk._exists = true
	return nil
}

// Delete deletes the DjmdKey from the database.
func (c *Client) DeleteDjmdKey(ctx context.Context, dk *DjmdKey) error {
	db := c.db

	switch {
	case !dk._exists: // doesn't exist
		return nil
	case dk._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM djmdKey ` +
		`WHERE ID = $1`
	// run
	logf(sqlstr, dk.ID)
	if _, err := db.ExecContext(ctx, sqlstr, dk.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	dk._deleted = true
	return nil
}

func scanDjmdKeyRows(rows *sql.Rows) ([]*DjmdKey, error) {
	var res []*DjmdKey
	for rows.Next() {
		dk := DjmdKey{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dk.ID, &dk.ScaleName, &dk.Seq, &dk.UUID, &dk.RbDataStatus, &dk.RbLocalDataStatus, &dk.RbLocalDeleted, &dk.RbLocalSynced, &dk.Usn, &dk.RbLocalUsn, &dk.CreatedAt, &dk.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dk)
	}

	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

func (c *Client) AllDjmdKey(ctx context.Context) ([]*DjmdKey, error) {
	db := c.db

	const sqlstr = `SELECT * FROM DjmdKey`
	rows, err := db.QueryContext(ctx, sqlstr)
	if err != nil {
		return nil, logerror(err)
	}

	defer rows.Close()
	res, err := scanDjmdKeyRows(rows)
	if err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdKeyByScaleName retrieves a row from 'djmdKey' as a DjmdKey.
//
// Generated from index 'djmd_key__scale_name'.
func (c *Client) DjmdKeyByScaleName(ctx context.Context, scaleName nulltype.NullString) ([]*DjmdKey, error) {
	// func DjmdKeyByScaleName(ctx context.Context, db DB, scaleName nulltype.NullString) ([]*DjmdKey, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, ScaleName, Seq, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdKey ` +
		`WHERE ScaleName = $1`
	// run
	logf(sqlstr, scaleName)
	rows, err := db.QueryContext(ctx, sqlstr, scaleName)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdKey
	for rows.Next() {
		dk := DjmdKey{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dk.ID, &dk.ScaleName, &dk.Seq, &dk.UUID, &dk.RbDataStatus, &dk.RbLocalDataStatus, &dk.RbLocalDeleted, &dk.RbLocalSynced, &dk.Usn, &dk.RbLocalUsn, &dk.CreatedAt, &dk.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dk)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdKeyByUUID retrieves a row from 'djmdKey' as a DjmdKey.
//
// Generated from index 'djmd_key__u_u_i_d'.
func (c *Client) DjmdKeyByUUID(ctx context.Context, uuid nulltype.NullString) ([]*DjmdKey, error) {
	// func DjmdKeyByUUID(ctx context.Context, db DB, uuid nulltype.NullString) ([]*DjmdKey, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, ScaleName, Seq, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdKey ` +
		`WHERE UUID = $1`
	// run
	logf(sqlstr, uuid)
	rows, err := db.QueryContext(ctx, sqlstr, uuid)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdKey
	for rows.Next() {
		dk := DjmdKey{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dk.ID, &dk.ScaleName, &dk.Seq, &dk.UUID, &dk.RbDataStatus, &dk.RbLocalDataStatus, &dk.RbLocalDeleted, &dk.RbLocalSynced, &dk.Usn, &dk.RbLocalUsn, &dk.CreatedAt, &dk.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dk)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdKeyByRbDataStatus retrieves a row from 'djmdKey' as a DjmdKey.
//
// Generated from index 'djmd_key_rb_data_status'.
func (c *Client) DjmdKeyByRbDataStatus(ctx context.Context, rbDataStatus nulltype.NullInt64) ([]*DjmdKey, error) {
	// func DjmdKeyByRbDataStatus(ctx context.Context, db DB, rbDataStatus nulltype.NullInt64) ([]*DjmdKey, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, ScaleName, Seq, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdKey ` +
		`WHERE rb_data_status = $1`
	// run
	logf(sqlstr, rbDataStatus)
	rows, err := db.QueryContext(ctx, sqlstr, rbDataStatus)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdKey
	for rows.Next() {
		dk := DjmdKey{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dk.ID, &dk.ScaleName, &dk.Seq, &dk.UUID, &dk.RbDataStatus, &dk.RbLocalDataStatus, &dk.RbLocalDeleted, &dk.RbLocalSynced, &dk.Usn, &dk.RbLocalUsn, &dk.CreatedAt, &dk.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dk)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdKeyByRbLocalDataStatus retrieves a row from 'djmdKey' as a DjmdKey.
//
// Generated from index 'djmd_key_rb_local_data_status'.
func (c *Client) DjmdKeyByRbLocalDataStatus(ctx context.Context, rbLocalDataStatus nulltype.NullInt64) ([]*DjmdKey, error) {
	// func DjmdKeyByRbLocalDataStatus(ctx context.Context, db DB, rbLocalDataStatus nulltype.NullInt64) ([]*DjmdKey, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, ScaleName, Seq, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdKey ` +
		`WHERE rb_local_data_status = $1`
	// run
	logf(sqlstr, rbLocalDataStatus)
	rows, err := db.QueryContext(ctx, sqlstr, rbLocalDataStatus)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdKey
	for rows.Next() {
		dk := DjmdKey{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dk.ID, &dk.ScaleName, &dk.Seq, &dk.UUID, &dk.RbDataStatus, &dk.RbLocalDataStatus, &dk.RbLocalDeleted, &dk.RbLocalSynced, &dk.Usn, &dk.RbLocalUsn, &dk.CreatedAt, &dk.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dk)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdKeyByRbLocalDeleted retrieves a row from 'djmdKey' as a DjmdKey.
//
// Generated from index 'djmd_key_rb_local_deleted'.
func (c *Client) DjmdKeyByRbLocalDeleted(ctx context.Context, rbLocalDeleted nulltype.NullInt64) ([]*DjmdKey, error) {
	// func DjmdKeyByRbLocalDeleted(ctx context.Context, db DB, rbLocalDeleted nulltype.NullInt64) ([]*DjmdKey, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, ScaleName, Seq, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdKey ` +
		`WHERE rb_local_deleted = $1`
	// run
	logf(sqlstr, rbLocalDeleted)
	rows, err := db.QueryContext(ctx, sqlstr, rbLocalDeleted)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdKey
	for rows.Next() {
		dk := DjmdKey{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dk.ID, &dk.ScaleName, &dk.Seq, &dk.UUID, &dk.RbDataStatus, &dk.RbLocalDataStatus, &dk.RbLocalDeleted, &dk.RbLocalSynced, &dk.Usn, &dk.RbLocalUsn, &dk.CreatedAt, &dk.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dk)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdKeyByRbLocalUsnID retrieves a row from 'djmdKey' as a DjmdKey.
//
// Generated from index 'djmd_key_rb_local_usn__i_d'.
func (c *Client) DjmdKeyByRbLocalUsnID(ctx context.Context, rbLocalUsn nulltype.NullInt64, id nulltype.NullString) ([]*DjmdKey, error) {
	// func DjmdKeyByRbLocalUsnID(ctx context.Context, db DB, rbLocalUsn nulltype.NullInt64, id nulltype.NullString) ([]*DjmdKey, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, ScaleName, Seq, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdKey ` +
		`WHERE rb_local_usn = $1 AND ID = $2`
	// run
	logf(sqlstr, rbLocalUsn, id)
	rows, err := db.QueryContext(ctx, sqlstr, rbLocalUsn, id)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdKey
	for rows.Next() {
		dk := DjmdKey{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dk.ID, &dk.ScaleName, &dk.Seq, &dk.UUID, &dk.RbDataStatus, &dk.RbLocalDataStatus, &dk.RbLocalDeleted, &dk.RbLocalSynced, &dk.Usn, &dk.RbLocalUsn, &dk.CreatedAt, &dk.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dk)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdKeyByID retrieves a row from 'djmdKey' as a DjmdKey.
//
// Generated from index 'sqlite_autoindex_djmdKey_1'.
func (c *Client) DjmdKeyByID(ctx context.Context, id nulltype.NullString) (*DjmdKey, error) {
	// func DjmdKeyByID(ctx context.Context, db DB, id nulltype.NullString) (*DjmdKey, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, ScaleName, Seq, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdKey ` +
		`WHERE ID = $1`
	// run
	logf(sqlstr, id)
	dk := DjmdKey{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&dk.ID, &dk.ScaleName, &dk.Seq, &dk.UUID, &dk.RbDataStatus, &dk.RbLocalDataStatus, &dk.RbLocalDeleted, &dk.RbLocalSynced, &dk.Usn, &dk.RbLocalUsn, &dk.CreatedAt, &dk.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &dk, nil
}
