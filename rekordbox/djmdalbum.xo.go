package rekordbox

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// DjmdAlbum represents a row from 'djmdAlbum'.
type DjmdAlbum struct {
	ID                sql.NullString `json:"ID"`                   // ID
	Name              sql.NullString `json:"Name"`                 // Name
	AlbumArtistID     sql.NullString `json:"AlbumArtistID"`        // AlbumArtistID
	ImagePath         sql.NullString `json:"ImagePath"`            // ImagePath
	Compilation       sql.NullInt64  `json:"Compilation"`          // Compilation
	SearchStr         sql.NullString `json:"SearchStr"`            // SearchStr
	UUID              sql.NullString `json:"UUID"`                 // UUID
	RbDataStatus      sql.NullInt64  `json:"rb_data_status"`       // rb_data_status
	RbLocalDataStatus sql.NullInt64  `json:"rb_local_data_status"` // rb_local_data_status
	RbLocalDeleted    sql.NullInt64  `json:"rb_local_deleted"`     // rb_local_deleted
	RbLocalSynced     sql.NullInt64  `json:"rb_local_synced"`      // rb_local_synced
	Usn               sql.NullInt64  `json:"usn"`                  // usn
	RbLocalUsn        sql.NullInt64  `json:"rb_local_usn"`         // rb_local_usn
	CreatedAt         Time           `json:"created_at"`           // created_at
	UpdatedAt         Time           `json:"updated_at"`           // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the DjmdAlbum exists in the database.
func (da *DjmdAlbum) Exists() bool {
	return da._exists
}

// Deleted returns true when the DjmdAlbum has been marked for deletion from
// the database.
func (da *DjmdAlbum) Deleted() bool {
	return da._deleted
}

// Insert inserts the DjmdAlbum to the database.
func (c *Client) InsertDjmdAlbum(ctx context.Context, da *DjmdAlbum) error {
	db := c.db

	switch {
	case da._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case da._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO djmdAlbum (` +
		`ID, Name, AlbumArtistID, ImagePath, Compilation, SearchStr, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15` +
		`)`
	// run
	logf(sqlstr, da.ID, da.Name, da.AlbumArtistID, da.ImagePath, da.Compilation, da.SearchStr, da.UUID, da.RbDataStatus, da.RbLocalDataStatus, da.RbLocalDeleted, da.RbLocalSynced, da.Usn, da.RbLocalUsn, da.CreatedAt, da.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, da.ID, da.Name, da.AlbumArtistID, da.ImagePath, da.Compilation, da.SearchStr, da.UUID, da.RbDataStatus, da.RbLocalDataStatus, da.RbLocalDeleted, da.RbLocalSynced, da.Usn, da.RbLocalUsn, da.CreatedAt, da.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	da._exists = true
	return nil
}

// Update updates a DjmdAlbum in the database.
func (c *Client) UpdateDjmdAlbum(ctx context.Context, da *DjmdAlbum) error {
	db := c.db

	switch {
	case !da._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case da._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE djmdAlbum SET ` +
		`Name = $1, AlbumArtistID = $2, ImagePath = $3, Compilation = $4, SearchStr = $5, UUID = $6, rb_data_status = $7, rb_local_data_status = $8, rb_local_deleted = $9, rb_local_synced = $10, usn = $11, rb_local_usn = $12, created_at = $13, updated_at = $14 ` +
		`WHERE ID = $15`
	// run
	logf(sqlstr, da.Name, da.AlbumArtistID, da.ImagePath, da.Compilation, da.SearchStr, da.UUID, da.RbDataStatus, da.RbLocalDataStatus, da.RbLocalDeleted, da.RbLocalSynced, da.Usn, da.RbLocalUsn, da.CreatedAt, da.UpdatedAt, da.ID)
	if _, err := db.ExecContext(ctx, sqlstr, da.Name, da.AlbumArtistID, da.ImagePath, da.Compilation, da.SearchStr, da.UUID, da.RbDataStatus, da.RbLocalDataStatus, da.RbLocalDeleted, da.RbLocalSynced, da.Usn, da.RbLocalUsn, da.CreatedAt, da.UpdatedAt, da.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the DjmdAlbum to the database.
func (c *Client) SaveDjmdAlbum(ctx context.Context, da *DjmdAlbum) error {
	if da.Exists() {
		return c.UpdateDjmdAlbum(ctx, da)
	}
	return c.InsertDjmdAlbum(ctx, da)
}

// Upsert performs an upsert for DjmdAlbum.
func (c *Client) UpsertDjmdAlbum(ctx context.Context, da *DjmdAlbum) error {
	db := c.db

	switch {
	case da._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO djmdAlbum (` +
		`ID, Name, AlbumArtistID, ImagePath, Compilation, SearchStr, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15` +
		`)` +
		` ON CONFLICT (ID) DO ` +
		`UPDATE SET ` +
		`Name = EXCLUDED.Name, AlbumArtistID = EXCLUDED.AlbumArtistID, ImagePath = EXCLUDED.ImagePath, Compilation = EXCLUDED.Compilation, SearchStr = EXCLUDED.SearchStr, UUID = EXCLUDED.UUID, rb_data_status = EXCLUDED.rb_data_status, rb_local_data_status = EXCLUDED.rb_local_data_status, rb_local_deleted = EXCLUDED.rb_local_deleted, rb_local_synced = EXCLUDED.rb_local_synced, usn = EXCLUDED.usn, rb_local_usn = EXCLUDED.rb_local_usn, created_at = EXCLUDED.created_at, updated_at = EXCLUDED.updated_at `
	// run
	logf(sqlstr, da.ID, da.Name, da.AlbumArtistID, da.ImagePath, da.Compilation, da.SearchStr, da.UUID, da.RbDataStatus, da.RbLocalDataStatus, da.RbLocalDeleted, da.RbLocalSynced, da.Usn, da.RbLocalUsn, da.CreatedAt, da.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, da.ID, da.Name, da.AlbumArtistID, da.ImagePath, da.Compilation, da.SearchStr, da.UUID, da.RbDataStatus, da.RbLocalDataStatus, da.RbLocalDeleted, da.RbLocalSynced, da.Usn, da.RbLocalUsn, da.CreatedAt, da.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	da._exists = true
	return nil
}

// Delete deletes the DjmdAlbum from the database.
func (c *Client) DeleteDjmdAlbum(ctx context.Context, da *DjmdAlbum) error {
	db := c.db

	switch {
	case !da._exists: // doesn't exist
		return nil
	case da._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM djmdAlbum ` +
		`WHERE ID = $1`
	// run
	logf(sqlstr, da.ID)
	if _, err := db.ExecContext(ctx, sqlstr, da.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	da._deleted = true
	return nil
}

func (c *Client) AllDjmdAlbum(ctx context.Context) ([]*DjmdAlbum, error) {
	db := c.db

	const sqlstr = `SELECT * FROM DjmdAlbum`
	rows, err := db.QueryContext(ctx, sqlstr)
	if err != nil {
		return nil, logerror(err)
	}

	defer rows.Close()
	// process
	var res []*DjmdAlbum
	for rows.Next() {
		da := DjmdAlbum{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&da.ID, &da.Name, &da.AlbumArtistID, &da.ImagePath, &da.Compilation, &da.SearchStr, &da.UUID, &da.RbDataStatus, &da.RbLocalDataStatus, &da.RbLocalDeleted, &da.RbLocalSynced, &da.Usn, &da.RbLocalUsn, &da.CreatedAt, &da.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &da)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdAlbumByAlbumArtistID retrieves a row from 'djmdAlbum' as a DjmdAlbum.
//
// Generated from index 'djmd_album__album_artist_i_d'.
// func (da *DjmdAlbum) djmdAlbum(db DB) (error)
// func DjmdAlbumByAlbumArtistID(ctx context.Context, db DB, albumArtistID sql.NullString) ([]*DjmdAlbum, error) {
// DjmdAlbumByAlbumArtistID {
// func DjmdAlbumByAlbumArtistID(db DB, albumArtistID sql.NullString) ([]*DjmdAlbum, error) {
// true
// albumArtistID
// DjmdAlbum
// DjmdAlbumByAlbumArtistID
// false
// false
func (c *Client) DjmdAlbumByAlbumArtistID(ctx context.Context, albumArtistID sql.NullString) ([]*DjmdAlbum, error) {
	// func DjmdAlbumByAlbumArtistID(ctx context.Context, db DB, albumArtistID sql.NullString) ([]*DjmdAlbum, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, Name, AlbumArtistID, ImagePath, Compilation, SearchStr, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdAlbum ` +
		`WHERE AlbumArtistID = $1`
	// run
	logf(sqlstr, albumArtistID)
	rows, err := db.QueryContext(ctx, sqlstr, albumArtistID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdAlbum
	for rows.Next() {
		da := DjmdAlbum{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&da.ID, &da.Name, &da.AlbumArtistID, &da.ImagePath, &da.Compilation, &da.SearchStr, &da.UUID, &da.RbDataStatus, &da.RbLocalDataStatus, &da.RbLocalDeleted, &da.RbLocalSynced, &da.Usn, &da.RbLocalUsn, &da.CreatedAt, &da.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &da)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdAlbumByName retrieves a row from 'djmdAlbum' as a DjmdAlbum.
//
// Generated from index 'djmd_album__name'.
// func (da *DjmdAlbum) djmdAlbum(db DB) (error)
// func DjmdAlbumByName(ctx context.Context, db DB, name sql.NullString) ([]*DjmdAlbum, error) {
// DjmdAlbumByName {
// func DjmdAlbumByName(db DB, name sql.NullString) ([]*DjmdAlbum, error) {
// true
// name
// DjmdAlbum
// DjmdAlbumByName
// false
// false
func (c *Client) DjmdAlbumByName(ctx context.Context, name sql.NullString) ([]*DjmdAlbum, error) {
	// func DjmdAlbumByName(ctx context.Context, db DB, name sql.NullString) ([]*DjmdAlbum, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, Name, AlbumArtistID, ImagePath, Compilation, SearchStr, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdAlbum ` +
		`WHERE Name = $1`
	// run
	logf(sqlstr, name)
	rows, err := db.QueryContext(ctx, sqlstr, name)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdAlbum
	for rows.Next() {
		da := DjmdAlbum{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&da.ID, &da.Name, &da.AlbumArtistID, &da.ImagePath, &da.Compilation, &da.SearchStr, &da.UUID, &da.RbDataStatus, &da.RbLocalDataStatus, &da.RbLocalDeleted, &da.RbLocalSynced, &da.Usn, &da.RbLocalUsn, &da.CreatedAt, &da.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &da)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdAlbumByUUID retrieves a row from 'djmdAlbum' as a DjmdAlbum.
//
// Generated from index 'djmd_album__u_u_i_d'.
// func (da *DjmdAlbum) djmdAlbum(db DB) (error)
// func DjmdAlbumByUUID(ctx context.Context, db DB, uuid sql.NullString) ([]*DjmdAlbum, error) {
// DjmdAlbumByUUID {
// func DjmdAlbumByUUID(db DB, uuid sql.NullString) ([]*DjmdAlbum, error) {
// true
// uuid
// DjmdAlbum
// DjmdAlbumByUUID
// false
// false
func (c *Client) DjmdAlbumByUUID(ctx context.Context, uuid sql.NullString) ([]*DjmdAlbum, error) {
	// func DjmdAlbumByUUID(ctx context.Context, db DB, uuid sql.NullString) ([]*DjmdAlbum, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, Name, AlbumArtistID, ImagePath, Compilation, SearchStr, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdAlbum ` +
		`WHERE UUID = $1`
	// run
	logf(sqlstr, uuid)
	rows, err := db.QueryContext(ctx, sqlstr, uuid)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdAlbum
	for rows.Next() {
		da := DjmdAlbum{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&da.ID, &da.Name, &da.AlbumArtistID, &da.ImagePath, &da.Compilation, &da.SearchStr, &da.UUID, &da.RbDataStatus, &da.RbLocalDataStatus, &da.RbLocalDeleted, &da.RbLocalSynced, &da.Usn, &da.RbLocalUsn, &da.CreatedAt, &da.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &da)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdAlbumByRbDataStatus retrieves a row from 'djmdAlbum' as a DjmdAlbum.
//
// Generated from index 'djmd_album_rb_data_status'.
// func (da *DjmdAlbum) djmdAlbum(db DB) (error)
// func DjmdAlbumByRbDataStatus(ctx context.Context, db DB, rbDataStatus sql.NullInt64) ([]*DjmdAlbum, error) {
// DjmdAlbumByRbDataStatus {
// func DjmdAlbumByRbDataStatus(db DB, rbDataStatus sql.NullInt64) ([]*DjmdAlbum, error) {
// true
// rbDataStatus
// DjmdAlbum
// DjmdAlbumByRbDataStatus
// false
// false
func (c *Client) DjmdAlbumByRbDataStatus(ctx context.Context, rbDataStatus sql.NullInt64) ([]*DjmdAlbum, error) {
	// func DjmdAlbumByRbDataStatus(ctx context.Context, db DB, rbDataStatus sql.NullInt64) ([]*DjmdAlbum, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, Name, AlbumArtistID, ImagePath, Compilation, SearchStr, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdAlbum ` +
		`WHERE rb_data_status = $1`
	// run
	logf(sqlstr, rbDataStatus)
	rows, err := db.QueryContext(ctx, sqlstr, rbDataStatus)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdAlbum
	for rows.Next() {
		da := DjmdAlbum{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&da.ID, &da.Name, &da.AlbumArtistID, &da.ImagePath, &da.Compilation, &da.SearchStr, &da.UUID, &da.RbDataStatus, &da.RbLocalDataStatus, &da.RbLocalDeleted, &da.RbLocalSynced, &da.Usn, &da.RbLocalUsn, &da.CreatedAt, &da.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &da)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdAlbumByRbLocalDataStatus retrieves a row from 'djmdAlbum' as a DjmdAlbum.
//
// Generated from index 'djmd_album_rb_local_data_status'.
// func (da *DjmdAlbum) djmdAlbum(db DB) (error)
// func DjmdAlbumByRbLocalDataStatus(ctx context.Context, db DB, rbLocalDataStatus sql.NullInt64) ([]*DjmdAlbum, error) {
// DjmdAlbumByRbLocalDataStatus {
// func DjmdAlbumByRbLocalDataStatus(db DB, rbLocalDataStatus sql.NullInt64) ([]*DjmdAlbum, error) {
// true
// rbLocalDataStatus
// DjmdAlbum
// DjmdAlbumByRbLocalDataStatus
// false
// false
func (c *Client) DjmdAlbumByRbLocalDataStatus(ctx context.Context, rbLocalDataStatus sql.NullInt64) ([]*DjmdAlbum, error) {
	// func DjmdAlbumByRbLocalDataStatus(ctx context.Context, db DB, rbLocalDataStatus sql.NullInt64) ([]*DjmdAlbum, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, Name, AlbumArtistID, ImagePath, Compilation, SearchStr, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdAlbum ` +
		`WHERE rb_local_data_status = $1`
	// run
	logf(sqlstr, rbLocalDataStatus)
	rows, err := db.QueryContext(ctx, sqlstr, rbLocalDataStatus)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdAlbum
	for rows.Next() {
		da := DjmdAlbum{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&da.ID, &da.Name, &da.AlbumArtistID, &da.ImagePath, &da.Compilation, &da.SearchStr, &da.UUID, &da.RbDataStatus, &da.RbLocalDataStatus, &da.RbLocalDeleted, &da.RbLocalSynced, &da.Usn, &da.RbLocalUsn, &da.CreatedAt, &da.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &da)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdAlbumByRbLocalDeleted retrieves a row from 'djmdAlbum' as a DjmdAlbum.
//
// Generated from index 'djmd_album_rb_local_deleted'.
// func (da *DjmdAlbum) djmdAlbum(db DB) (error)
// func DjmdAlbumByRbLocalDeleted(ctx context.Context, db DB, rbLocalDeleted sql.NullInt64) ([]*DjmdAlbum, error) {
// DjmdAlbumByRbLocalDeleted {
// func DjmdAlbumByRbLocalDeleted(db DB, rbLocalDeleted sql.NullInt64) ([]*DjmdAlbum, error) {
// true
// rbLocalDeleted
// DjmdAlbum
// DjmdAlbumByRbLocalDeleted
// false
// false
func (c *Client) DjmdAlbumByRbLocalDeleted(ctx context.Context, rbLocalDeleted sql.NullInt64) ([]*DjmdAlbum, error) {
	// func DjmdAlbumByRbLocalDeleted(ctx context.Context, db DB, rbLocalDeleted sql.NullInt64) ([]*DjmdAlbum, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, Name, AlbumArtistID, ImagePath, Compilation, SearchStr, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdAlbum ` +
		`WHERE rb_local_deleted = $1`
	// run
	logf(sqlstr, rbLocalDeleted)
	rows, err := db.QueryContext(ctx, sqlstr, rbLocalDeleted)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdAlbum
	for rows.Next() {
		da := DjmdAlbum{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&da.ID, &da.Name, &da.AlbumArtistID, &da.ImagePath, &da.Compilation, &da.SearchStr, &da.UUID, &da.RbDataStatus, &da.RbLocalDataStatus, &da.RbLocalDeleted, &da.RbLocalSynced, &da.Usn, &da.RbLocalUsn, &da.CreatedAt, &da.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &da)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdAlbumByRbLocalUsnID retrieves a row from 'djmdAlbum' as a DjmdAlbum.
//
// Generated from index 'djmd_album_rb_local_usn__i_d'.
// func (da *DjmdAlbum) djmdAlbum(db DB) (error)
// func DjmdAlbumByRbLocalUsnID(ctx context.Context, db DB, rbLocalUsn sql.NullInt64, id sql.NullString) ([]*DjmdAlbum, error) {
// DjmdAlbumByRbLocalUsnID {
// func DjmdAlbumByRbLocalUsnID(db DB, rbLocalUsn sql.NullInt64, id sql.NullString) ([]*DjmdAlbum, error) {
// true
// rbLocalUsn, id
// DjmdAlbum
// DjmdAlbumByRbLocalUsnID
// false
// false
func (c *Client) DjmdAlbumByRbLocalUsnID(ctx context.Context, rbLocalUsn sql.NullInt64, id sql.NullString) ([]*DjmdAlbum, error) {
	// func DjmdAlbumByRbLocalUsnID(ctx context.Context, db DB, rbLocalUsn sql.NullInt64, id sql.NullString) ([]*DjmdAlbum, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, Name, AlbumArtistID, ImagePath, Compilation, SearchStr, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdAlbum ` +
		`WHERE rb_local_usn = $1 AND ID = $2`
	// run
	logf(sqlstr, rbLocalUsn, id)
	rows, err := db.QueryContext(ctx, sqlstr, rbLocalUsn, id)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdAlbum
	for rows.Next() {
		da := DjmdAlbum{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&da.ID, &da.Name, &da.AlbumArtistID, &da.ImagePath, &da.Compilation, &da.SearchStr, &da.UUID, &da.RbDataStatus, &da.RbLocalDataStatus, &da.RbLocalDeleted, &da.RbLocalSynced, &da.Usn, &da.RbLocalUsn, &da.CreatedAt, &da.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &da)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdAlbumByID retrieves a row from 'djmdAlbum' as a DjmdAlbum.
//
// Generated from index 'sqlite_autoindex_djmdAlbum_1'.
// func (da *DjmdAlbum) djmdAlbum(db DB) (error)
// func DjmdAlbumByID(ctx context.Context, db DB, id sql.NullString) (*DjmdAlbum, error) {
// DjmdAlbumByID {
// func DjmdAlbumByID(db DB, id sql.NullString) (*DjmdAlbum, error) {
// true
// id
// DjmdAlbum
// DjmdAlbumByID
// true
// true
func (c *Client) DjmdAlbumByID(ctx context.Context, id sql.NullString) (*DjmdAlbum, error) {
	// func DjmdAlbumByID(ctx context.Context, db DB, id sql.NullString) (*DjmdAlbum, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, Name, AlbumArtistID, ImagePath, Compilation, SearchStr, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdAlbum ` +
		`WHERE ID = $1`
	// run
	logf(sqlstr, id)
	da := DjmdAlbum{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&da.ID, &da.Name, &da.AlbumArtistID, &da.ImagePath, &da.Compilation, &da.SearchStr, &da.UUID, &da.RbDataStatus, &da.RbLocalDataStatus, &da.RbLocalDeleted, &da.RbLocalSynced, &da.Usn, &da.RbLocalUsn, &da.CreatedAt, &da.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &da, nil
}
