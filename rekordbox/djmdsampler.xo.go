package rekordbox

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"

	nulltype "github.com/mattn/go-nulltype"
)

// DjmdSampler represents a row from 'djmdSampler'.
type DjmdSampler struct {
	ID                nulltype.NullString `json:"id"`                   // ID
	Seq               nulltype.NullInt64  `json:"seq"`                  // Seq
	Name              nulltype.NullString `json:"name"`                 // Name
	Attribute         nulltype.NullInt64  `json:"attribute"`            // Attribute
	ParentID          nulltype.NullString `json:"parent_id"`            // ParentID
	UUID              nulltype.NullString `json:"uuid"`                 // UUID
	RbDataStatus      nulltype.NullInt64  `json:"rb_data_status"`       // rb_data_status
	RbLocalDataStatus nulltype.NullInt64  `json:"rb_local_data_status"` // rb_local_data_status
	RbLocalDeleted    nulltype.NullInt64  `json:"rb_local_deleted"`     // rb_local_deleted
	RbLocalSynced     nulltype.NullInt64  `json:"rb_local_synced"`      // rb_local_synced
	Usn               nulltype.NullInt64  `json:"usn"`                  // usn
	RbLocalUsn        nulltype.NullInt64  `json:"rb_local_usn"`         // rb_local_usn
	CreatedAt         Time                `json:"created_at"`           // created_at
	UpdatedAt         Time                `json:"updated_at"`           // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the DjmdSampler exists in the database.
func (ds *DjmdSampler) Exists() bool {
	return ds._exists
}

// Deleted returns true when the DjmdSampler has been marked for deletion from
// the database.
func (ds *DjmdSampler) Deleted() bool {
	return ds._deleted
}

// Insert inserts the DjmdSampler to the database.
func (c *Client) InsertDjmdSampler(ctx context.Context, ds *DjmdSampler) error {
	db := c.db

	switch {
	case ds._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case ds._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO djmdSampler (` +
		`ID, Seq, Name, Attribute, ParentID, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14` +
		`)`
	// run
	logf(sqlstr, ds.ID, ds.Seq, ds.Name, ds.Attribute, ds.ParentID, ds.UUID, ds.RbDataStatus, ds.RbLocalDataStatus, ds.RbLocalDeleted, ds.RbLocalSynced, ds.Usn, ds.RbLocalUsn, ds.CreatedAt, ds.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, ds.ID, ds.Seq, ds.Name, ds.Attribute, ds.ParentID, ds.UUID, ds.RbDataStatus, ds.RbLocalDataStatus, ds.RbLocalDeleted, ds.RbLocalSynced, ds.Usn, ds.RbLocalUsn, ds.CreatedAt, ds.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	ds._exists = true
	return nil
}

// Update updates a DjmdSampler in the database.
func (c *Client) UpdateDjmdSampler(ctx context.Context, ds *DjmdSampler) error {
	db := c.db

	switch {
	case !ds._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case ds._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE djmdSampler SET ` +
		`Seq = $1, Name = $2, Attribute = $3, ParentID = $4, UUID = $5, rb_data_status = $6, rb_local_data_status = $7, rb_local_deleted = $8, rb_local_synced = $9, usn = $10, rb_local_usn = $11, created_at = $12, updated_at = $13 ` +
		`WHERE ID = $14`
	// run
	logf(sqlstr, ds.Seq, ds.Name, ds.Attribute, ds.ParentID, ds.UUID, ds.RbDataStatus, ds.RbLocalDataStatus, ds.RbLocalDeleted, ds.RbLocalSynced, ds.Usn, ds.RbLocalUsn, ds.CreatedAt, ds.UpdatedAt, ds.ID)
	if _, err := db.ExecContext(ctx, sqlstr, ds.Seq, ds.Name, ds.Attribute, ds.ParentID, ds.UUID, ds.RbDataStatus, ds.RbLocalDataStatus, ds.RbLocalDeleted, ds.RbLocalSynced, ds.Usn, ds.RbLocalUsn, ds.CreatedAt, ds.UpdatedAt, ds.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the DjmdSampler to the database.
func (c *Client) SaveDjmdSampler(ctx context.Context, ds *DjmdSampler) error {
	if ds.Exists() {
		return c.UpdateDjmdSampler(ctx, ds)
	}
	return c.InsertDjmdSampler(ctx, ds)
}

// Upsert performs an upsert for DjmdSampler.
func (c *Client) UpsertDjmdSampler(ctx context.Context, ds *DjmdSampler) error {
	db := c.db

	switch {
	case ds._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO djmdSampler (` +
		`ID, Seq, Name, Attribute, ParentID, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14` +
		`)` +
		` ON CONFLICT (ID) DO ` +
		`UPDATE SET ` +
		`Seq = EXCLUDED.Seq, Name = EXCLUDED.Name, Attribute = EXCLUDED.Attribute, ParentID = EXCLUDED.ParentID, UUID = EXCLUDED.UUID, rb_data_status = EXCLUDED.rb_data_status, rb_local_data_status = EXCLUDED.rb_local_data_status, rb_local_deleted = EXCLUDED.rb_local_deleted, rb_local_synced = EXCLUDED.rb_local_synced, usn = EXCLUDED.usn, rb_local_usn = EXCLUDED.rb_local_usn, created_at = EXCLUDED.created_at, updated_at = EXCLUDED.updated_at `
	// run
	logf(sqlstr, ds.ID, ds.Seq, ds.Name, ds.Attribute, ds.ParentID, ds.UUID, ds.RbDataStatus, ds.RbLocalDataStatus, ds.RbLocalDeleted, ds.RbLocalSynced, ds.Usn, ds.RbLocalUsn, ds.CreatedAt, ds.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, ds.ID, ds.Seq, ds.Name, ds.Attribute, ds.ParentID, ds.UUID, ds.RbDataStatus, ds.RbLocalDataStatus, ds.RbLocalDeleted, ds.RbLocalSynced, ds.Usn, ds.RbLocalUsn, ds.CreatedAt, ds.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	ds._exists = true
	return nil
}

// Delete deletes the DjmdSampler from the database.
func (c *Client) DeleteDjmdSampler(ctx context.Context, ds *DjmdSampler) error {
	db := c.db

	switch {
	case !ds._exists: // doesn't exist
		return nil
	case ds._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM djmdSampler ` +
		`WHERE ID = $1`
	// run
	logf(sqlstr, ds.ID)
	if _, err := db.ExecContext(ctx, sqlstr, ds.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	ds._deleted = true
	return nil
}

func scanDjmdSamplerRows(rows *sql.Rows) ([]*DjmdSampler, error) {
	var res []*DjmdSampler
	for rows.Next() {
		ds := DjmdSampler{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&ds.ID, &ds.Seq, &ds.Name, &ds.Attribute, &ds.ParentID, &ds.UUID, &ds.RbDataStatus, &ds.RbLocalDataStatus, &ds.RbLocalDeleted, &ds.RbLocalSynced, &ds.Usn, &ds.RbLocalUsn, &ds.CreatedAt, &ds.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &ds)
	}

	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

func (c *Client) AllDjmdSampler(ctx context.Context) ([]*DjmdSampler, error) {
	db := c.db

	const sqlstr = `SELECT * FROM DjmdSampler`
	rows, err := db.QueryContext(ctx, sqlstr)
	if err != nil {
		return nil, logerror(err)
	}

	defer rows.Close()
	res, err := scanDjmdSamplerRows(rows)
	if err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdSamplerByName retrieves a row from 'djmdSampler' as a DjmdSampler.
//
// Generated from index 'djmd_sampler__name'.
func (c *Client) DjmdSamplerByName(ctx context.Context, name nulltype.NullString) ([]*DjmdSampler, error) {
	// func DjmdSamplerByName(ctx context.Context, db DB, name nulltype.NullString) ([]*DjmdSampler, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, Seq, Name, Attribute, ParentID, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdSampler ` +
		`WHERE Name = $1`
	// run
	logf(sqlstr, name)
	rows, err := db.QueryContext(ctx, sqlstr, name)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdSampler
	for rows.Next() {
		ds := DjmdSampler{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&ds.ID, &ds.Seq, &ds.Name, &ds.Attribute, &ds.ParentID, &ds.UUID, &ds.RbDataStatus, &ds.RbLocalDataStatus, &ds.RbLocalDeleted, &ds.RbLocalSynced, &ds.Usn, &ds.RbLocalUsn, &ds.CreatedAt, &ds.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &ds)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdSamplerByParentID retrieves a row from 'djmdSampler' as a DjmdSampler.
//
// Generated from index 'djmd_sampler__parent_i_d'.
func (c *Client) DjmdSamplerByParentID(ctx context.Context, parentID nulltype.NullString) ([]*DjmdSampler, error) {
	// func DjmdSamplerByParentID(ctx context.Context, db DB, parentID nulltype.NullString) ([]*DjmdSampler, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, Seq, Name, Attribute, ParentID, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdSampler ` +
		`WHERE ParentID = $1`
	// run
	logf(sqlstr, parentID)
	rows, err := db.QueryContext(ctx, sqlstr, parentID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdSampler
	for rows.Next() {
		ds := DjmdSampler{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&ds.ID, &ds.Seq, &ds.Name, &ds.Attribute, &ds.ParentID, &ds.UUID, &ds.RbDataStatus, &ds.RbLocalDataStatus, &ds.RbLocalDeleted, &ds.RbLocalSynced, &ds.Usn, &ds.RbLocalUsn, &ds.CreatedAt, &ds.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &ds)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdSamplerBySeq retrieves a row from 'djmdSampler' as a DjmdSampler.
//
// Generated from index 'djmd_sampler__seq'.
func (c *Client) DjmdSamplerBySeq(ctx context.Context, seq nulltype.NullInt64) ([]*DjmdSampler, error) {
	// func DjmdSamplerBySeq(ctx context.Context, db DB, seq nulltype.NullInt64) ([]*DjmdSampler, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, Seq, Name, Attribute, ParentID, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdSampler ` +
		`WHERE Seq = $1`
	// run
	logf(sqlstr, seq)
	rows, err := db.QueryContext(ctx, sqlstr, seq)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdSampler
	for rows.Next() {
		ds := DjmdSampler{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&ds.ID, &ds.Seq, &ds.Name, &ds.Attribute, &ds.ParentID, &ds.UUID, &ds.RbDataStatus, &ds.RbLocalDataStatus, &ds.RbLocalDeleted, &ds.RbLocalSynced, &ds.Usn, &ds.RbLocalUsn, &ds.CreatedAt, &ds.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &ds)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdSamplerByUUID retrieves a row from 'djmdSampler' as a DjmdSampler.
//
// Generated from index 'djmd_sampler__u_u_i_d'.
func (c *Client) DjmdSamplerByUUID(ctx context.Context, uuid nulltype.NullString) ([]*DjmdSampler, error) {
	// func DjmdSamplerByUUID(ctx context.Context, db DB, uuid nulltype.NullString) ([]*DjmdSampler, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, Seq, Name, Attribute, ParentID, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdSampler ` +
		`WHERE UUID = $1`
	// run
	logf(sqlstr, uuid)
	rows, err := db.QueryContext(ctx, sqlstr, uuid)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdSampler
	for rows.Next() {
		ds := DjmdSampler{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&ds.ID, &ds.Seq, &ds.Name, &ds.Attribute, &ds.ParentID, &ds.UUID, &ds.RbDataStatus, &ds.RbLocalDataStatus, &ds.RbLocalDeleted, &ds.RbLocalSynced, &ds.Usn, &ds.RbLocalUsn, &ds.CreatedAt, &ds.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &ds)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdSamplerByRbDataStatus retrieves a row from 'djmdSampler' as a DjmdSampler.
//
// Generated from index 'djmd_sampler_rb_data_status'.
func (c *Client) DjmdSamplerByRbDataStatus(ctx context.Context, rbDataStatus nulltype.NullInt64) ([]*DjmdSampler, error) {
	// func DjmdSamplerByRbDataStatus(ctx context.Context, db DB, rbDataStatus nulltype.NullInt64) ([]*DjmdSampler, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, Seq, Name, Attribute, ParentID, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdSampler ` +
		`WHERE rb_data_status = $1`
	// run
	logf(sqlstr, rbDataStatus)
	rows, err := db.QueryContext(ctx, sqlstr, rbDataStatus)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdSampler
	for rows.Next() {
		ds := DjmdSampler{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&ds.ID, &ds.Seq, &ds.Name, &ds.Attribute, &ds.ParentID, &ds.UUID, &ds.RbDataStatus, &ds.RbLocalDataStatus, &ds.RbLocalDeleted, &ds.RbLocalSynced, &ds.Usn, &ds.RbLocalUsn, &ds.CreatedAt, &ds.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &ds)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdSamplerByRbLocalDataStatus retrieves a row from 'djmdSampler' as a DjmdSampler.
//
// Generated from index 'djmd_sampler_rb_local_data_status'.
func (c *Client) DjmdSamplerByRbLocalDataStatus(ctx context.Context, rbLocalDataStatus nulltype.NullInt64) ([]*DjmdSampler, error) {
	// func DjmdSamplerByRbLocalDataStatus(ctx context.Context, db DB, rbLocalDataStatus nulltype.NullInt64) ([]*DjmdSampler, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, Seq, Name, Attribute, ParentID, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdSampler ` +
		`WHERE rb_local_data_status = $1`
	// run
	logf(sqlstr, rbLocalDataStatus)
	rows, err := db.QueryContext(ctx, sqlstr, rbLocalDataStatus)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdSampler
	for rows.Next() {
		ds := DjmdSampler{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&ds.ID, &ds.Seq, &ds.Name, &ds.Attribute, &ds.ParentID, &ds.UUID, &ds.RbDataStatus, &ds.RbLocalDataStatus, &ds.RbLocalDeleted, &ds.RbLocalSynced, &ds.Usn, &ds.RbLocalUsn, &ds.CreatedAt, &ds.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &ds)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdSamplerByRbLocalDeleted retrieves a row from 'djmdSampler' as a DjmdSampler.
//
// Generated from index 'djmd_sampler_rb_local_deleted'.
func (c *Client) DjmdSamplerByRbLocalDeleted(ctx context.Context, rbLocalDeleted nulltype.NullInt64) ([]*DjmdSampler, error) {
	// func DjmdSamplerByRbLocalDeleted(ctx context.Context, db DB, rbLocalDeleted nulltype.NullInt64) ([]*DjmdSampler, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, Seq, Name, Attribute, ParentID, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdSampler ` +
		`WHERE rb_local_deleted = $1`
	// run
	logf(sqlstr, rbLocalDeleted)
	rows, err := db.QueryContext(ctx, sqlstr, rbLocalDeleted)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdSampler
	for rows.Next() {
		ds := DjmdSampler{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&ds.ID, &ds.Seq, &ds.Name, &ds.Attribute, &ds.ParentID, &ds.UUID, &ds.RbDataStatus, &ds.RbLocalDataStatus, &ds.RbLocalDeleted, &ds.RbLocalSynced, &ds.Usn, &ds.RbLocalUsn, &ds.CreatedAt, &ds.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &ds)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdSamplerByRbLocalUsnID retrieves a row from 'djmdSampler' as a DjmdSampler.
//
// Generated from index 'djmd_sampler_rb_local_usn__i_d'.
func (c *Client) DjmdSamplerByRbLocalUsnID(ctx context.Context, rbLocalUsn nulltype.NullInt64, id nulltype.NullString) ([]*DjmdSampler, error) {
	// func DjmdSamplerByRbLocalUsnID(ctx context.Context, db DB, rbLocalUsn nulltype.NullInt64, id nulltype.NullString) ([]*DjmdSampler, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, Seq, Name, Attribute, ParentID, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdSampler ` +
		`WHERE rb_local_usn = $1 AND ID = $2`
	// run
	logf(sqlstr, rbLocalUsn, id)
	rows, err := db.QueryContext(ctx, sqlstr, rbLocalUsn, id)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdSampler
	for rows.Next() {
		ds := DjmdSampler{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&ds.ID, &ds.Seq, &ds.Name, &ds.Attribute, &ds.ParentID, &ds.UUID, &ds.RbDataStatus, &ds.RbLocalDataStatus, &ds.RbLocalDeleted, &ds.RbLocalSynced, &ds.Usn, &ds.RbLocalUsn, &ds.CreatedAt, &ds.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &ds)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdSamplerByID retrieves a row from 'djmdSampler' as a DjmdSampler.
//
// Generated from index 'sqlite_autoindex_djmdSampler_1'.
func (c *Client) DjmdSamplerByID(ctx context.Context, id nulltype.NullString) (*DjmdSampler, error) {
	// func DjmdSamplerByID(ctx context.Context, db DB, id nulltype.NullString) (*DjmdSampler, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, Seq, Name, Attribute, ParentID, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdSampler ` +
		`WHERE ID = $1`
	// run
	logf(sqlstr, id)
	ds := DjmdSampler{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&ds.ID, &ds.Seq, &ds.Name, &ds.Attribute, &ds.ParentID, &ds.UUID, &ds.RbDataStatus, &ds.RbLocalDataStatus, &ds.RbLocalDeleted, &ds.RbLocalSynced, &ds.Usn, &ds.RbLocalUsn, &ds.CreatedAt, &ds.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &ds, nil
}
