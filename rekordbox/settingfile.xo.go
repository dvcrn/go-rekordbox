package rekordbox

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"

	nulltype "github.com/mattn/go-nulltype"
)

// SettingFile represents a row from 'settingFile'.
type SettingFile struct {
	ID                nulltype.NullString `json:"ID"`                   // ID
	Path              nulltype.NullString `json:"Path"`                 // Path
	Hash              nulltype.NullString `json:"Hash"`                 // Hash
	Size              nulltype.NullInt64  `json:"Size"`                 // Size
	RbLocalPath       nulltype.NullString `json:"rb_local_path"`        // rb_local_path
	RbInsyncHash      nulltype.NullString `json:"rb_insync_hash"`       // rb_insync_hash
	RbInsyncLocalUsn  nulltype.NullInt64  `json:"rb_insync_local_usn"`  // rb_insync_local_usn
	RbFileHashDirty   nulltype.NullInt64  `json:"rb_file_hash_dirty"`   // rb_file_hash_dirty
	RbFileSizeDirty   nulltype.NullInt64  `json:"rb_file_size_dirty"`   // rb_file_size_dirty
	UUID              nulltype.NullString `json:"UUID"`                 // UUID
	RbDataStatus      nulltype.NullInt64  `json:"rb_data_status"`       // rb_data_status
	RbLocalDataStatus nulltype.NullInt64  `json:"rb_local_data_status"` // rb_local_data_status
	RbLocalDeleted    nulltype.NullInt64  `json:"rb_local_deleted"`     // rb_local_deleted
	RbLocalSynced     nulltype.NullInt64  `json:"rb_local_synced"`      // rb_local_synced
	Usn               nulltype.NullInt64  `json:"usn"`                  // usn
	RbLocalUsn        nulltype.NullInt64  `json:"rb_local_usn"`         // rb_local_usn
	CreatedAt         Time                `json:"created_at"`           // created_at
	UpdatedAt         Time                `json:"updated_at"`           // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the SettingFile exists in the database.
func (sf *SettingFile) Exists() bool {
	return sf._exists
}

// Deleted returns true when the SettingFile has been marked for deletion from
// the database.
func (sf *SettingFile) Deleted() bool {
	return sf._deleted
}

// Insert inserts the SettingFile to the database.
func (c *Client) InsertSettingFile(ctx context.Context, sf *SettingFile) error {
	db := c.db

	switch {
	case sf._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case sf._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO settingFile (` +
		`ID, Path, Hash, Size, rb_local_path, rb_insync_hash, rb_insync_local_usn, rb_file_hash_dirty, rb_file_size_dirty, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18` +
		`)`
	// run
	logf(sqlstr, sf.ID, sf.Path, sf.Hash, sf.Size, sf.RbLocalPath, sf.RbInsyncHash, sf.RbInsyncLocalUsn, sf.RbFileHashDirty, sf.RbFileSizeDirty, sf.UUID, sf.RbDataStatus, sf.RbLocalDataStatus, sf.RbLocalDeleted, sf.RbLocalSynced, sf.Usn, sf.RbLocalUsn, sf.CreatedAt, sf.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, sf.ID, sf.Path, sf.Hash, sf.Size, sf.RbLocalPath, sf.RbInsyncHash, sf.RbInsyncLocalUsn, sf.RbFileHashDirty, sf.RbFileSizeDirty, sf.UUID, sf.RbDataStatus, sf.RbLocalDataStatus, sf.RbLocalDeleted, sf.RbLocalSynced, sf.Usn, sf.RbLocalUsn, sf.CreatedAt, sf.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	sf._exists = true
	return nil
}

// Update updates a SettingFile in the database.
func (c *Client) UpdateSettingFile(ctx context.Context, sf *SettingFile) error {
	db := c.db

	switch {
	case !sf._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case sf._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE settingFile SET ` +
		`Path = $1, Hash = $2, Size = $3, rb_local_path = $4, rb_insync_hash = $5, rb_insync_local_usn = $6, rb_file_hash_dirty = $7, rb_file_size_dirty = $8, UUID = $9, rb_data_status = $10, rb_local_data_status = $11, rb_local_deleted = $12, rb_local_synced = $13, usn = $14, rb_local_usn = $15, created_at = $16, updated_at = $17 ` +
		`WHERE ID = $18`
	// run
	logf(sqlstr, sf.Path, sf.Hash, sf.Size, sf.RbLocalPath, sf.RbInsyncHash, sf.RbInsyncLocalUsn, sf.RbFileHashDirty, sf.RbFileSizeDirty, sf.UUID, sf.RbDataStatus, sf.RbLocalDataStatus, sf.RbLocalDeleted, sf.RbLocalSynced, sf.Usn, sf.RbLocalUsn, sf.CreatedAt, sf.UpdatedAt, sf.ID)
	if _, err := db.ExecContext(ctx, sqlstr, sf.Path, sf.Hash, sf.Size, sf.RbLocalPath, sf.RbInsyncHash, sf.RbInsyncLocalUsn, sf.RbFileHashDirty, sf.RbFileSizeDirty, sf.UUID, sf.RbDataStatus, sf.RbLocalDataStatus, sf.RbLocalDeleted, sf.RbLocalSynced, sf.Usn, sf.RbLocalUsn, sf.CreatedAt, sf.UpdatedAt, sf.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the SettingFile to the database.
func (c *Client) SaveSettingFile(ctx context.Context, sf *SettingFile) error {
	if sf.Exists() {
		return c.UpdateSettingFile(ctx, sf)
	}
	return c.InsertSettingFile(ctx, sf)
}

// Upsert performs an upsert for SettingFile.
func (c *Client) UpsertSettingFile(ctx context.Context, sf *SettingFile) error {
	db := c.db

	switch {
	case sf._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO settingFile (` +
		`ID, Path, Hash, Size, rb_local_path, rb_insync_hash, rb_insync_local_usn, rb_file_hash_dirty, rb_file_size_dirty, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18` +
		`)` +
		` ON CONFLICT (ID) DO ` +
		`UPDATE SET ` +
		`Path = EXCLUDED.Path, Hash = EXCLUDED.Hash, Size = EXCLUDED.Size, rb_local_path = EXCLUDED.rb_local_path, rb_insync_hash = EXCLUDED.rb_insync_hash, rb_insync_local_usn = EXCLUDED.rb_insync_local_usn, rb_file_hash_dirty = EXCLUDED.rb_file_hash_dirty, rb_file_size_dirty = EXCLUDED.rb_file_size_dirty, UUID = EXCLUDED.UUID, rb_data_status = EXCLUDED.rb_data_status, rb_local_data_status = EXCLUDED.rb_local_data_status, rb_local_deleted = EXCLUDED.rb_local_deleted, rb_local_synced = EXCLUDED.rb_local_synced, usn = EXCLUDED.usn, rb_local_usn = EXCLUDED.rb_local_usn, created_at = EXCLUDED.created_at, updated_at = EXCLUDED.updated_at `
	// run
	logf(sqlstr, sf.ID, sf.Path, sf.Hash, sf.Size, sf.RbLocalPath, sf.RbInsyncHash, sf.RbInsyncLocalUsn, sf.RbFileHashDirty, sf.RbFileSizeDirty, sf.UUID, sf.RbDataStatus, sf.RbLocalDataStatus, sf.RbLocalDeleted, sf.RbLocalSynced, sf.Usn, sf.RbLocalUsn, sf.CreatedAt, sf.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, sf.ID, sf.Path, sf.Hash, sf.Size, sf.RbLocalPath, sf.RbInsyncHash, sf.RbInsyncLocalUsn, sf.RbFileHashDirty, sf.RbFileSizeDirty, sf.UUID, sf.RbDataStatus, sf.RbLocalDataStatus, sf.RbLocalDeleted, sf.RbLocalSynced, sf.Usn, sf.RbLocalUsn, sf.CreatedAt, sf.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	sf._exists = true
	return nil
}

// Delete deletes the SettingFile from the database.
func (c *Client) DeleteSettingFile(ctx context.Context, sf *SettingFile) error {
	db := c.db

	switch {
	case !sf._exists: // doesn't exist
		return nil
	case sf._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM settingFile ` +
		`WHERE ID = $1`
	// run
	logf(sqlstr, sf.ID)
	if _, err := db.ExecContext(ctx, sqlstr, sf.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	sf._deleted = true
	return nil
}

func scanSettingFileRows(rows *sql.Rows) ([]*SettingFile, error) {
	var res []*SettingFile
	for rows.Next() {
		sf := SettingFile{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&sf.ID, &sf.Path, &sf.Hash, &sf.Size, &sf.RbLocalPath, &sf.RbInsyncHash, &sf.RbInsyncLocalUsn, &sf.RbFileHashDirty, &sf.RbFileSizeDirty, &sf.UUID, &sf.RbDataStatus, &sf.RbLocalDataStatus, &sf.RbLocalDeleted, &sf.RbLocalSynced, &sf.Usn, &sf.RbLocalUsn, &sf.CreatedAt, &sf.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &sf)
	}

	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

func (c *Client) AllSettingFile(ctx context.Context) ([]*SettingFile, error) {
	db := c.db

	const sqlstr = `SELECT * FROM SettingFile`
	rows, err := db.QueryContext(ctx, sqlstr)
	if err != nil {
		return nil, logerror(err)
	}

	defer rows.Close()
	res, err := scanSettingFileRows(rows)
	if err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// SettingFileByUUID retrieves a row from 'settingFile' as a SettingFile.
//
// Generated from index 'setting_file__u_u_i_d'.
func (c *Client) SettingFileByUUID(ctx context.Context, uuid nulltype.NullString) ([]*SettingFile, error) {
	// func SettingFileByUUID(ctx context.Context, db DB, uuid nulltype.NullString) ([]*SettingFile, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, Path, Hash, Size, rb_local_path, rb_insync_hash, rb_insync_local_usn, rb_file_hash_dirty, rb_file_size_dirty, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM settingFile ` +
		`WHERE UUID = $1`
	// run
	logf(sqlstr, uuid)
	rows, err := db.QueryContext(ctx, sqlstr, uuid)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*SettingFile
	for rows.Next() {
		sf := SettingFile{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&sf.ID, &sf.Path, &sf.Hash, &sf.Size, &sf.RbLocalPath, &sf.RbInsyncHash, &sf.RbInsyncLocalUsn, &sf.RbFileHashDirty, &sf.RbFileSizeDirty, &sf.UUID, &sf.RbDataStatus, &sf.RbLocalDataStatus, &sf.RbLocalDeleted, &sf.RbLocalSynced, &sf.Usn, &sf.RbLocalUsn, &sf.CreatedAt, &sf.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &sf)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// SettingFileByRbDataStatus retrieves a row from 'settingFile' as a SettingFile.
//
// Generated from index 'setting_file_rb_data_status'.
func (c *Client) SettingFileByRbDataStatus(ctx context.Context, rbDataStatus nulltype.NullInt64) ([]*SettingFile, error) {
	// func SettingFileByRbDataStatus(ctx context.Context, db DB, rbDataStatus nulltype.NullInt64) ([]*SettingFile, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, Path, Hash, Size, rb_local_path, rb_insync_hash, rb_insync_local_usn, rb_file_hash_dirty, rb_file_size_dirty, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM settingFile ` +
		`WHERE rb_data_status = $1`
	// run
	logf(sqlstr, rbDataStatus)
	rows, err := db.QueryContext(ctx, sqlstr, rbDataStatus)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*SettingFile
	for rows.Next() {
		sf := SettingFile{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&sf.ID, &sf.Path, &sf.Hash, &sf.Size, &sf.RbLocalPath, &sf.RbInsyncHash, &sf.RbInsyncLocalUsn, &sf.RbFileHashDirty, &sf.RbFileSizeDirty, &sf.UUID, &sf.RbDataStatus, &sf.RbLocalDataStatus, &sf.RbLocalDeleted, &sf.RbLocalSynced, &sf.Usn, &sf.RbLocalUsn, &sf.CreatedAt, &sf.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &sf)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// SettingFileByRbFileHashDirty retrieves a row from 'settingFile' as a SettingFile.
//
// Generated from index 'setting_file_rb_file_hash_dirty'.
func (c *Client) SettingFileByRbFileHashDirty(ctx context.Context, rbFileHashDirty nulltype.NullInt64) ([]*SettingFile, error) {
	// func SettingFileByRbFileHashDirty(ctx context.Context, db DB, rbFileHashDirty nulltype.NullInt64) ([]*SettingFile, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, Path, Hash, Size, rb_local_path, rb_insync_hash, rb_insync_local_usn, rb_file_hash_dirty, rb_file_size_dirty, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM settingFile ` +
		`WHERE rb_file_hash_dirty = $1`
	// run
	logf(sqlstr, rbFileHashDirty)
	rows, err := db.QueryContext(ctx, sqlstr, rbFileHashDirty)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*SettingFile
	for rows.Next() {
		sf := SettingFile{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&sf.ID, &sf.Path, &sf.Hash, &sf.Size, &sf.RbLocalPath, &sf.RbInsyncHash, &sf.RbInsyncLocalUsn, &sf.RbFileHashDirty, &sf.RbFileSizeDirty, &sf.UUID, &sf.RbDataStatus, &sf.RbLocalDataStatus, &sf.RbLocalDeleted, &sf.RbLocalSynced, &sf.Usn, &sf.RbLocalUsn, &sf.CreatedAt, &sf.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &sf)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// SettingFileByRbFileSizeDirty retrieves a row from 'settingFile' as a SettingFile.
//
// Generated from index 'setting_file_rb_file_size_dirty'.
func (c *Client) SettingFileByRbFileSizeDirty(ctx context.Context, rbFileSizeDirty nulltype.NullInt64) ([]*SettingFile, error) {
	// func SettingFileByRbFileSizeDirty(ctx context.Context, db DB, rbFileSizeDirty nulltype.NullInt64) ([]*SettingFile, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, Path, Hash, Size, rb_local_path, rb_insync_hash, rb_insync_local_usn, rb_file_hash_dirty, rb_file_size_dirty, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM settingFile ` +
		`WHERE rb_file_size_dirty = $1`
	// run
	logf(sqlstr, rbFileSizeDirty)
	rows, err := db.QueryContext(ctx, sqlstr, rbFileSizeDirty)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*SettingFile
	for rows.Next() {
		sf := SettingFile{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&sf.ID, &sf.Path, &sf.Hash, &sf.Size, &sf.RbLocalPath, &sf.RbInsyncHash, &sf.RbInsyncLocalUsn, &sf.RbFileHashDirty, &sf.RbFileSizeDirty, &sf.UUID, &sf.RbDataStatus, &sf.RbLocalDataStatus, &sf.RbLocalDeleted, &sf.RbLocalSynced, &sf.Usn, &sf.RbLocalUsn, &sf.CreatedAt, &sf.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &sf)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// SettingFileByRbLocalDataStatus retrieves a row from 'settingFile' as a SettingFile.
//
// Generated from index 'setting_file_rb_local_data_status'.
func (c *Client) SettingFileByRbLocalDataStatus(ctx context.Context, rbLocalDataStatus nulltype.NullInt64) ([]*SettingFile, error) {
	// func SettingFileByRbLocalDataStatus(ctx context.Context, db DB, rbLocalDataStatus nulltype.NullInt64) ([]*SettingFile, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, Path, Hash, Size, rb_local_path, rb_insync_hash, rb_insync_local_usn, rb_file_hash_dirty, rb_file_size_dirty, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM settingFile ` +
		`WHERE rb_local_data_status = $1`
	// run
	logf(sqlstr, rbLocalDataStatus)
	rows, err := db.QueryContext(ctx, sqlstr, rbLocalDataStatus)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*SettingFile
	for rows.Next() {
		sf := SettingFile{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&sf.ID, &sf.Path, &sf.Hash, &sf.Size, &sf.RbLocalPath, &sf.RbInsyncHash, &sf.RbInsyncLocalUsn, &sf.RbFileHashDirty, &sf.RbFileSizeDirty, &sf.UUID, &sf.RbDataStatus, &sf.RbLocalDataStatus, &sf.RbLocalDeleted, &sf.RbLocalSynced, &sf.Usn, &sf.RbLocalUsn, &sf.CreatedAt, &sf.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &sf)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// SettingFileByRbLocalDeleted retrieves a row from 'settingFile' as a SettingFile.
//
// Generated from index 'setting_file_rb_local_deleted'.
func (c *Client) SettingFileByRbLocalDeleted(ctx context.Context, rbLocalDeleted nulltype.NullInt64) ([]*SettingFile, error) {
	// func SettingFileByRbLocalDeleted(ctx context.Context, db DB, rbLocalDeleted nulltype.NullInt64) ([]*SettingFile, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, Path, Hash, Size, rb_local_path, rb_insync_hash, rb_insync_local_usn, rb_file_hash_dirty, rb_file_size_dirty, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM settingFile ` +
		`WHERE rb_local_deleted = $1`
	// run
	logf(sqlstr, rbLocalDeleted)
	rows, err := db.QueryContext(ctx, sqlstr, rbLocalDeleted)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*SettingFile
	for rows.Next() {
		sf := SettingFile{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&sf.ID, &sf.Path, &sf.Hash, &sf.Size, &sf.RbLocalPath, &sf.RbInsyncHash, &sf.RbInsyncLocalUsn, &sf.RbFileHashDirty, &sf.RbFileSizeDirty, &sf.UUID, &sf.RbDataStatus, &sf.RbLocalDataStatus, &sf.RbLocalDeleted, &sf.RbLocalSynced, &sf.Usn, &sf.RbLocalUsn, &sf.CreatedAt, &sf.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &sf)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// SettingFileByRbLocalUsnID retrieves a row from 'settingFile' as a SettingFile.
//
// Generated from index 'setting_file_rb_local_usn__i_d'.
func (c *Client) SettingFileByRbLocalUsnID(ctx context.Context, rbLocalUsn nulltype.NullInt64, id nulltype.NullString) ([]*SettingFile, error) {
	// func SettingFileByRbLocalUsnID(ctx context.Context, db DB, rbLocalUsn nulltype.NullInt64, id nulltype.NullString) ([]*SettingFile, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, Path, Hash, Size, rb_local_path, rb_insync_hash, rb_insync_local_usn, rb_file_hash_dirty, rb_file_size_dirty, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM settingFile ` +
		`WHERE rb_local_usn = $1 AND ID = $2`
	// run
	logf(sqlstr, rbLocalUsn, id)
	rows, err := db.QueryContext(ctx, sqlstr, rbLocalUsn, id)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*SettingFile
	for rows.Next() {
		sf := SettingFile{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&sf.ID, &sf.Path, &sf.Hash, &sf.Size, &sf.RbLocalPath, &sf.RbInsyncHash, &sf.RbInsyncLocalUsn, &sf.RbFileHashDirty, &sf.RbFileSizeDirty, &sf.UUID, &sf.RbDataStatus, &sf.RbLocalDataStatus, &sf.RbLocalDeleted, &sf.RbLocalSynced, &sf.Usn, &sf.RbLocalUsn, &sf.CreatedAt, &sf.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &sf)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// SettingFileByID retrieves a row from 'settingFile' as a SettingFile.
//
// Generated from index 'sqlite_autoindex_settingFile_1'.
func (c *Client) SettingFileByID(ctx context.Context, id nulltype.NullString) (*SettingFile, error) {
	// func SettingFileByID(ctx context.Context, db DB, id nulltype.NullString) (*SettingFile, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, Path, Hash, Size, rb_local_path, rb_insync_hash, rb_insync_local_usn, rb_file_hash_dirty, rb_file_size_dirty, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM settingFile ` +
		`WHERE ID = $1`
	// run
	logf(sqlstr, id)
	sf := SettingFile{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&sf.ID, &sf.Path, &sf.Hash, &sf.Size, &sf.RbLocalPath, &sf.RbInsyncHash, &sf.RbInsyncLocalUsn, &sf.RbFileHashDirty, &sf.RbFileSizeDirty, &sf.UUID, &sf.RbDataStatus, &sf.RbLocalDataStatus, &sf.RbLocalDeleted, &sf.RbLocalSynced, &sf.Usn, &sf.RbLocalUsn, &sf.CreatedAt, &sf.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &sf, nil
}
