package rekordbox

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// DjmdDevice represents a row from 'djmdDevice'.
type DjmdDevice struct {
	ID                sql.NullString `json:"ID"`                   // ID
	MasterDBID        sql.NullString `json:"MasterDBID"`           // MasterDBID
	Name              sql.NullString `json:"Name"`                 // Name
	UUID              sql.NullString `json:"UUID"`                 // UUID
	RbDataStatus      sql.NullInt64  `json:"rb_data_status"`       // rb_data_status
	RbLocalDataStatus sql.NullInt64  `json:"rb_local_data_status"` // rb_local_data_status
	RbLocalDeleted    sql.NullInt64  `json:"rb_local_deleted"`     // rb_local_deleted
	RbLocalSynced     sql.NullInt64  `json:"rb_local_synced"`      // rb_local_synced
	Usn               sql.NullInt64  `json:"usn"`                  // usn
	RbLocalUsn        sql.NullInt64  `json:"rb_local_usn"`         // rb_local_usn
	CreatedAt         Time           `json:"created_at"`           // created_at
	UpdatedAt         Time           `json:"updated_at"`           // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the DjmdDevice exists in the database.
func (dd *DjmdDevice) Exists() bool {
	return dd._exists
}

// Deleted returns true when the DjmdDevice has been marked for deletion from
// the database.
func (dd *DjmdDevice) Deleted() bool {
	return dd._deleted
}

// Insert inserts the DjmdDevice to the database.
func (c *Client) InsertDjmdDevice(ctx context.Context, dd *DjmdDevice) error {
	db := c.db

	switch {
	case dd._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case dd._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO djmdDevice (` +
		`ID, MasterDBID, Name, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12` +
		`)`
	// run
	logf(sqlstr, dd.ID, dd.MasterDBID, dd.Name, dd.UUID, dd.RbDataStatus, dd.RbLocalDataStatus, dd.RbLocalDeleted, dd.RbLocalSynced, dd.Usn, dd.RbLocalUsn, dd.CreatedAt, dd.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, dd.ID, dd.MasterDBID, dd.Name, dd.UUID, dd.RbDataStatus, dd.RbLocalDataStatus, dd.RbLocalDeleted, dd.RbLocalSynced, dd.Usn, dd.RbLocalUsn, dd.CreatedAt, dd.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	dd._exists = true
	return nil
}

// Update updates a DjmdDevice in the database.
func (c *Client) UpdateDjmdDevice(ctx context.Context, dd *DjmdDevice) error {
	db := c.db

	switch {
	case !dd._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case dd._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE djmdDevice SET ` +
		`MasterDBID = $1, Name = $2, UUID = $3, rb_data_status = $4, rb_local_data_status = $5, rb_local_deleted = $6, rb_local_synced = $7, usn = $8, rb_local_usn = $9, created_at = $10, updated_at = $11 ` +
		`WHERE ID = $12`
	// run
	logf(sqlstr, dd.MasterDBID, dd.Name, dd.UUID, dd.RbDataStatus, dd.RbLocalDataStatus, dd.RbLocalDeleted, dd.RbLocalSynced, dd.Usn, dd.RbLocalUsn, dd.CreatedAt, dd.UpdatedAt, dd.ID)
	if _, err := db.ExecContext(ctx, sqlstr, dd.MasterDBID, dd.Name, dd.UUID, dd.RbDataStatus, dd.RbLocalDataStatus, dd.RbLocalDeleted, dd.RbLocalSynced, dd.Usn, dd.RbLocalUsn, dd.CreatedAt, dd.UpdatedAt, dd.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the DjmdDevice to the database.
func (c *Client) SaveDjmdDevice(ctx context.Context, dd *DjmdDevice) error {
	if dd.Exists() {
		return c.UpdateDjmdDevice(ctx, dd)
	}
	return c.InsertDjmdDevice(ctx, dd)
}

// Upsert performs an upsert for DjmdDevice.
func (c *Client) UpsertDjmdDevice(ctx context.Context, dd *DjmdDevice) error {
	db := c.db

	switch {
	case dd._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO djmdDevice (` +
		`ID, MasterDBID, Name, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12` +
		`)` +
		` ON CONFLICT (ID) DO ` +
		`UPDATE SET ` +
		`MasterDBID = EXCLUDED.MasterDBID, Name = EXCLUDED.Name, UUID = EXCLUDED.UUID, rb_data_status = EXCLUDED.rb_data_status, rb_local_data_status = EXCLUDED.rb_local_data_status, rb_local_deleted = EXCLUDED.rb_local_deleted, rb_local_synced = EXCLUDED.rb_local_synced, usn = EXCLUDED.usn, rb_local_usn = EXCLUDED.rb_local_usn, created_at = EXCLUDED.created_at, updated_at = EXCLUDED.updated_at `
	// run
	logf(sqlstr, dd.ID, dd.MasterDBID, dd.Name, dd.UUID, dd.RbDataStatus, dd.RbLocalDataStatus, dd.RbLocalDeleted, dd.RbLocalSynced, dd.Usn, dd.RbLocalUsn, dd.CreatedAt, dd.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, dd.ID, dd.MasterDBID, dd.Name, dd.UUID, dd.RbDataStatus, dd.RbLocalDataStatus, dd.RbLocalDeleted, dd.RbLocalSynced, dd.Usn, dd.RbLocalUsn, dd.CreatedAt, dd.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	dd._exists = true
	return nil
}

// Delete deletes the DjmdDevice from the database.
func (c *Client) DeleteDjmdDevice(ctx context.Context, dd *DjmdDevice) error {
	db := c.db

	switch {
	case !dd._exists: // doesn't exist
		return nil
	case dd._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM djmdDevice ` +
		`WHERE ID = $1`
	// run
	logf(sqlstr, dd.ID)
	if _, err := db.ExecContext(ctx, sqlstr, dd.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	dd._deleted = true
	return nil
}

func scanDjmdDeviceRows(rows *sql.Rows) ([]*DjmdDevice, error) {
	var res []*DjmdDevice
	for rows.Next() {
		dd := DjmdDevice{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dd.ID, &dd.MasterDBID, &dd.Name, &dd.UUID, &dd.RbDataStatus, &dd.RbLocalDataStatus, &dd.RbLocalDeleted, &dd.RbLocalSynced, &dd.Usn, &dd.RbLocalUsn, &dd.CreatedAt, &dd.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dd)
	}

	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

func (c *Client) AllDjmdDevice(ctx context.Context) ([]*DjmdDevice, error) {
	db := c.db

	const sqlstr = `SELECT * FROM DjmdDevice`
	rows, err := db.QueryContext(ctx, sqlstr)
	if err != nil {
		return nil, logerror(err)
	}

	defer rows.Close()
	res, err := scanDjmdDeviceRows(rows)
	if err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdDeviceByUUID retrieves a row from 'djmdDevice' as a DjmdDevice.
//
// Generated from index 'djmd_device__u_u_i_d'.
func (c *Client) DjmdDeviceByUUID(ctx context.Context, uuid sql.NullString) ([]*DjmdDevice, error) {
	// func DjmdDeviceByUUID(ctx context.Context, db DB, uuid sql.NullString) ([]*DjmdDevice, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, MasterDBID, Name, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdDevice ` +
		`WHERE UUID = $1`
	// run
	logf(sqlstr, uuid)
	rows, err := db.QueryContext(ctx, sqlstr, uuid)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdDevice
	for rows.Next() {
		dd := DjmdDevice{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dd.ID, &dd.MasterDBID, &dd.Name, &dd.UUID, &dd.RbDataStatus, &dd.RbLocalDataStatus, &dd.RbLocalDeleted, &dd.RbLocalSynced, &dd.Usn, &dd.RbLocalUsn, &dd.CreatedAt, &dd.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dd)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdDeviceByRbDataStatus retrieves a row from 'djmdDevice' as a DjmdDevice.
//
// Generated from index 'djmd_device_rb_data_status'.
func (c *Client) DjmdDeviceByRbDataStatus(ctx context.Context, rbDataStatus sql.NullInt64) ([]*DjmdDevice, error) {
	// func DjmdDeviceByRbDataStatus(ctx context.Context, db DB, rbDataStatus sql.NullInt64) ([]*DjmdDevice, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, MasterDBID, Name, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdDevice ` +
		`WHERE rb_data_status = $1`
	// run
	logf(sqlstr, rbDataStatus)
	rows, err := db.QueryContext(ctx, sqlstr, rbDataStatus)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdDevice
	for rows.Next() {
		dd := DjmdDevice{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dd.ID, &dd.MasterDBID, &dd.Name, &dd.UUID, &dd.RbDataStatus, &dd.RbLocalDataStatus, &dd.RbLocalDeleted, &dd.RbLocalSynced, &dd.Usn, &dd.RbLocalUsn, &dd.CreatedAt, &dd.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dd)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdDeviceByRbLocalDataStatus retrieves a row from 'djmdDevice' as a DjmdDevice.
//
// Generated from index 'djmd_device_rb_local_data_status'.
func (c *Client) DjmdDeviceByRbLocalDataStatus(ctx context.Context, rbLocalDataStatus sql.NullInt64) ([]*DjmdDevice, error) {
	// func DjmdDeviceByRbLocalDataStatus(ctx context.Context, db DB, rbLocalDataStatus sql.NullInt64) ([]*DjmdDevice, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, MasterDBID, Name, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdDevice ` +
		`WHERE rb_local_data_status = $1`
	// run
	logf(sqlstr, rbLocalDataStatus)
	rows, err := db.QueryContext(ctx, sqlstr, rbLocalDataStatus)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdDevice
	for rows.Next() {
		dd := DjmdDevice{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dd.ID, &dd.MasterDBID, &dd.Name, &dd.UUID, &dd.RbDataStatus, &dd.RbLocalDataStatus, &dd.RbLocalDeleted, &dd.RbLocalSynced, &dd.Usn, &dd.RbLocalUsn, &dd.CreatedAt, &dd.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dd)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdDeviceByRbLocalDeleted retrieves a row from 'djmdDevice' as a DjmdDevice.
//
// Generated from index 'djmd_device_rb_local_deleted'.
func (c *Client) DjmdDeviceByRbLocalDeleted(ctx context.Context, rbLocalDeleted sql.NullInt64) ([]*DjmdDevice, error) {
	// func DjmdDeviceByRbLocalDeleted(ctx context.Context, db DB, rbLocalDeleted sql.NullInt64) ([]*DjmdDevice, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, MasterDBID, Name, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdDevice ` +
		`WHERE rb_local_deleted = $1`
	// run
	logf(sqlstr, rbLocalDeleted)
	rows, err := db.QueryContext(ctx, sqlstr, rbLocalDeleted)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdDevice
	for rows.Next() {
		dd := DjmdDevice{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dd.ID, &dd.MasterDBID, &dd.Name, &dd.UUID, &dd.RbDataStatus, &dd.RbLocalDataStatus, &dd.RbLocalDeleted, &dd.RbLocalSynced, &dd.Usn, &dd.RbLocalUsn, &dd.CreatedAt, &dd.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dd)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdDeviceByRbLocalUsnID retrieves a row from 'djmdDevice' as a DjmdDevice.
//
// Generated from index 'djmd_device_rb_local_usn__i_d'.
func (c *Client) DjmdDeviceByRbLocalUsnID(ctx context.Context, rbLocalUsn sql.NullInt64, id sql.NullString) ([]*DjmdDevice, error) {
	// func DjmdDeviceByRbLocalUsnID(ctx context.Context, db DB, rbLocalUsn sql.NullInt64, id sql.NullString) ([]*DjmdDevice, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, MasterDBID, Name, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdDevice ` +
		`WHERE rb_local_usn = $1 AND ID = $2`
	// run
	logf(sqlstr, rbLocalUsn, id)
	rows, err := db.QueryContext(ctx, sqlstr, rbLocalUsn, id)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdDevice
	for rows.Next() {
		dd := DjmdDevice{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dd.ID, &dd.MasterDBID, &dd.Name, &dd.UUID, &dd.RbDataStatus, &dd.RbLocalDataStatus, &dd.RbLocalDeleted, &dd.RbLocalSynced, &dd.Usn, &dd.RbLocalUsn, &dd.CreatedAt, &dd.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dd)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdDeviceByID retrieves a row from 'djmdDevice' as a DjmdDevice.
//
// Generated from index 'sqlite_autoindex_djmdDevice_1'.
func (c *Client) DjmdDeviceByID(ctx context.Context, id sql.NullString) (*DjmdDevice, error) {
	// func DjmdDeviceByID(ctx context.Context, db DB, id sql.NullString) (*DjmdDevice, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, MasterDBID, Name, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdDevice ` +
		`WHERE ID = $1`
	// run
	logf(sqlstr, id)
	dd := DjmdDevice{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&dd.ID, &dd.MasterDBID, &dd.Name, &dd.UUID, &dd.RbDataStatus, &dd.RbLocalDataStatus, &dd.RbLocalDeleted, &dd.RbLocalSynced, &dd.Usn, &dd.RbLocalUsn, &dd.CreatedAt, &dd.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &dd, nil
}
