package rekordbox

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// DjmdProperty represents a row from 'djmdProperty'.
type DjmdProperty struct {
	DBID           sql.NullString `json:"DBID"`           // DBID
	DBVersion      sql.NullString `json:"DBVersion"`      // DBVersion
	BaseDBDrive    sql.NullString `json:"BaseDBDrive"`    // BaseDBDrive
	CurrentDBDrive sql.NullString `json:"CurrentDBDrive"` // CurrentDBDrive
	DeviceID       sql.NullString `json:"DeviceID"`       // DeviceID
	Reserved1      sql.NullString `json:"Reserved1"`      // Reserved1
	Reserved2      sql.NullString `json:"Reserved2"`      // Reserved2
	Reserved3      sql.NullString `json:"Reserved3"`      // Reserved3
	Reserved4      sql.NullString `json:"Reserved4"`      // Reserved4
	Reserved5      sql.NullString `json:"Reserved5"`      // Reserved5
	CreatedAt      Time           `json:"created_at"`     // created_at
	UpdatedAt      Time           `json:"updated_at"`     // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the DjmdProperty exists in the database.
func (dp *DjmdProperty) Exists() bool {
	return dp._exists
}

// Deleted returns true when the DjmdProperty has been marked for deletion from
// the database.
func (dp *DjmdProperty) Deleted() bool {
	return dp._deleted
}

// Insert inserts the DjmdProperty to the database.
func (c *Client) InsertDjmdProperty(ctx context.Context, dp *DjmdProperty) error {
	db := c.db

	switch {
	case dp._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case dp._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO djmdProperty (` +
		`DBID, DBVersion, BaseDBDrive, CurrentDBDrive, DeviceID, Reserved1, Reserved2, Reserved3, Reserved4, Reserved5, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12` +
		`)`
	// run
	logf(sqlstr, dp.DBID, dp.DBVersion, dp.BaseDBDrive, dp.CurrentDBDrive, dp.DeviceID, dp.Reserved1, dp.Reserved2, dp.Reserved3, dp.Reserved4, dp.Reserved5, dp.CreatedAt, dp.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, dp.DBID, dp.DBVersion, dp.BaseDBDrive, dp.CurrentDBDrive, dp.DeviceID, dp.Reserved1, dp.Reserved2, dp.Reserved3, dp.Reserved4, dp.Reserved5, dp.CreatedAt, dp.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	dp._exists = true
	return nil
}

// Update updates a DjmdProperty in the database.
func (c *Client) UpdateDjmdProperty(ctx context.Context, dp *DjmdProperty) error {
	db := c.db

	switch {
	case !dp._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case dp._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE djmdProperty SET ` +
		`DBVersion = $1, BaseDBDrive = $2, CurrentDBDrive = $3, DeviceID = $4, Reserved1 = $5, Reserved2 = $6, Reserved3 = $7, Reserved4 = $8, Reserved5 = $9, created_at = $10, updated_at = $11 ` +
		`WHERE DBID = $12`
	// run
	logf(sqlstr, dp.DBVersion, dp.BaseDBDrive, dp.CurrentDBDrive, dp.DeviceID, dp.Reserved1, dp.Reserved2, dp.Reserved3, dp.Reserved4, dp.Reserved5, dp.CreatedAt, dp.UpdatedAt, dp.DBID)
	if _, err := db.ExecContext(ctx, sqlstr, dp.DBVersion, dp.BaseDBDrive, dp.CurrentDBDrive, dp.DeviceID, dp.Reserved1, dp.Reserved2, dp.Reserved3, dp.Reserved4, dp.Reserved5, dp.CreatedAt, dp.UpdatedAt, dp.DBID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the DjmdProperty to the database.
func (c *Client) SaveDjmdProperty(ctx context.Context, dp *DjmdProperty) error {
	if dp.Exists() {
		return c.UpdateDjmdProperty(ctx, dp)
	}
	return c.InsertDjmdProperty(ctx, dp)
}

// Upsert performs an upsert for DjmdProperty.
func (c *Client) UpsertDjmdProperty(ctx context.Context, dp *DjmdProperty) error {
	db := c.db

	switch {
	case dp._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO djmdProperty (` +
		`DBID, DBVersion, BaseDBDrive, CurrentDBDrive, DeviceID, Reserved1, Reserved2, Reserved3, Reserved4, Reserved5, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12` +
		`)` +
		` ON CONFLICT (DBID) DO ` +
		`UPDATE SET ` +
		`DBVersion = EXCLUDED.DBVersion, BaseDBDrive = EXCLUDED.BaseDBDrive, CurrentDBDrive = EXCLUDED.CurrentDBDrive, DeviceID = EXCLUDED.DeviceID, Reserved1 = EXCLUDED.Reserved1, Reserved2 = EXCLUDED.Reserved2, Reserved3 = EXCLUDED.Reserved3, Reserved4 = EXCLUDED.Reserved4, Reserved5 = EXCLUDED.Reserved5, created_at = EXCLUDED.created_at, updated_at = EXCLUDED.updated_at `
	// run
	logf(sqlstr, dp.DBID, dp.DBVersion, dp.BaseDBDrive, dp.CurrentDBDrive, dp.DeviceID, dp.Reserved1, dp.Reserved2, dp.Reserved3, dp.Reserved4, dp.Reserved5, dp.CreatedAt, dp.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, dp.DBID, dp.DBVersion, dp.BaseDBDrive, dp.CurrentDBDrive, dp.DeviceID, dp.Reserved1, dp.Reserved2, dp.Reserved3, dp.Reserved4, dp.Reserved5, dp.CreatedAt, dp.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	dp._exists = true
	return nil
}

// Delete deletes the DjmdProperty from the database.
func (c *Client) DeleteDjmdProperty(ctx context.Context, dp *DjmdProperty) error {
	db := c.db

	switch {
	case !dp._exists: // doesn't exist
		return nil
	case dp._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM djmdProperty ` +
		`WHERE DBID = $1`
	// run
	logf(sqlstr, dp.DBID)
	if _, err := db.ExecContext(ctx, sqlstr, dp.DBID); err != nil {
		return logerror(err)
	}
	// set deleted
	dp._deleted = true
	return nil
}

func scanDjmdPropertyRows(rows *sql.Rows) ([]*DjmdProperty, error) {
	var res []*DjmdProperty
	for rows.Next() {
		dp := DjmdProperty{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dp.DBID, &dp.DBVersion, &dp.BaseDBDrive, &dp.CurrentDBDrive, &dp.DeviceID, &dp.Reserved1, &dp.Reserved2, &dp.Reserved3, &dp.Reserved4, &dp.Reserved5, &dp.CreatedAt, &dp.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dp)
	}

	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

func (c *Client) AllDjmdProperty(ctx context.Context) ([]*DjmdProperty, error) {
	db := c.db

	const sqlstr = `SELECT * FROM DjmdProperty`
	rows, err := db.QueryContext(ctx, sqlstr)
	if err != nil {
		return nil, logerror(err)
	}

	defer rows.Close()
	res, err := scanDjmdPropertyRows(rows)
	if err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdPropertyByDBID retrieves a row from 'djmdProperty' as a DjmdProperty.
//
// Generated from index 'sqlite_autoindex_djmdProperty_1'.
func (c *Client) DjmdPropertyByDBID(ctx context.Context, dBID sql.NullString) (*DjmdProperty, error) {
	// func DjmdPropertyByDBID(ctx context.Context, db DB, dBID sql.NullString) (*DjmdProperty, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`DBID, DBVersion, BaseDBDrive, CurrentDBDrive, DeviceID, Reserved1, Reserved2, Reserved3, Reserved4, Reserved5, created_at, updated_at ` +
		`FROM djmdProperty ` +
		`WHERE DBID = $1`
	// run
	logf(sqlstr, dBID)
	dp := DjmdProperty{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, dBID).Scan(&dp.DBID, &dp.DBVersion, &dp.BaseDBDrive, &dp.CurrentDBDrive, &dp.DeviceID, &dp.Reserved1, &dp.Reserved2, &dp.Reserved3, &dp.Reserved4, &dp.Reserved5, &dp.CreatedAt, &dp.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &dp, nil
}
