package rekordbox

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// DjmdSongSampler represents a row from 'djmdSongSampler'.
type DjmdSongSampler struct {
	ID                sql.NullString `json:"id"`                   // ID
	SamplerID         sql.NullString `json:"sampler_id"`           // SamplerID
	ContentID         sql.NullString `json:"content_id"`           // ContentID
	TrackNo           sql.NullInt64  `json:"track_no"`             // TrackNo
	UUID              sql.NullString `json:"uuid"`                 // UUID
	RbDataStatus      sql.NullInt64  `json:"rb_data_status"`       // rb_data_status
	RbLocalDataStatus sql.NullInt64  `json:"rb_local_data_status"` // rb_local_data_status
	RbLocalDeleted    sql.NullInt64  `json:"rb_local_deleted"`     // rb_local_deleted
	RbLocalSynced     sql.NullInt64  `json:"rb_local_synced"`      // rb_local_synced
	Usn               sql.NullInt64  `json:"usn"`                  // usn
	RbLocalUsn        sql.NullInt64  `json:"rb_local_usn"`         // rb_local_usn
	CreatedAt         Time           `json:"created_at"`           // created_at
	UpdatedAt         Time           `json:"updated_at"`           // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the DjmdSongSampler exists in the database.
func (dss *DjmdSongSampler) Exists() bool {
	return dss._exists
}

// Deleted returns true when the DjmdSongSampler has been marked for deletion from
// the database.
func (dss *DjmdSongSampler) Deleted() bool {
	return dss._deleted
}

// Insert inserts the DjmdSongSampler to the database.
func (c *Client) InsertDjmdSongSampler(ctx context.Context, dss *DjmdSongSampler) error {
	db := c.db

	switch {
	case dss._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case dss._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO djmdSongSampler (` +
		`ID, SamplerID, ContentID, TrackNo, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13` +
		`)`
	// run
	logf(sqlstr, dss.ID, dss.SamplerID, dss.ContentID, dss.TrackNo, dss.UUID, dss.RbDataStatus, dss.RbLocalDataStatus, dss.RbLocalDeleted, dss.RbLocalSynced, dss.Usn, dss.RbLocalUsn, dss.CreatedAt, dss.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, dss.ID, dss.SamplerID, dss.ContentID, dss.TrackNo, dss.UUID, dss.RbDataStatus, dss.RbLocalDataStatus, dss.RbLocalDeleted, dss.RbLocalSynced, dss.Usn, dss.RbLocalUsn, dss.CreatedAt, dss.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	dss._exists = true
	return nil
}

// Update updates a DjmdSongSampler in the database.
func (c *Client) UpdateDjmdSongSampler(ctx context.Context, dss *DjmdSongSampler) error {
	db := c.db

	switch {
	case !dss._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case dss._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE djmdSongSampler SET ` +
		`SamplerID = $1, ContentID = $2, TrackNo = $3, UUID = $4, rb_data_status = $5, rb_local_data_status = $6, rb_local_deleted = $7, rb_local_synced = $8, usn = $9, rb_local_usn = $10, created_at = $11, updated_at = $12 ` +
		`WHERE ID = $13`
	// run
	logf(sqlstr, dss.SamplerID, dss.ContentID, dss.TrackNo, dss.UUID, dss.RbDataStatus, dss.RbLocalDataStatus, dss.RbLocalDeleted, dss.RbLocalSynced, dss.Usn, dss.RbLocalUsn, dss.CreatedAt, dss.UpdatedAt, dss.ID)
	if _, err := db.ExecContext(ctx, sqlstr, dss.SamplerID, dss.ContentID, dss.TrackNo, dss.UUID, dss.RbDataStatus, dss.RbLocalDataStatus, dss.RbLocalDeleted, dss.RbLocalSynced, dss.Usn, dss.RbLocalUsn, dss.CreatedAt, dss.UpdatedAt, dss.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the DjmdSongSampler to the database.
func (c *Client) SaveDjmdSongSampler(ctx context.Context, dss *DjmdSongSampler) error {
	if dss.Exists() {
		return c.UpdateDjmdSongSampler(ctx, dss)
	}
	return c.InsertDjmdSongSampler(ctx, dss)
}

// Upsert performs an upsert for DjmdSongSampler.
func (c *Client) UpsertDjmdSongSampler(ctx context.Context, dss *DjmdSongSampler) error {
	db := c.db

	switch {
	case dss._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO djmdSongSampler (` +
		`ID, SamplerID, ContentID, TrackNo, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13` +
		`)` +
		` ON CONFLICT (ID) DO ` +
		`UPDATE SET ` +
		`SamplerID = EXCLUDED.SamplerID, ContentID = EXCLUDED.ContentID, TrackNo = EXCLUDED.TrackNo, UUID = EXCLUDED.UUID, rb_data_status = EXCLUDED.rb_data_status, rb_local_data_status = EXCLUDED.rb_local_data_status, rb_local_deleted = EXCLUDED.rb_local_deleted, rb_local_synced = EXCLUDED.rb_local_synced, usn = EXCLUDED.usn, rb_local_usn = EXCLUDED.rb_local_usn, created_at = EXCLUDED.created_at, updated_at = EXCLUDED.updated_at `
	// run
	logf(sqlstr, dss.ID, dss.SamplerID, dss.ContentID, dss.TrackNo, dss.UUID, dss.RbDataStatus, dss.RbLocalDataStatus, dss.RbLocalDeleted, dss.RbLocalSynced, dss.Usn, dss.RbLocalUsn, dss.CreatedAt, dss.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, dss.ID, dss.SamplerID, dss.ContentID, dss.TrackNo, dss.UUID, dss.RbDataStatus, dss.RbLocalDataStatus, dss.RbLocalDeleted, dss.RbLocalSynced, dss.Usn, dss.RbLocalUsn, dss.CreatedAt, dss.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	dss._exists = true
	return nil
}

// Delete deletes the DjmdSongSampler from the database.
func (c *Client) DeleteDjmdSongSampler(ctx context.Context, dss *DjmdSongSampler) error {
	db := c.db

	switch {
	case !dss._exists: // doesn't exist
		return nil
	case dss._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM djmdSongSampler ` +
		`WHERE ID = $1`
	// run
	logf(sqlstr, dss.ID)
	if _, err := db.ExecContext(ctx, sqlstr, dss.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	dss._deleted = true
	return nil
}

func scanDjmdSongSamplerRows(rows *sql.Rows) ([]*DjmdSongSampler, error) {
	var res []*DjmdSongSampler
	for rows.Next() {
		dss := DjmdSongSampler{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dss.ID, &dss.SamplerID, &dss.ContentID, &dss.TrackNo, &dss.UUID, &dss.RbDataStatus, &dss.RbLocalDataStatus, &dss.RbLocalDeleted, &dss.RbLocalSynced, &dss.Usn, &dss.RbLocalUsn, &dss.CreatedAt, &dss.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dss)
	}

	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

func (c *Client) AllDjmdSongSampler(ctx context.Context) ([]*DjmdSongSampler, error) {
	db := c.db

	const sqlstr = `SELECT * FROM DjmdSongSampler`
	rows, err := db.QueryContext(ctx, sqlstr)
	if err != nil {
		return nil, logerror(err)
	}

	defer rows.Close()
	res, err := scanDjmdSongSamplerRows(rows)
	if err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdSongSamplerByContentID retrieves a row from 'djmdSongSampler' as a DjmdSongSampler.
//
// Generated from index 'djmd_song_sampler__content_i_d'.
func (c *Client) DjmdSongSamplerByContentID(ctx context.Context, contentID sql.NullString) ([]*DjmdSongSampler, error) {
	// func DjmdSongSamplerByContentID(ctx context.Context, db DB, contentID sql.NullString) ([]*DjmdSongSampler, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, SamplerID, ContentID, TrackNo, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdSongSampler ` +
		`WHERE ContentID = $1`
	// run
	logf(sqlstr, contentID)
	rows, err := db.QueryContext(ctx, sqlstr, contentID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdSongSampler
	for rows.Next() {
		dss := DjmdSongSampler{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dss.ID, &dss.SamplerID, &dss.ContentID, &dss.TrackNo, &dss.UUID, &dss.RbDataStatus, &dss.RbLocalDataStatus, &dss.RbLocalDeleted, &dss.RbLocalSynced, &dss.Usn, &dss.RbLocalUsn, &dss.CreatedAt, &dss.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dss)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdSongSamplerBySamplerID retrieves a row from 'djmdSongSampler' as a DjmdSongSampler.
//
// Generated from index 'djmd_song_sampler__sampler_i_d'.
func (c *Client) DjmdSongSamplerBySamplerID(ctx context.Context, samplerID sql.NullString) ([]*DjmdSongSampler, error) {
	// func DjmdSongSamplerBySamplerID(ctx context.Context, db DB, samplerID sql.NullString) ([]*DjmdSongSampler, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, SamplerID, ContentID, TrackNo, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdSongSampler ` +
		`WHERE SamplerID = $1`
	// run
	logf(sqlstr, samplerID)
	rows, err := db.QueryContext(ctx, sqlstr, samplerID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdSongSampler
	for rows.Next() {
		dss := DjmdSongSampler{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dss.ID, &dss.SamplerID, &dss.ContentID, &dss.TrackNo, &dss.UUID, &dss.RbDataStatus, &dss.RbLocalDataStatus, &dss.RbLocalDeleted, &dss.RbLocalSynced, &dss.Usn, &dss.RbLocalUsn, &dss.CreatedAt, &dss.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dss)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdSongSamplerByUUID retrieves a row from 'djmdSongSampler' as a DjmdSongSampler.
//
// Generated from index 'djmd_song_sampler__u_u_i_d'.
func (c *Client) DjmdSongSamplerByUUID(ctx context.Context, uuid sql.NullString) ([]*DjmdSongSampler, error) {
	// func DjmdSongSamplerByUUID(ctx context.Context, db DB, uuid sql.NullString) ([]*DjmdSongSampler, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, SamplerID, ContentID, TrackNo, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdSongSampler ` +
		`WHERE UUID = $1`
	// run
	logf(sqlstr, uuid)
	rows, err := db.QueryContext(ctx, sqlstr, uuid)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdSongSampler
	for rows.Next() {
		dss := DjmdSongSampler{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dss.ID, &dss.SamplerID, &dss.ContentID, &dss.TrackNo, &dss.UUID, &dss.RbDataStatus, &dss.RbLocalDataStatus, &dss.RbLocalDeleted, &dss.RbLocalSynced, &dss.Usn, &dss.RbLocalUsn, &dss.CreatedAt, &dss.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dss)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdSongSamplerByRbDataStatus retrieves a row from 'djmdSongSampler' as a DjmdSongSampler.
//
// Generated from index 'djmd_song_sampler_rb_data_status'.
func (c *Client) DjmdSongSamplerByRbDataStatus(ctx context.Context, rbDataStatus sql.NullInt64) ([]*DjmdSongSampler, error) {
	// func DjmdSongSamplerByRbDataStatus(ctx context.Context, db DB, rbDataStatus sql.NullInt64) ([]*DjmdSongSampler, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, SamplerID, ContentID, TrackNo, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdSongSampler ` +
		`WHERE rb_data_status = $1`
	// run
	logf(sqlstr, rbDataStatus)
	rows, err := db.QueryContext(ctx, sqlstr, rbDataStatus)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdSongSampler
	for rows.Next() {
		dss := DjmdSongSampler{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dss.ID, &dss.SamplerID, &dss.ContentID, &dss.TrackNo, &dss.UUID, &dss.RbDataStatus, &dss.RbLocalDataStatus, &dss.RbLocalDeleted, &dss.RbLocalSynced, &dss.Usn, &dss.RbLocalUsn, &dss.CreatedAt, &dss.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dss)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdSongSamplerByRbLocalDataStatus retrieves a row from 'djmdSongSampler' as a DjmdSongSampler.
//
// Generated from index 'djmd_song_sampler_rb_local_data_status'.
func (c *Client) DjmdSongSamplerByRbLocalDataStatus(ctx context.Context, rbLocalDataStatus sql.NullInt64) ([]*DjmdSongSampler, error) {
	// func DjmdSongSamplerByRbLocalDataStatus(ctx context.Context, db DB, rbLocalDataStatus sql.NullInt64) ([]*DjmdSongSampler, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, SamplerID, ContentID, TrackNo, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdSongSampler ` +
		`WHERE rb_local_data_status = $1`
	// run
	logf(sqlstr, rbLocalDataStatus)
	rows, err := db.QueryContext(ctx, sqlstr, rbLocalDataStatus)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdSongSampler
	for rows.Next() {
		dss := DjmdSongSampler{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dss.ID, &dss.SamplerID, &dss.ContentID, &dss.TrackNo, &dss.UUID, &dss.RbDataStatus, &dss.RbLocalDataStatus, &dss.RbLocalDeleted, &dss.RbLocalSynced, &dss.Usn, &dss.RbLocalUsn, &dss.CreatedAt, &dss.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dss)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdSongSamplerByRbLocalDeleted retrieves a row from 'djmdSongSampler' as a DjmdSongSampler.
//
// Generated from index 'djmd_song_sampler_rb_local_deleted'.
func (c *Client) DjmdSongSamplerByRbLocalDeleted(ctx context.Context, rbLocalDeleted sql.NullInt64) ([]*DjmdSongSampler, error) {
	// func DjmdSongSamplerByRbLocalDeleted(ctx context.Context, db DB, rbLocalDeleted sql.NullInt64) ([]*DjmdSongSampler, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, SamplerID, ContentID, TrackNo, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdSongSampler ` +
		`WHERE rb_local_deleted = $1`
	// run
	logf(sqlstr, rbLocalDeleted)
	rows, err := db.QueryContext(ctx, sqlstr, rbLocalDeleted)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdSongSampler
	for rows.Next() {
		dss := DjmdSongSampler{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dss.ID, &dss.SamplerID, &dss.ContentID, &dss.TrackNo, &dss.UUID, &dss.RbDataStatus, &dss.RbLocalDataStatus, &dss.RbLocalDeleted, &dss.RbLocalSynced, &dss.Usn, &dss.RbLocalUsn, &dss.CreatedAt, &dss.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dss)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdSongSamplerByRbLocalUsnID retrieves a row from 'djmdSongSampler' as a DjmdSongSampler.
//
// Generated from index 'djmd_song_sampler_rb_local_usn__i_d'.
func (c *Client) DjmdSongSamplerByRbLocalUsnID(ctx context.Context, rbLocalUsn sql.NullInt64, id sql.NullString) ([]*DjmdSongSampler, error) {
	// func DjmdSongSamplerByRbLocalUsnID(ctx context.Context, db DB, rbLocalUsn sql.NullInt64, id sql.NullString) ([]*DjmdSongSampler, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, SamplerID, ContentID, TrackNo, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdSongSampler ` +
		`WHERE rb_local_usn = $1 AND ID = $2`
	// run
	logf(sqlstr, rbLocalUsn, id)
	rows, err := db.QueryContext(ctx, sqlstr, rbLocalUsn, id)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdSongSampler
	for rows.Next() {
		dss := DjmdSongSampler{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dss.ID, &dss.SamplerID, &dss.ContentID, &dss.TrackNo, &dss.UUID, &dss.RbDataStatus, &dss.RbLocalDataStatus, &dss.RbLocalDeleted, &dss.RbLocalSynced, &dss.Usn, &dss.RbLocalUsn, &dss.CreatedAt, &dss.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dss)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdSongSamplerByID retrieves a row from 'djmdSongSampler' as a DjmdSongSampler.
//
// Generated from index 'sqlite_autoindex_djmdSongSampler_1'.
func (c *Client) DjmdSongSamplerByID(ctx context.Context, id sql.NullString) (*DjmdSongSampler, error) {
	// func DjmdSongSamplerByID(ctx context.Context, db DB, id sql.NullString) (*DjmdSongSampler, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, SamplerID, ContentID, TrackNo, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdSongSampler ` +
		`WHERE ID = $1`
	// run
	logf(sqlstr, id)
	dss := DjmdSongSampler{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&dss.ID, &dss.SamplerID, &dss.ContentID, &dss.TrackNo, &dss.UUID, &dss.RbDataStatus, &dss.RbLocalDataStatus, &dss.RbLocalDeleted, &dss.RbLocalSynced, &dss.Usn, &dss.RbLocalUsn, &dss.CreatedAt, &dss.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &dss, nil
}
