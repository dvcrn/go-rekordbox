package rekordbox

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"

	nulltype "github.com/mattn/go-nulltype"
)

// HotCueBanklistCue represents a row from 'hotCueBanklistCue'.
type HotCueBanklistCue struct {
	ID                nulltype.NullString `json:"ID"`                   // ID
	HotCueBanklistID  nulltype.NullString `json:"HotCueBanklistID"`     // HotCueBanklistID
	Cues              nulltype.NullString `json:"Cues"`                 // Cues
	RbCueCount        nulltype.NullInt64  `json:"rb_cue_count"`         // rb_cue_count
	UUID              nulltype.NullString `json:"UUID"`                 // UUID
	RbDataStatus      nulltype.NullInt64  `json:"rb_data_status"`       // rb_data_status
	RbLocalDataStatus nulltype.NullInt64  `json:"rb_local_data_status"` // rb_local_data_status
	RbLocalDeleted    nulltype.NullInt64  `json:"rb_local_deleted"`     // rb_local_deleted
	RbLocalSynced     nulltype.NullInt64  `json:"rb_local_synced"`      // rb_local_synced
	Usn               nulltype.NullInt64  `json:"usn"`                  // usn
	RbLocalUsn        nulltype.NullInt64  `json:"rb_local_usn"`         // rb_local_usn
	CreatedAt         Time                `json:"created_at"`           // created_at
	UpdatedAt         Time                `json:"updated_at"`           // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the HotCueBanklistCue exists in the database.
func (hcbc *HotCueBanklistCue) Exists() bool {
	return hcbc._exists
}

// Deleted returns true when the HotCueBanklistCue has been marked for deletion from
// the database.
func (hcbc *HotCueBanklistCue) Deleted() bool {
	return hcbc._deleted
}

// Insert inserts the HotCueBanklistCue to the database.
func (c *Client) InsertHotCueBanklistCue(ctx context.Context, hcbc *HotCueBanklistCue) error {
	db := c.db

	switch {
	case hcbc._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case hcbc._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO hotCueBanklistCue (` +
		`ID, HotCueBanklistID, Cues, rb_cue_count, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13` +
		`)`
	// run
	logf(sqlstr, hcbc.ID, hcbc.HotCueBanklistID, hcbc.Cues, hcbc.RbCueCount, hcbc.UUID, hcbc.RbDataStatus, hcbc.RbLocalDataStatus, hcbc.RbLocalDeleted, hcbc.RbLocalSynced, hcbc.Usn, hcbc.RbLocalUsn, hcbc.CreatedAt, hcbc.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, hcbc.ID, hcbc.HotCueBanklistID, hcbc.Cues, hcbc.RbCueCount, hcbc.UUID, hcbc.RbDataStatus, hcbc.RbLocalDataStatus, hcbc.RbLocalDeleted, hcbc.RbLocalSynced, hcbc.Usn, hcbc.RbLocalUsn, hcbc.CreatedAt, hcbc.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	hcbc._exists = true
	return nil
}

// Update updates a HotCueBanklistCue in the database.
func (c *Client) UpdateHotCueBanklistCue(ctx context.Context, hcbc *HotCueBanklistCue) error {
	db := c.db

	switch {
	case !hcbc._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case hcbc._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE hotCueBanklistCue SET ` +
		`HotCueBanklistID = $1, Cues = $2, rb_cue_count = $3, UUID = $4, rb_data_status = $5, rb_local_data_status = $6, rb_local_deleted = $7, rb_local_synced = $8, usn = $9, rb_local_usn = $10, created_at = $11, updated_at = $12 ` +
		`WHERE ID = $13`
	// run
	logf(sqlstr, hcbc.HotCueBanklistID, hcbc.Cues, hcbc.RbCueCount, hcbc.UUID, hcbc.RbDataStatus, hcbc.RbLocalDataStatus, hcbc.RbLocalDeleted, hcbc.RbLocalSynced, hcbc.Usn, hcbc.RbLocalUsn, hcbc.CreatedAt, hcbc.UpdatedAt, hcbc.ID)
	if _, err := db.ExecContext(ctx, sqlstr, hcbc.HotCueBanklistID, hcbc.Cues, hcbc.RbCueCount, hcbc.UUID, hcbc.RbDataStatus, hcbc.RbLocalDataStatus, hcbc.RbLocalDeleted, hcbc.RbLocalSynced, hcbc.Usn, hcbc.RbLocalUsn, hcbc.CreatedAt, hcbc.UpdatedAt, hcbc.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the HotCueBanklistCue to the database.
func (c *Client) SaveHotCueBanklistCue(ctx context.Context, hcbc *HotCueBanklistCue) error {
	if hcbc.Exists() {
		return c.UpdateHotCueBanklistCue(ctx, hcbc)
	}
	return c.InsertHotCueBanklistCue(ctx, hcbc)
}

// Upsert performs an upsert for HotCueBanklistCue.
func (c *Client) UpsertHotCueBanklistCue(ctx context.Context, hcbc *HotCueBanklistCue) error {
	db := c.db

	switch {
	case hcbc._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO hotCueBanklistCue (` +
		`ID, HotCueBanklistID, Cues, rb_cue_count, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13` +
		`)` +
		` ON CONFLICT (ID) DO ` +
		`UPDATE SET ` +
		`HotCueBanklistID = EXCLUDED.HotCueBanklistID, Cues = EXCLUDED.Cues, rb_cue_count = EXCLUDED.rb_cue_count, UUID = EXCLUDED.UUID, rb_data_status = EXCLUDED.rb_data_status, rb_local_data_status = EXCLUDED.rb_local_data_status, rb_local_deleted = EXCLUDED.rb_local_deleted, rb_local_synced = EXCLUDED.rb_local_synced, usn = EXCLUDED.usn, rb_local_usn = EXCLUDED.rb_local_usn, created_at = EXCLUDED.created_at, updated_at = EXCLUDED.updated_at `
	// run
	logf(sqlstr, hcbc.ID, hcbc.HotCueBanklistID, hcbc.Cues, hcbc.RbCueCount, hcbc.UUID, hcbc.RbDataStatus, hcbc.RbLocalDataStatus, hcbc.RbLocalDeleted, hcbc.RbLocalSynced, hcbc.Usn, hcbc.RbLocalUsn, hcbc.CreatedAt, hcbc.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, hcbc.ID, hcbc.HotCueBanklistID, hcbc.Cues, hcbc.RbCueCount, hcbc.UUID, hcbc.RbDataStatus, hcbc.RbLocalDataStatus, hcbc.RbLocalDeleted, hcbc.RbLocalSynced, hcbc.Usn, hcbc.RbLocalUsn, hcbc.CreatedAt, hcbc.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	hcbc._exists = true
	return nil
}

// Delete deletes the HotCueBanklistCue from the database.
func (c *Client) DeleteHotCueBanklistCue(ctx context.Context, hcbc *HotCueBanklistCue) error {
	db := c.db

	switch {
	case !hcbc._exists: // doesn't exist
		return nil
	case hcbc._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM hotCueBanklistCue ` +
		`WHERE ID = $1`
	// run
	logf(sqlstr, hcbc.ID)
	if _, err := db.ExecContext(ctx, sqlstr, hcbc.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	hcbc._deleted = true
	return nil
}

func scanHotCueBanklistCueRows(rows *sql.Rows) ([]*HotCueBanklistCue, error) {
	var res []*HotCueBanklistCue
	for rows.Next() {
		hcbc := HotCueBanklistCue{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&hcbc.ID, &hcbc.HotCueBanklistID, &hcbc.Cues, &hcbc.RbCueCount, &hcbc.UUID, &hcbc.RbDataStatus, &hcbc.RbLocalDataStatus, &hcbc.RbLocalDeleted, &hcbc.RbLocalSynced, &hcbc.Usn, &hcbc.RbLocalUsn, &hcbc.CreatedAt, &hcbc.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &hcbc)
	}

	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

func (c *Client) AllHotCueBanklistCue(ctx context.Context) ([]*HotCueBanklistCue, error) {
	db := c.db

	const sqlstr = `SELECT * FROM HotCueBanklistCue`
	rows, err := db.QueryContext(ctx, sqlstr)
	if err != nil {
		return nil, logerror(err)
	}

	defer rows.Close()
	res, err := scanHotCueBanklistCueRows(rows)
	if err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// HotCueBanklistCueByHotCueBanklistID retrieves a row from 'hotCueBanklistCue' as a HotCueBanklistCue.
//
// Generated from index 'hot_cue_banklist_cue__hot_cue_banklist_i_d'.
func (c *Client) HotCueBanklistCueByHotCueBanklistID(ctx context.Context, hotCueBanklistID nulltype.NullString) ([]*HotCueBanklistCue, error) {
	// func HotCueBanklistCueByHotCueBanklistID(ctx context.Context, db DB, hotCueBanklistID nulltype.NullString) ([]*HotCueBanklistCue, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, HotCueBanklistID, Cues, rb_cue_count, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM hotCueBanklistCue ` +
		`WHERE HotCueBanklistID = $1`
	// run
	logf(sqlstr, hotCueBanklistID)
	rows, err := db.QueryContext(ctx, sqlstr, hotCueBanklistID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*HotCueBanklistCue
	for rows.Next() {
		hcbc := HotCueBanklistCue{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&hcbc.ID, &hcbc.HotCueBanklistID, &hcbc.Cues, &hcbc.RbCueCount, &hcbc.UUID, &hcbc.RbDataStatus, &hcbc.RbLocalDataStatus, &hcbc.RbLocalDeleted, &hcbc.RbLocalSynced, &hcbc.Usn, &hcbc.RbLocalUsn, &hcbc.CreatedAt, &hcbc.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &hcbc)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// HotCueBanklistCueByUUID retrieves a row from 'hotCueBanklistCue' as a HotCueBanklistCue.
//
// Generated from index 'hot_cue_banklist_cue__u_u_i_d'.
func (c *Client) HotCueBanklistCueByUUID(ctx context.Context, uuid nulltype.NullString) ([]*HotCueBanklistCue, error) {
	// func HotCueBanklistCueByUUID(ctx context.Context, db DB, uuid nulltype.NullString) ([]*HotCueBanklistCue, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, HotCueBanklistID, Cues, rb_cue_count, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM hotCueBanklistCue ` +
		`WHERE UUID = $1`
	// run
	logf(sqlstr, uuid)
	rows, err := db.QueryContext(ctx, sqlstr, uuid)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*HotCueBanklistCue
	for rows.Next() {
		hcbc := HotCueBanklistCue{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&hcbc.ID, &hcbc.HotCueBanklistID, &hcbc.Cues, &hcbc.RbCueCount, &hcbc.UUID, &hcbc.RbDataStatus, &hcbc.RbLocalDataStatus, &hcbc.RbLocalDeleted, &hcbc.RbLocalSynced, &hcbc.Usn, &hcbc.RbLocalUsn, &hcbc.CreatedAt, &hcbc.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &hcbc)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// HotCueBanklistCueByRbCueCount retrieves a row from 'hotCueBanklistCue' as a HotCueBanklistCue.
//
// Generated from index 'hot_cue_banklist_cue_rb_cue_count'.
func (c *Client) HotCueBanklistCueByRbCueCount(ctx context.Context, rbCueCount nulltype.NullInt64) ([]*HotCueBanklistCue, error) {
	// func HotCueBanklistCueByRbCueCount(ctx context.Context, db DB, rbCueCount nulltype.NullInt64) ([]*HotCueBanklistCue, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, HotCueBanklistID, Cues, rb_cue_count, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM hotCueBanklistCue ` +
		`WHERE rb_cue_count = $1`
	// run
	logf(sqlstr, rbCueCount)
	rows, err := db.QueryContext(ctx, sqlstr, rbCueCount)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*HotCueBanklistCue
	for rows.Next() {
		hcbc := HotCueBanklistCue{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&hcbc.ID, &hcbc.HotCueBanklistID, &hcbc.Cues, &hcbc.RbCueCount, &hcbc.UUID, &hcbc.RbDataStatus, &hcbc.RbLocalDataStatus, &hcbc.RbLocalDeleted, &hcbc.RbLocalSynced, &hcbc.Usn, &hcbc.RbLocalUsn, &hcbc.CreatedAt, &hcbc.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &hcbc)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// HotCueBanklistCueByRbDataStatus retrieves a row from 'hotCueBanklistCue' as a HotCueBanklistCue.
//
// Generated from index 'hot_cue_banklist_cue_rb_data_status'.
func (c *Client) HotCueBanklistCueByRbDataStatus(ctx context.Context, rbDataStatus nulltype.NullInt64) ([]*HotCueBanklistCue, error) {
	// func HotCueBanklistCueByRbDataStatus(ctx context.Context, db DB, rbDataStatus nulltype.NullInt64) ([]*HotCueBanklistCue, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, HotCueBanklistID, Cues, rb_cue_count, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM hotCueBanklistCue ` +
		`WHERE rb_data_status = $1`
	// run
	logf(sqlstr, rbDataStatus)
	rows, err := db.QueryContext(ctx, sqlstr, rbDataStatus)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*HotCueBanklistCue
	for rows.Next() {
		hcbc := HotCueBanklistCue{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&hcbc.ID, &hcbc.HotCueBanklistID, &hcbc.Cues, &hcbc.RbCueCount, &hcbc.UUID, &hcbc.RbDataStatus, &hcbc.RbLocalDataStatus, &hcbc.RbLocalDeleted, &hcbc.RbLocalSynced, &hcbc.Usn, &hcbc.RbLocalUsn, &hcbc.CreatedAt, &hcbc.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &hcbc)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// HotCueBanklistCueByRbLocalDataStatus retrieves a row from 'hotCueBanklistCue' as a HotCueBanklistCue.
//
// Generated from index 'hot_cue_banklist_cue_rb_local_data_status'.
func (c *Client) HotCueBanklistCueByRbLocalDataStatus(ctx context.Context, rbLocalDataStatus nulltype.NullInt64) ([]*HotCueBanklistCue, error) {
	// func HotCueBanklistCueByRbLocalDataStatus(ctx context.Context, db DB, rbLocalDataStatus nulltype.NullInt64) ([]*HotCueBanklistCue, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, HotCueBanklistID, Cues, rb_cue_count, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM hotCueBanklistCue ` +
		`WHERE rb_local_data_status = $1`
	// run
	logf(sqlstr, rbLocalDataStatus)
	rows, err := db.QueryContext(ctx, sqlstr, rbLocalDataStatus)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*HotCueBanklistCue
	for rows.Next() {
		hcbc := HotCueBanklistCue{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&hcbc.ID, &hcbc.HotCueBanklistID, &hcbc.Cues, &hcbc.RbCueCount, &hcbc.UUID, &hcbc.RbDataStatus, &hcbc.RbLocalDataStatus, &hcbc.RbLocalDeleted, &hcbc.RbLocalSynced, &hcbc.Usn, &hcbc.RbLocalUsn, &hcbc.CreatedAt, &hcbc.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &hcbc)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// HotCueBanklistCueByRbLocalDeleted retrieves a row from 'hotCueBanklistCue' as a HotCueBanklistCue.
//
// Generated from index 'hot_cue_banklist_cue_rb_local_deleted'.
func (c *Client) HotCueBanklistCueByRbLocalDeleted(ctx context.Context, rbLocalDeleted nulltype.NullInt64) ([]*HotCueBanklistCue, error) {
	// func HotCueBanklistCueByRbLocalDeleted(ctx context.Context, db DB, rbLocalDeleted nulltype.NullInt64) ([]*HotCueBanklistCue, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, HotCueBanklistID, Cues, rb_cue_count, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM hotCueBanklistCue ` +
		`WHERE rb_local_deleted = $1`
	// run
	logf(sqlstr, rbLocalDeleted)
	rows, err := db.QueryContext(ctx, sqlstr, rbLocalDeleted)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*HotCueBanklistCue
	for rows.Next() {
		hcbc := HotCueBanklistCue{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&hcbc.ID, &hcbc.HotCueBanklistID, &hcbc.Cues, &hcbc.RbCueCount, &hcbc.UUID, &hcbc.RbDataStatus, &hcbc.RbLocalDataStatus, &hcbc.RbLocalDeleted, &hcbc.RbLocalSynced, &hcbc.Usn, &hcbc.RbLocalUsn, &hcbc.CreatedAt, &hcbc.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &hcbc)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// HotCueBanklistCueByRbLocalUsnID retrieves a row from 'hotCueBanklistCue' as a HotCueBanklistCue.
//
// Generated from index 'hot_cue_banklist_cue_rb_local_usn__i_d'.
func (c *Client) HotCueBanklistCueByRbLocalUsnID(ctx context.Context, rbLocalUsn nulltype.NullInt64, id nulltype.NullString) ([]*HotCueBanklistCue, error) {
	// func HotCueBanklistCueByRbLocalUsnID(ctx context.Context, db DB, rbLocalUsn nulltype.NullInt64, id nulltype.NullString) ([]*HotCueBanklistCue, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, HotCueBanklistID, Cues, rb_cue_count, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM hotCueBanklistCue ` +
		`WHERE rb_local_usn = $1 AND ID = $2`
	// run
	logf(sqlstr, rbLocalUsn, id)
	rows, err := db.QueryContext(ctx, sqlstr, rbLocalUsn, id)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*HotCueBanklistCue
	for rows.Next() {
		hcbc := HotCueBanklistCue{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&hcbc.ID, &hcbc.HotCueBanklistID, &hcbc.Cues, &hcbc.RbCueCount, &hcbc.UUID, &hcbc.RbDataStatus, &hcbc.RbLocalDataStatus, &hcbc.RbLocalDeleted, &hcbc.RbLocalSynced, &hcbc.Usn, &hcbc.RbLocalUsn, &hcbc.CreatedAt, &hcbc.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &hcbc)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// HotCueBanklistCueByID retrieves a row from 'hotCueBanklistCue' as a HotCueBanklistCue.
//
// Generated from index 'sqlite_autoindex_hotCueBanklistCue_1'.
func (c *Client) HotCueBanklistCueByID(ctx context.Context, id nulltype.NullString) (*HotCueBanklistCue, error) {
	// func HotCueBanklistCueByID(ctx context.Context, db DB, id nulltype.NullString) (*HotCueBanklistCue, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, HotCueBanklistID, Cues, rb_cue_count, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM hotCueBanklistCue ` +
		`WHERE ID = $1`
	// run
	logf(sqlstr, id)
	hcbc := HotCueBanklistCue{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&hcbc.ID, &hcbc.HotCueBanklistID, &hcbc.Cues, &hcbc.RbCueCount, &hcbc.UUID, &hcbc.RbDataStatus, &hcbc.RbLocalDataStatus, &hcbc.RbLocalDeleted, &hcbc.RbLocalSynced, &hcbc.Usn, &hcbc.RbLocalUsn, &hcbc.CreatedAt, &hcbc.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &hcbc, nil
}
