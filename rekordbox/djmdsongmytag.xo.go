package rekordbox

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// DjmdSongMyTag represents a row from 'djmdSongMyTag'.
type DjmdSongMyTag struct {
	ID                sql.NullString `json:"ID"`                   // ID
	MyTagID           sql.NullString `json:"MyTagID"`              // MyTagID
	ContentID         sql.NullString `json:"ContentID"`            // ContentID
	TrackNo           sql.NullInt64  `json:"TrackNo"`              // TrackNo
	UUID              sql.NullString `json:"UUID"`                 // UUID
	RbDataStatus      sql.NullInt64  `json:"rb_data_status"`       // rb_data_status
	RbLocalDataStatus sql.NullInt64  `json:"rb_local_data_status"` // rb_local_data_status
	RbLocalDeleted    sql.NullInt64  `json:"rb_local_deleted"`     // rb_local_deleted
	RbLocalSynced     sql.NullInt64  `json:"rb_local_synced"`      // rb_local_synced
	Usn               sql.NullInt64  `json:"usn"`                  // usn
	RbLocalUsn        sql.NullInt64  `json:"rb_local_usn"`         // rb_local_usn
	CreatedAt         Time           `json:"created_at"`           // created_at
	UpdatedAt         Time           `json:"updated_at"`           // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the DjmdSongMyTag exists in the database.
func (dsmt *DjmdSongMyTag) Exists() bool {
	return dsmt._exists
}

// Deleted returns true when the DjmdSongMyTag has been marked for deletion from
// the database.
func (dsmt *DjmdSongMyTag) Deleted() bool {
	return dsmt._deleted
}

// Insert inserts the DjmdSongMyTag to the database.
func (c *Client) InsertDjmdSongMyTag(ctx context.Context, dsmt *DjmdSongMyTag) error {
	db := c.db

	switch {
	case dsmt._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case dsmt._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO djmdSongMyTag (` +
		`ID, MyTagID, ContentID, TrackNo, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13` +
		`)`
	// run
	logf(sqlstr, dsmt.ID, dsmt.MyTagID, dsmt.ContentID, dsmt.TrackNo, dsmt.UUID, dsmt.RbDataStatus, dsmt.RbLocalDataStatus, dsmt.RbLocalDeleted, dsmt.RbLocalSynced, dsmt.Usn, dsmt.RbLocalUsn, dsmt.CreatedAt, dsmt.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, dsmt.ID, dsmt.MyTagID, dsmt.ContentID, dsmt.TrackNo, dsmt.UUID, dsmt.RbDataStatus, dsmt.RbLocalDataStatus, dsmt.RbLocalDeleted, dsmt.RbLocalSynced, dsmt.Usn, dsmt.RbLocalUsn, dsmt.CreatedAt, dsmt.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	dsmt._exists = true
	return nil
}

// Update updates a DjmdSongMyTag in the database.
func (c *Client) UpdateDjmdSongMyTag(ctx context.Context, dsmt *DjmdSongMyTag) error {
	db := c.db

	switch {
	case !dsmt._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case dsmt._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE djmdSongMyTag SET ` +
		`MyTagID = $1, ContentID = $2, TrackNo = $3, UUID = $4, rb_data_status = $5, rb_local_data_status = $6, rb_local_deleted = $7, rb_local_synced = $8, usn = $9, rb_local_usn = $10, created_at = $11, updated_at = $12 ` +
		`WHERE ID = $13`
	// run
	logf(sqlstr, dsmt.MyTagID, dsmt.ContentID, dsmt.TrackNo, dsmt.UUID, dsmt.RbDataStatus, dsmt.RbLocalDataStatus, dsmt.RbLocalDeleted, dsmt.RbLocalSynced, dsmt.Usn, dsmt.RbLocalUsn, dsmt.CreatedAt, dsmt.UpdatedAt, dsmt.ID)
	if _, err := db.ExecContext(ctx, sqlstr, dsmt.MyTagID, dsmt.ContentID, dsmt.TrackNo, dsmt.UUID, dsmt.RbDataStatus, dsmt.RbLocalDataStatus, dsmt.RbLocalDeleted, dsmt.RbLocalSynced, dsmt.Usn, dsmt.RbLocalUsn, dsmt.CreatedAt, dsmt.UpdatedAt, dsmt.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the DjmdSongMyTag to the database.
func (c *Client) SaveDjmdSongMyTag(ctx context.Context, dsmt *DjmdSongMyTag) error {
	if dsmt.Exists() {
		return c.UpdateDjmdSongMyTag(ctx, dsmt)
	}
	return c.InsertDjmdSongMyTag(ctx, dsmt)
}

// Upsert performs an upsert for DjmdSongMyTag.
func (c *Client) UpsertDjmdSongMyTag(ctx context.Context, dsmt *DjmdSongMyTag) error {
	db := c.db

	switch {
	case dsmt._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO djmdSongMyTag (` +
		`ID, MyTagID, ContentID, TrackNo, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13` +
		`)` +
		` ON CONFLICT (ID) DO ` +
		`UPDATE SET ` +
		`MyTagID = EXCLUDED.MyTagID, ContentID = EXCLUDED.ContentID, TrackNo = EXCLUDED.TrackNo, UUID = EXCLUDED.UUID, rb_data_status = EXCLUDED.rb_data_status, rb_local_data_status = EXCLUDED.rb_local_data_status, rb_local_deleted = EXCLUDED.rb_local_deleted, rb_local_synced = EXCLUDED.rb_local_synced, usn = EXCLUDED.usn, rb_local_usn = EXCLUDED.rb_local_usn, created_at = EXCLUDED.created_at, updated_at = EXCLUDED.updated_at `
	// run
	logf(sqlstr, dsmt.ID, dsmt.MyTagID, dsmt.ContentID, dsmt.TrackNo, dsmt.UUID, dsmt.RbDataStatus, dsmt.RbLocalDataStatus, dsmt.RbLocalDeleted, dsmt.RbLocalSynced, dsmt.Usn, dsmt.RbLocalUsn, dsmt.CreatedAt, dsmt.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, dsmt.ID, dsmt.MyTagID, dsmt.ContentID, dsmt.TrackNo, dsmt.UUID, dsmt.RbDataStatus, dsmt.RbLocalDataStatus, dsmt.RbLocalDeleted, dsmt.RbLocalSynced, dsmt.Usn, dsmt.RbLocalUsn, dsmt.CreatedAt, dsmt.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	dsmt._exists = true
	return nil
}

// Delete deletes the DjmdSongMyTag from the database.
func (c *Client) DeleteDjmdSongMyTag(ctx context.Context, dsmt *DjmdSongMyTag) error {
	db := c.db

	switch {
	case !dsmt._exists: // doesn't exist
		return nil
	case dsmt._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM djmdSongMyTag ` +
		`WHERE ID = $1`
	// run
	logf(sqlstr, dsmt.ID)
	if _, err := db.ExecContext(ctx, sqlstr, dsmt.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	dsmt._deleted = true
	return nil
}

func (c *Client) AllDjmdSongMyTag(ctx context.Context) ([]*DjmdSongMyTag, error) {
	db := c.db

	const sqlstr = `SELECT * FROM DjmdSongMyTag`
	rows, err := db.QueryContext(ctx, sqlstr)
	if err != nil {
		return nil, logerror(err)
	}

	defer rows.Close()
	// process
	var res []*DjmdSongMyTag
	for rows.Next() {
		dsmt := DjmdSongMyTag{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dsmt.ID, &dsmt.MyTagID, &dsmt.ContentID, &dsmt.TrackNo, &dsmt.UUID, &dsmt.RbDataStatus, &dsmt.RbLocalDataStatus, &dsmt.RbLocalDeleted, &dsmt.RbLocalSynced, &dsmt.Usn, &dsmt.RbLocalUsn, &dsmt.CreatedAt, &dsmt.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dsmt)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdSongMyTagByContentID retrieves a row from 'djmdSongMyTag' as a DjmdSongMyTag.
//
// Generated from index 'djmd_song_my_tag__content_i_d'.
// func (dsmt *DjmdSongMyTag) djmdSongMyTag(db DB) (error)
// func DjmdSongMyTagByContentID(ctx context.Context, db DB, contentID sql.NullString) ([]*DjmdSongMyTag, error) {
// DjmdSongMyTagByContentID {
// func DjmdSongMyTagByContentID(db DB, contentID sql.NullString) ([]*DjmdSongMyTag, error) {
// true
// contentID
// DjmdSongMyTag
// DjmdSongMyTagByContentID
// false
// false
func (c *Client) DjmdSongMyTagByContentID(ctx context.Context, contentID sql.NullString) ([]*DjmdSongMyTag, error) {
	// func DjmdSongMyTagByContentID(ctx context.Context, db DB, contentID sql.NullString) ([]*DjmdSongMyTag, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, MyTagID, ContentID, TrackNo, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdSongMyTag ` +
		`WHERE ContentID = $1`
	// run
	logf(sqlstr, contentID)
	rows, err := db.QueryContext(ctx, sqlstr, contentID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdSongMyTag
	for rows.Next() {
		dsmt := DjmdSongMyTag{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dsmt.ID, &dsmt.MyTagID, &dsmt.ContentID, &dsmt.TrackNo, &dsmt.UUID, &dsmt.RbDataStatus, &dsmt.RbLocalDataStatus, &dsmt.RbLocalDeleted, &dsmt.RbLocalSynced, &dsmt.Usn, &dsmt.RbLocalUsn, &dsmt.CreatedAt, &dsmt.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dsmt)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdSongMyTagByContentIDRbLocalDeleted retrieves a row from 'djmdSongMyTag' as a DjmdSongMyTag.
//
// Generated from index 'djmd_song_my_tag__content_i_d_rb_local_deleted'.
// func (dsmt *DjmdSongMyTag) djmdSongMyTag(db DB) (error)
// func DjmdSongMyTagByContentIDRbLocalDeleted(ctx context.Context, db DB, contentID sql.NullString, rbLocalDeleted sql.NullInt64) ([]*DjmdSongMyTag, error) {
// DjmdSongMyTagByContentIDRbLocalDeleted {
// func DjmdSongMyTagByContentIDRbLocalDeleted(db DB, contentID sql.NullString, rbLocalDeleted sql.NullInt64) ([]*DjmdSongMyTag, error) {
// true
// contentID, rbLocalDeleted
// DjmdSongMyTag
// DjmdSongMyTagByContentIDRbLocalDeleted
// false
// false
func (c *Client) DjmdSongMyTagByContentIDRbLocalDeleted(ctx context.Context, contentID sql.NullString, rbLocalDeleted sql.NullInt64) ([]*DjmdSongMyTag, error) {
	// func DjmdSongMyTagByContentIDRbLocalDeleted(ctx context.Context, db DB, contentID sql.NullString, rbLocalDeleted sql.NullInt64) ([]*DjmdSongMyTag, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, MyTagID, ContentID, TrackNo, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdSongMyTag ` +
		`WHERE ContentID = $1 AND rb_local_deleted = $2`
	// run
	logf(sqlstr, contentID, rbLocalDeleted)
	rows, err := db.QueryContext(ctx, sqlstr, contentID, rbLocalDeleted)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdSongMyTag
	for rows.Next() {
		dsmt := DjmdSongMyTag{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dsmt.ID, &dsmt.MyTagID, &dsmt.ContentID, &dsmt.TrackNo, &dsmt.UUID, &dsmt.RbDataStatus, &dsmt.RbLocalDataStatus, &dsmt.RbLocalDeleted, &dsmt.RbLocalSynced, &dsmt.Usn, &dsmt.RbLocalUsn, &dsmt.CreatedAt, &dsmt.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dsmt)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdSongMyTagByMyTagID retrieves a row from 'djmdSongMyTag' as a DjmdSongMyTag.
//
// Generated from index 'djmd_song_my_tag__my_tag_i_d'.
// func (dsmt *DjmdSongMyTag) djmdSongMyTag(db DB) (error)
// func DjmdSongMyTagByMyTagID(ctx context.Context, db DB, myTagID sql.NullString) ([]*DjmdSongMyTag, error) {
// DjmdSongMyTagByMyTagID {
// func DjmdSongMyTagByMyTagID(db DB, myTagID sql.NullString) ([]*DjmdSongMyTag, error) {
// true
// myTagID
// DjmdSongMyTag
// DjmdSongMyTagByMyTagID
// false
// false
func (c *Client) DjmdSongMyTagByMyTagID(ctx context.Context, myTagID sql.NullString) ([]*DjmdSongMyTag, error) {
	// func DjmdSongMyTagByMyTagID(ctx context.Context, db DB, myTagID sql.NullString) ([]*DjmdSongMyTag, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, MyTagID, ContentID, TrackNo, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdSongMyTag ` +
		`WHERE MyTagID = $1`
	// run
	logf(sqlstr, myTagID)
	rows, err := db.QueryContext(ctx, sqlstr, myTagID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdSongMyTag
	for rows.Next() {
		dsmt := DjmdSongMyTag{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dsmt.ID, &dsmt.MyTagID, &dsmt.ContentID, &dsmt.TrackNo, &dsmt.UUID, &dsmt.RbDataStatus, &dsmt.RbLocalDataStatus, &dsmt.RbLocalDeleted, &dsmt.RbLocalSynced, &dsmt.Usn, &dsmt.RbLocalUsn, &dsmt.CreatedAt, &dsmt.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dsmt)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdSongMyTagByMyTagIDRbLocalDeletedID retrieves a row from 'djmdSongMyTag' as a DjmdSongMyTag.
//
// Generated from index 'djmd_song_my_tag__my_tag_i_d_rb_local_deleted__i_d'.
// func (dsmt *DjmdSongMyTag) djmdSongMyTag(db DB) (error)
// func DjmdSongMyTagByMyTagIDRbLocalDeletedID(ctx context.Context, db DB, myTagID sql.NullString, rbLocalDeleted sql.NullInt64, id sql.NullString) ([]*DjmdSongMyTag, error) {
// DjmdSongMyTagByMyTagIDRbLocalDeletedID {
// func DjmdSongMyTagByMyTagIDRbLocalDeletedID(db DB, myTagID sql.NullString, rbLocalDeleted sql.NullInt64, id sql.NullString) ([]*DjmdSongMyTag, error) {
// true
// myTagID, rbLocalDeleted, id
// DjmdSongMyTag
// DjmdSongMyTagByMyTagIDRbLocalDeletedID
// false
// false
func (c *Client) DjmdSongMyTagByMyTagIDRbLocalDeletedID(ctx context.Context, myTagID sql.NullString, rbLocalDeleted sql.NullInt64, id sql.NullString) ([]*DjmdSongMyTag, error) {
	// func DjmdSongMyTagByMyTagIDRbLocalDeletedID(ctx context.Context, db DB, myTagID sql.NullString, rbLocalDeleted sql.NullInt64, id sql.NullString) ([]*DjmdSongMyTag, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, MyTagID, ContentID, TrackNo, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdSongMyTag ` +
		`WHERE MyTagID = $1 AND rb_local_deleted = $2 AND ID = $3`
	// run
	logf(sqlstr, myTagID, rbLocalDeleted, id)
	rows, err := db.QueryContext(ctx, sqlstr, myTagID, rbLocalDeleted, id)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdSongMyTag
	for rows.Next() {
		dsmt := DjmdSongMyTag{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dsmt.ID, &dsmt.MyTagID, &dsmt.ContentID, &dsmt.TrackNo, &dsmt.UUID, &dsmt.RbDataStatus, &dsmt.RbLocalDataStatus, &dsmt.RbLocalDeleted, &dsmt.RbLocalSynced, &dsmt.Usn, &dsmt.RbLocalUsn, &dsmt.CreatedAt, &dsmt.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dsmt)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdSongMyTagByUUID retrieves a row from 'djmdSongMyTag' as a DjmdSongMyTag.
//
// Generated from index 'djmd_song_my_tag__u_u_i_d'.
// func (dsmt *DjmdSongMyTag) djmdSongMyTag(db DB) (error)
// func DjmdSongMyTagByUUID(ctx context.Context, db DB, uuid sql.NullString) ([]*DjmdSongMyTag, error) {
// DjmdSongMyTagByUUID {
// func DjmdSongMyTagByUUID(db DB, uuid sql.NullString) ([]*DjmdSongMyTag, error) {
// true
// uuid
// DjmdSongMyTag
// DjmdSongMyTagByUUID
// false
// false
func (c *Client) DjmdSongMyTagByUUID(ctx context.Context, uuid sql.NullString) ([]*DjmdSongMyTag, error) {
	// func DjmdSongMyTagByUUID(ctx context.Context, db DB, uuid sql.NullString) ([]*DjmdSongMyTag, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, MyTagID, ContentID, TrackNo, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdSongMyTag ` +
		`WHERE UUID = $1`
	// run
	logf(sqlstr, uuid)
	rows, err := db.QueryContext(ctx, sqlstr, uuid)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdSongMyTag
	for rows.Next() {
		dsmt := DjmdSongMyTag{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dsmt.ID, &dsmt.MyTagID, &dsmt.ContentID, &dsmt.TrackNo, &dsmt.UUID, &dsmt.RbDataStatus, &dsmt.RbLocalDataStatus, &dsmt.RbLocalDeleted, &dsmt.RbLocalSynced, &dsmt.Usn, &dsmt.RbLocalUsn, &dsmt.CreatedAt, &dsmt.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dsmt)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdSongMyTagByRbDataStatus retrieves a row from 'djmdSongMyTag' as a DjmdSongMyTag.
//
// Generated from index 'djmd_song_my_tag_rb_data_status'.
// func (dsmt *DjmdSongMyTag) djmdSongMyTag(db DB) (error)
// func DjmdSongMyTagByRbDataStatus(ctx context.Context, db DB, rbDataStatus sql.NullInt64) ([]*DjmdSongMyTag, error) {
// DjmdSongMyTagByRbDataStatus {
// func DjmdSongMyTagByRbDataStatus(db DB, rbDataStatus sql.NullInt64) ([]*DjmdSongMyTag, error) {
// true
// rbDataStatus
// DjmdSongMyTag
// DjmdSongMyTagByRbDataStatus
// false
// false
func (c *Client) DjmdSongMyTagByRbDataStatus(ctx context.Context, rbDataStatus sql.NullInt64) ([]*DjmdSongMyTag, error) {
	// func DjmdSongMyTagByRbDataStatus(ctx context.Context, db DB, rbDataStatus sql.NullInt64) ([]*DjmdSongMyTag, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, MyTagID, ContentID, TrackNo, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdSongMyTag ` +
		`WHERE rb_data_status = $1`
	// run
	logf(sqlstr, rbDataStatus)
	rows, err := db.QueryContext(ctx, sqlstr, rbDataStatus)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdSongMyTag
	for rows.Next() {
		dsmt := DjmdSongMyTag{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dsmt.ID, &dsmt.MyTagID, &dsmt.ContentID, &dsmt.TrackNo, &dsmt.UUID, &dsmt.RbDataStatus, &dsmt.RbLocalDataStatus, &dsmt.RbLocalDeleted, &dsmt.RbLocalSynced, &dsmt.Usn, &dsmt.RbLocalUsn, &dsmt.CreatedAt, &dsmt.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dsmt)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdSongMyTagByRbLocalDataStatus retrieves a row from 'djmdSongMyTag' as a DjmdSongMyTag.
//
// Generated from index 'djmd_song_my_tag_rb_local_data_status'.
// func (dsmt *DjmdSongMyTag) djmdSongMyTag(db DB) (error)
// func DjmdSongMyTagByRbLocalDataStatus(ctx context.Context, db DB, rbLocalDataStatus sql.NullInt64) ([]*DjmdSongMyTag, error) {
// DjmdSongMyTagByRbLocalDataStatus {
// func DjmdSongMyTagByRbLocalDataStatus(db DB, rbLocalDataStatus sql.NullInt64) ([]*DjmdSongMyTag, error) {
// true
// rbLocalDataStatus
// DjmdSongMyTag
// DjmdSongMyTagByRbLocalDataStatus
// false
// false
func (c *Client) DjmdSongMyTagByRbLocalDataStatus(ctx context.Context, rbLocalDataStatus sql.NullInt64) ([]*DjmdSongMyTag, error) {
	// func DjmdSongMyTagByRbLocalDataStatus(ctx context.Context, db DB, rbLocalDataStatus sql.NullInt64) ([]*DjmdSongMyTag, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, MyTagID, ContentID, TrackNo, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdSongMyTag ` +
		`WHERE rb_local_data_status = $1`
	// run
	logf(sqlstr, rbLocalDataStatus)
	rows, err := db.QueryContext(ctx, sqlstr, rbLocalDataStatus)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdSongMyTag
	for rows.Next() {
		dsmt := DjmdSongMyTag{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dsmt.ID, &dsmt.MyTagID, &dsmt.ContentID, &dsmt.TrackNo, &dsmt.UUID, &dsmt.RbDataStatus, &dsmt.RbLocalDataStatus, &dsmt.RbLocalDeleted, &dsmt.RbLocalSynced, &dsmt.Usn, &dsmt.RbLocalUsn, &dsmt.CreatedAt, &dsmt.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dsmt)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdSongMyTagByRbLocalDeleted retrieves a row from 'djmdSongMyTag' as a DjmdSongMyTag.
//
// Generated from index 'djmd_song_my_tag_rb_local_deleted'.
// func (dsmt *DjmdSongMyTag) djmdSongMyTag(db DB) (error)
// func DjmdSongMyTagByRbLocalDeleted(ctx context.Context, db DB, rbLocalDeleted sql.NullInt64) ([]*DjmdSongMyTag, error) {
// DjmdSongMyTagByRbLocalDeleted {
// func DjmdSongMyTagByRbLocalDeleted(db DB, rbLocalDeleted sql.NullInt64) ([]*DjmdSongMyTag, error) {
// true
// rbLocalDeleted
// DjmdSongMyTag
// DjmdSongMyTagByRbLocalDeleted
// false
// false
func (c *Client) DjmdSongMyTagByRbLocalDeleted(ctx context.Context, rbLocalDeleted sql.NullInt64) ([]*DjmdSongMyTag, error) {
	// func DjmdSongMyTagByRbLocalDeleted(ctx context.Context, db DB, rbLocalDeleted sql.NullInt64) ([]*DjmdSongMyTag, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, MyTagID, ContentID, TrackNo, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdSongMyTag ` +
		`WHERE rb_local_deleted = $1`
	// run
	logf(sqlstr, rbLocalDeleted)
	rows, err := db.QueryContext(ctx, sqlstr, rbLocalDeleted)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdSongMyTag
	for rows.Next() {
		dsmt := DjmdSongMyTag{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dsmt.ID, &dsmt.MyTagID, &dsmt.ContentID, &dsmt.TrackNo, &dsmt.UUID, &dsmt.RbDataStatus, &dsmt.RbLocalDataStatus, &dsmt.RbLocalDeleted, &dsmt.RbLocalSynced, &dsmt.Usn, &dsmt.RbLocalUsn, &dsmt.CreatedAt, &dsmt.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dsmt)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdSongMyTagByRbLocalUsnID retrieves a row from 'djmdSongMyTag' as a DjmdSongMyTag.
//
// Generated from index 'djmd_song_my_tag_rb_local_usn__i_d'.
// func (dsmt *DjmdSongMyTag) djmdSongMyTag(db DB) (error)
// func DjmdSongMyTagByRbLocalUsnID(ctx context.Context, db DB, rbLocalUsn sql.NullInt64, id sql.NullString) ([]*DjmdSongMyTag, error) {
// DjmdSongMyTagByRbLocalUsnID {
// func DjmdSongMyTagByRbLocalUsnID(db DB, rbLocalUsn sql.NullInt64, id sql.NullString) ([]*DjmdSongMyTag, error) {
// true
// rbLocalUsn, id
// DjmdSongMyTag
// DjmdSongMyTagByRbLocalUsnID
// false
// false
func (c *Client) DjmdSongMyTagByRbLocalUsnID(ctx context.Context, rbLocalUsn sql.NullInt64, id sql.NullString) ([]*DjmdSongMyTag, error) {
	// func DjmdSongMyTagByRbLocalUsnID(ctx context.Context, db DB, rbLocalUsn sql.NullInt64, id sql.NullString) ([]*DjmdSongMyTag, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, MyTagID, ContentID, TrackNo, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdSongMyTag ` +
		`WHERE rb_local_usn = $1 AND ID = $2`
	// run
	logf(sqlstr, rbLocalUsn, id)
	rows, err := db.QueryContext(ctx, sqlstr, rbLocalUsn, id)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdSongMyTag
	for rows.Next() {
		dsmt := DjmdSongMyTag{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dsmt.ID, &dsmt.MyTagID, &dsmt.ContentID, &dsmt.TrackNo, &dsmt.UUID, &dsmt.RbDataStatus, &dsmt.RbLocalDataStatus, &dsmt.RbLocalDeleted, &dsmt.RbLocalSynced, &dsmt.Usn, &dsmt.RbLocalUsn, &dsmt.CreatedAt, &dsmt.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dsmt)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdSongMyTagByID retrieves a row from 'djmdSongMyTag' as a DjmdSongMyTag.
//
// Generated from index 'sqlite_autoindex_djmdSongMyTag_1'.
// func (dsmt *DjmdSongMyTag) djmdSongMyTag(db DB) (error)
// func DjmdSongMyTagByID(ctx context.Context, db DB, id sql.NullString) (*DjmdSongMyTag, error) {
// DjmdSongMyTagByID {
// func DjmdSongMyTagByID(db DB, id sql.NullString) (*DjmdSongMyTag, error) {
// true
// id
// DjmdSongMyTag
// DjmdSongMyTagByID
// true
// true
func (c *Client) DjmdSongMyTagByID(ctx context.Context, id sql.NullString) (*DjmdSongMyTag, error) {
	// func DjmdSongMyTagByID(ctx context.Context, db DB, id sql.NullString) (*DjmdSongMyTag, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, MyTagID, ContentID, TrackNo, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdSongMyTag ` +
		`WHERE ID = $1`
	// run
	logf(sqlstr, id)
	dsmt := DjmdSongMyTag{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&dsmt.ID, &dsmt.MyTagID, &dsmt.ContentID, &dsmt.TrackNo, &dsmt.UUID, &dsmt.RbDataStatus, &dsmt.RbLocalDataStatus, &dsmt.RbLocalDeleted, &dsmt.RbLocalSynced, &dsmt.Usn, &dsmt.RbLocalUsn, &dsmt.CreatedAt, &dsmt.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &dsmt, nil
}
