package rekordbox

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"

	nulltype "github.com/mattn/go-nulltype"
)

// DjmdCategory represents a row from 'djmdCategory'.
type DjmdCategory struct {
	ID                nulltype.NullString `json:"ID"`                   // ID
	MenuItemID        nulltype.NullString `json:"MenuItemID"`           // MenuItemID
	Seq               nulltype.NullInt64  `json:"Seq"`                  // Seq
	Disable           nulltype.NullInt64  `json:"Disable"`              // Disable
	InfoOrder         nulltype.NullInt64  `json:"InfoOrder"`            // InfoOrder
	UUID              nulltype.NullString `json:"UUID"`                 // UUID
	RbDataStatus      nulltype.NullInt64  `json:"rb_data_status"`       // rb_data_status
	RbLocalDataStatus nulltype.NullInt64  `json:"rb_local_data_status"` // rb_local_data_status
	RbLocalDeleted    nulltype.NullInt64  `json:"rb_local_deleted"`     // rb_local_deleted
	RbLocalSynced     nulltype.NullInt64  `json:"rb_local_synced"`      // rb_local_synced
	Usn               nulltype.NullInt64  `json:"usn"`                  // usn
	RbLocalUsn        nulltype.NullInt64  `json:"rb_local_usn"`         // rb_local_usn
	CreatedAt         Time                `json:"created_at"`           // created_at
	UpdatedAt         Time                `json:"updated_at"`           // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the DjmdCategory exists in the database.
func (dc *DjmdCategory) Exists() bool {
	return dc._exists
}

// Deleted returns true when the DjmdCategory has been marked for deletion from
// the database.
func (dc *DjmdCategory) Deleted() bool {
	return dc._deleted
}

// Insert inserts the DjmdCategory to the database.
func (c *Client) InsertDjmdCategory(ctx context.Context, dc *DjmdCategory) error {
	db := c.db

	switch {
	case dc._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case dc._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO djmdCategory (` +
		`ID, MenuItemID, Seq, Disable, InfoOrder, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14` +
		`)`
	// run
	logf(sqlstr, dc.ID, dc.MenuItemID, dc.Seq, dc.Disable, dc.InfoOrder, dc.UUID, dc.RbDataStatus, dc.RbLocalDataStatus, dc.RbLocalDeleted, dc.RbLocalSynced, dc.Usn, dc.RbLocalUsn, dc.CreatedAt, dc.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, dc.ID, dc.MenuItemID, dc.Seq, dc.Disable, dc.InfoOrder, dc.UUID, dc.RbDataStatus, dc.RbLocalDataStatus, dc.RbLocalDeleted, dc.RbLocalSynced, dc.Usn, dc.RbLocalUsn, dc.CreatedAt, dc.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	dc._exists = true
	return nil
}

// Update updates a DjmdCategory in the database.
func (c *Client) UpdateDjmdCategory(ctx context.Context, dc *DjmdCategory) error {
	db := c.db

	switch {
	case !dc._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case dc._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE djmdCategory SET ` +
		`MenuItemID = $1, Seq = $2, Disable = $3, InfoOrder = $4, UUID = $5, rb_data_status = $6, rb_local_data_status = $7, rb_local_deleted = $8, rb_local_synced = $9, usn = $10, rb_local_usn = $11, created_at = $12, updated_at = $13 ` +
		`WHERE ID = $14`
	// run
	logf(sqlstr, dc.MenuItemID, dc.Seq, dc.Disable, dc.InfoOrder, dc.UUID, dc.RbDataStatus, dc.RbLocalDataStatus, dc.RbLocalDeleted, dc.RbLocalSynced, dc.Usn, dc.RbLocalUsn, dc.CreatedAt, dc.UpdatedAt, dc.ID)
	if _, err := db.ExecContext(ctx, sqlstr, dc.MenuItemID, dc.Seq, dc.Disable, dc.InfoOrder, dc.UUID, dc.RbDataStatus, dc.RbLocalDataStatus, dc.RbLocalDeleted, dc.RbLocalSynced, dc.Usn, dc.RbLocalUsn, dc.CreatedAt, dc.UpdatedAt, dc.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the DjmdCategory to the database.
func (c *Client) SaveDjmdCategory(ctx context.Context, dc *DjmdCategory) error {
	if dc.Exists() {
		return c.UpdateDjmdCategory(ctx, dc)
	}
	return c.InsertDjmdCategory(ctx, dc)
}

// Upsert performs an upsert for DjmdCategory.
func (c *Client) UpsertDjmdCategory(ctx context.Context, dc *DjmdCategory) error {
	db := c.db

	switch {
	case dc._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO djmdCategory (` +
		`ID, MenuItemID, Seq, Disable, InfoOrder, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14` +
		`)` +
		` ON CONFLICT (ID) DO ` +
		`UPDATE SET ` +
		`MenuItemID = EXCLUDED.MenuItemID, Seq = EXCLUDED.Seq, Disable = EXCLUDED.Disable, InfoOrder = EXCLUDED.InfoOrder, UUID = EXCLUDED.UUID, rb_data_status = EXCLUDED.rb_data_status, rb_local_data_status = EXCLUDED.rb_local_data_status, rb_local_deleted = EXCLUDED.rb_local_deleted, rb_local_synced = EXCLUDED.rb_local_synced, usn = EXCLUDED.usn, rb_local_usn = EXCLUDED.rb_local_usn, created_at = EXCLUDED.created_at, updated_at = EXCLUDED.updated_at `
	// run
	logf(sqlstr, dc.ID, dc.MenuItemID, dc.Seq, dc.Disable, dc.InfoOrder, dc.UUID, dc.RbDataStatus, dc.RbLocalDataStatus, dc.RbLocalDeleted, dc.RbLocalSynced, dc.Usn, dc.RbLocalUsn, dc.CreatedAt, dc.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, dc.ID, dc.MenuItemID, dc.Seq, dc.Disable, dc.InfoOrder, dc.UUID, dc.RbDataStatus, dc.RbLocalDataStatus, dc.RbLocalDeleted, dc.RbLocalSynced, dc.Usn, dc.RbLocalUsn, dc.CreatedAt, dc.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	dc._exists = true
	return nil
}

// Delete deletes the DjmdCategory from the database.
func (c *Client) DeleteDjmdCategory(ctx context.Context, dc *DjmdCategory) error {
	db := c.db

	switch {
	case !dc._exists: // doesn't exist
		return nil
	case dc._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM djmdCategory ` +
		`WHERE ID = $1`
	// run
	logf(sqlstr, dc.ID)
	if _, err := db.ExecContext(ctx, sqlstr, dc.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	dc._deleted = true
	return nil
}

func scanDjmdCategoryRows(rows *sql.Rows) ([]*DjmdCategory, error) {
	var res []*DjmdCategory
	for rows.Next() {
		dc := DjmdCategory{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dc.ID, &dc.MenuItemID, &dc.Seq, &dc.Disable, &dc.InfoOrder, &dc.UUID, &dc.RbDataStatus, &dc.RbLocalDataStatus, &dc.RbLocalDeleted, &dc.RbLocalSynced, &dc.Usn, &dc.RbLocalUsn, &dc.CreatedAt, &dc.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dc)
	}

	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

func (c *Client) AllDjmdCategory(ctx context.Context) ([]*DjmdCategory, error) {
	db := c.db

	const sqlstr = `SELECT * FROM DjmdCategory`
	rows, err := db.QueryContext(ctx, sqlstr)
	if err != nil {
		return nil, logerror(err)
	}

	defer rows.Close()
	res, err := scanDjmdCategoryRows(rows)
	if err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdCategoryByUUID retrieves a row from 'djmdCategory' as a DjmdCategory.
//
// Generated from index 'djmd_category__u_u_i_d'.
func (c *Client) DjmdCategoryByUUID(ctx context.Context, uuid nulltype.NullString) ([]*DjmdCategory, error) {
	// func DjmdCategoryByUUID(ctx context.Context, db DB, uuid nulltype.NullString) ([]*DjmdCategory, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, MenuItemID, Seq, Disable, InfoOrder, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdCategory ` +
		`WHERE UUID = $1`
	// run
	logf(sqlstr, uuid)
	rows, err := db.QueryContext(ctx, sqlstr, uuid)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdCategory
	for rows.Next() {
		dc := DjmdCategory{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dc.ID, &dc.MenuItemID, &dc.Seq, &dc.Disable, &dc.InfoOrder, &dc.UUID, &dc.RbDataStatus, &dc.RbLocalDataStatus, &dc.RbLocalDeleted, &dc.RbLocalSynced, &dc.Usn, &dc.RbLocalUsn, &dc.CreatedAt, &dc.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dc)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdCategoryByRbDataStatus retrieves a row from 'djmdCategory' as a DjmdCategory.
//
// Generated from index 'djmd_category_rb_data_status'.
func (c *Client) DjmdCategoryByRbDataStatus(ctx context.Context, rbDataStatus nulltype.NullInt64) ([]*DjmdCategory, error) {
	// func DjmdCategoryByRbDataStatus(ctx context.Context, db DB, rbDataStatus nulltype.NullInt64) ([]*DjmdCategory, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, MenuItemID, Seq, Disable, InfoOrder, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdCategory ` +
		`WHERE rb_data_status = $1`
	// run
	logf(sqlstr, rbDataStatus)
	rows, err := db.QueryContext(ctx, sqlstr, rbDataStatus)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdCategory
	for rows.Next() {
		dc := DjmdCategory{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dc.ID, &dc.MenuItemID, &dc.Seq, &dc.Disable, &dc.InfoOrder, &dc.UUID, &dc.RbDataStatus, &dc.RbLocalDataStatus, &dc.RbLocalDeleted, &dc.RbLocalSynced, &dc.Usn, &dc.RbLocalUsn, &dc.CreatedAt, &dc.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dc)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdCategoryByRbLocalDataStatus retrieves a row from 'djmdCategory' as a DjmdCategory.
//
// Generated from index 'djmd_category_rb_local_data_status'.
func (c *Client) DjmdCategoryByRbLocalDataStatus(ctx context.Context, rbLocalDataStatus nulltype.NullInt64) ([]*DjmdCategory, error) {
	// func DjmdCategoryByRbLocalDataStatus(ctx context.Context, db DB, rbLocalDataStatus nulltype.NullInt64) ([]*DjmdCategory, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, MenuItemID, Seq, Disable, InfoOrder, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdCategory ` +
		`WHERE rb_local_data_status = $1`
	// run
	logf(sqlstr, rbLocalDataStatus)
	rows, err := db.QueryContext(ctx, sqlstr, rbLocalDataStatus)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdCategory
	for rows.Next() {
		dc := DjmdCategory{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dc.ID, &dc.MenuItemID, &dc.Seq, &dc.Disable, &dc.InfoOrder, &dc.UUID, &dc.RbDataStatus, &dc.RbLocalDataStatus, &dc.RbLocalDeleted, &dc.RbLocalSynced, &dc.Usn, &dc.RbLocalUsn, &dc.CreatedAt, &dc.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dc)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdCategoryByRbLocalDeleted retrieves a row from 'djmdCategory' as a DjmdCategory.
//
// Generated from index 'djmd_category_rb_local_deleted'.
func (c *Client) DjmdCategoryByRbLocalDeleted(ctx context.Context, rbLocalDeleted nulltype.NullInt64) ([]*DjmdCategory, error) {
	// func DjmdCategoryByRbLocalDeleted(ctx context.Context, db DB, rbLocalDeleted nulltype.NullInt64) ([]*DjmdCategory, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, MenuItemID, Seq, Disable, InfoOrder, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdCategory ` +
		`WHERE rb_local_deleted = $1`
	// run
	logf(sqlstr, rbLocalDeleted)
	rows, err := db.QueryContext(ctx, sqlstr, rbLocalDeleted)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdCategory
	for rows.Next() {
		dc := DjmdCategory{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dc.ID, &dc.MenuItemID, &dc.Seq, &dc.Disable, &dc.InfoOrder, &dc.UUID, &dc.RbDataStatus, &dc.RbLocalDataStatus, &dc.RbLocalDeleted, &dc.RbLocalSynced, &dc.Usn, &dc.RbLocalUsn, &dc.CreatedAt, &dc.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dc)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdCategoryByRbLocalUsnID retrieves a row from 'djmdCategory' as a DjmdCategory.
//
// Generated from index 'djmd_category_rb_local_usn__i_d'.
func (c *Client) DjmdCategoryByRbLocalUsnID(ctx context.Context, rbLocalUsn nulltype.NullInt64, id nulltype.NullString) ([]*DjmdCategory, error) {
	// func DjmdCategoryByRbLocalUsnID(ctx context.Context, db DB, rbLocalUsn nulltype.NullInt64, id nulltype.NullString) ([]*DjmdCategory, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, MenuItemID, Seq, Disable, InfoOrder, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdCategory ` +
		`WHERE rb_local_usn = $1 AND ID = $2`
	// run
	logf(sqlstr, rbLocalUsn, id)
	rows, err := db.QueryContext(ctx, sqlstr, rbLocalUsn, id)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdCategory
	for rows.Next() {
		dc := DjmdCategory{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dc.ID, &dc.MenuItemID, &dc.Seq, &dc.Disable, &dc.InfoOrder, &dc.UUID, &dc.RbDataStatus, &dc.RbLocalDataStatus, &dc.RbLocalDeleted, &dc.RbLocalSynced, &dc.Usn, &dc.RbLocalUsn, &dc.CreatedAt, &dc.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dc)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdCategoryByID retrieves a row from 'djmdCategory' as a DjmdCategory.
//
// Generated from index 'sqlite_autoindex_djmdCategory_1'.
func (c *Client) DjmdCategoryByID(ctx context.Context, id nulltype.NullString) (*DjmdCategory, error) {
	// func DjmdCategoryByID(ctx context.Context, db DB, id nulltype.NullString) (*DjmdCategory, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, MenuItemID, Seq, Disable, InfoOrder, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdCategory ` +
		`WHERE ID = $1`
	// run
	logf(sqlstr, id)
	dc := DjmdCategory{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&dc.ID, &dc.MenuItemID, &dc.Seq, &dc.Disable, &dc.InfoOrder, &dc.UUID, &dc.RbDataStatus, &dc.RbLocalDataStatus, &dc.RbLocalDeleted, &dc.RbLocalSynced, &dc.Usn, &dc.RbLocalUsn, &dc.CreatedAt, &dc.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &dc, nil
}
