package rekordbox

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// DjmdSongHistory represents a row from 'djmdSongHistory'.
type DjmdSongHistory struct {
	ID                sql.NullString `json:"ID"`                   // ID
	HistoryID         sql.NullString `json:"HistoryID"`            // HistoryID
	ContentID         sql.NullString `json:"ContentID"`            // ContentID
	TrackNo           sql.NullInt64  `json:"TrackNo"`              // TrackNo
	UUID              sql.NullString `json:"UUID"`                 // UUID
	RbDataStatus      sql.NullInt64  `json:"rb_data_status"`       // rb_data_status
	RbLocalDataStatus sql.NullInt64  `json:"rb_local_data_status"` // rb_local_data_status
	RbLocalDeleted    sql.NullInt64  `json:"rb_local_deleted"`     // rb_local_deleted
	RbLocalSynced     sql.NullInt64  `json:"rb_local_synced"`      // rb_local_synced
	Usn               sql.NullInt64  `json:"usn"`                  // usn
	RbLocalUsn        sql.NullInt64  `json:"rb_local_usn"`         // rb_local_usn
	CreatedAt         Time           `json:"created_at"`           // created_at
	UpdatedAt         Time           `json:"updated_at"`           // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the DjmdSongHistory exists in the database.
func (dsh *DjmdSongHistory) Exists() bool {
	return dsh._exists
}

// Deleted returns true when the DjmdSongHistory has been marked for deletion from
// the database.
func (dsh *DjmdSongHistory) Deleted() bool {
	return dsh._deleted
}

// Insert inserts the DjmdSongHistory to the database.
func (c *Client) InsertDjmdSongHistory(ctx context.Context, dsh *DjmdSongHistory) error {
	db := c.db

	switch {
	case dsh._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case dsh._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO djmdSongHistory (` +
		`ID, HistoryID, ContentID, TrackNo, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13` +
		`)`
	// run
	logf(sqlstr, dsh.ID, dsh.HistoryID, dsh.ContentID, dsh.TrackNo, dsh.UUID, dsh.RbDataStatus, dsh.RbLocalDataStatus, dsh.RbLocalDeleted, dsh.RbLocalSynced, dsh.Usn, dsh.RbLocalUsn, dsh.CreatedAt, dsh.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, dsh.ID, dsh.HistoryID, dsh.ContentID, dsh.TrackNo, dsh.UUID, dsh.RbDataStatus, dsh.RbLocalDataStatus, dsh.RbLocalDeleted, dsh.RbLocalSynced, dsh.Usn, dsh.RbLocalUsn, dsh.CreatedAt, dsh.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	dsh._exists = true
	return nil
}

// Update updates a DjmdSongHistory in the database.
func (c *Client) UpdateDjmdSongHistory(ctx context.Context, dsh *DjmdSongHistory) error {
	db := c.db

	switch {
	case !dsh._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case dsh._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE djmdSongHistory SET ` +
		`HistoryID = $1, ContentID = $2, TrackNo = $3, UUID = $4, rb_data_status = $5, rb_local_data_status = $6, rb_local_deleted = $7, rb_local_synced = $8, usn = $9, rb_local_usn = $10, created_at = $11, updated_at = $12 ` +
		`WHERE ID = $13`
	// run
	logf(sqlstr, dsh.HistoryID, dsh.ContentID, dsh.TrackNo, dsh.UUID, dsh.RbDataStatus, dsh.RbLocalDataStatus, dsh.RbLocalDeleted, dsh.RbLocalSynced, dsh.Usn, dsh.RbLocalUsn, dsh.CreatedAt, dsh.UpdatedAt, dsh.ID)
	if _, err := db.ExecContext(ctx, sqlstr, dsh.HistoryID, dsh.ContentID, dsh.TrackNo, dsh.UUID, dsh.RbDataStatus, dsh.RbLocalDataStatus, dsh.RbLocalDeleted, dsh.RbLocalSynced, dsh.Usn, dsh.RbLocalUsn, dsh.CreatedAt, dsh.UpdatedAt, dsh.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the DjmdSongHistory to the database.
func (c *Client) SaveDjmdSongHistory(ctx context.Context, dsh *DjmdSongHistory) error {
	if dsh.Exists() {
		return c.UpdateDjmdSongHistory(ctx, dsh)
	}
	return c.InsertDjmdSongHistory(ctx, dsh)
}

// Upsert performs an upsert for DjmdSongHistory.
func (c *Client) UpsertDjmdSongHistory(ctx context.Context, dsh *DjmdSongHistory) error {
	db := c.db

	switch {
	case dsh._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO djmdSongHistory (` +
		`ID, HistoryID, ContentID, TrackNo, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13` +
		`)` +
		` ON CONFLICT (ID) DO ` +
		`UPDATE SET ` +
		`HistoryID = EXCLUDED.HistoryID, ContentID = EXCLUDED.ContentID, TrackNo = EXCLUDED.TrackNo, UUID = EXCLUDED.UUID, rb_data_status = EXCLUDED.rb_data_status, rb_local_data_status = EXCLUDED.rb_local_data_status, rb_local_deleted = EXCLUDED.rb_local_deleted, rb_local_synced = EXCLUDED.rb_local_synced, usn = EXCLUDED.usn, rb_local_usn = EXCLUDED.rb_local_usn, created_at = EXCLUDED.created_at, updated_at = EXCLUDED.updated_at `
	// run
	logf(sqlstr, dsh.ID, dsh.HistoryID, dsh.ContentID, dsh.TrackNo, dsh.UUID, dsh.RbDataStatus, dsh.RbLocalDataStatus, dsh.RbLocalDeleted, dsh.RbLocalSynced, dsh.Usn, dsh.RbLocalUsn, dsh.CreatedAt, dsh.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, dsh.ID, dsh.HistoryID, dsh.ContentID, dsh.TrackNo, dsh.UUID, dsh.RbDataStatus, dsh.RbLocalDataStatus, dsh.RbLocalDeleted, dsh.RbLocalSynced, dsh.Usn, dsh.RbLocalUsn, dsh.CreatedAt, dsh.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	dsh._exists = true
	return nil
}

// Delete deletes the DjmdSongHistory from the database.
func (c *Client) DeleteDjmdSongHistory(ctx context.Context, dsh *DjmdSongHistory) error {
	db := c.db

	switch {
	case !dsh._exists: // doesn't exist
		return nil
	case dsh._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM djmdSongHistory ` +
		`WHERE ID = $1`
	// run
	logf(sqlstr, dsh.ID)
	if _, err := db.ExecContext(ctx, sqlstr, dsh.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	dsh._deleted = true
	return nil
}

func scanDjmdSongHistoryRows(rows *sql.Rows) ([]*DjmdSongHistory, error) {
	var res []*DjmdSongHistory
	for rows.Next() {
		dsh := DjmdSongHistory{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dsh.ID, &dsh.HistoryID, &dsh.ContentID, &dsh.TrackNo, &dsh.UUID, &dsh.RbDataStatus, &dsh.RbLocalDataStatus, &dsh.RbLocalDeleted, &dsh.RbLocalSynced, &dsh.Usn, &dsh.RbLocalUsn, &dsh.CreatedAt, &dsh.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dsh)
	}

	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

func (c *Client) AllDjmdSongHistory(ctx context.Context) ([]*DjmdSongHistory, error) {
	db := c.db

	const sqlstr = `SELECT * FROM DjmdSongHistory`
	rows, err := db.QueryContext(ctx, sqlstr)
	if err != nil {
		return nil, logerror(err)
	}

	defer rows.Close()
	res, err := scanDjmdSongHistoryRows(rows)
	if err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdSongHistoryByContentID retrieves a row from 'djmdSongHistory' as a DjmdSongHistory.
//
// Generated from index 'djmd_song_history__content_i_d'.
func (c *Client) DjmdSongHistoryByContentID(ctx context.Context, contentID sql.NullString) ([]*DjmdSongHistory, error) {
	// func DjmdSongHistoryByContentID(ctx context.Context, db DB, contentID sql.NullString) ([]*DjmdSongHistory, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, HistoryID, ContentID, TrackNo, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdSongHistory ` +
		`WHERE ContentID = $1`
	// run
	logf(sqlstr, contentID)
	rows, err := db.QueryContext(ctx, sqlstr, contentID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdSongHistory
	for rows.Next() {
		dsh := DjmdSongHistory{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dsh.ID, &dsh.HistoryID, &dsh.ContentID, &dsh.TrackNo, &dsh.UUID, &dsh.RbDataStatus, &dsh.RbLocalDataStatus, &dsh.RbLocalDeleted, &dsh.RbLocalSynced, &dsh.Usn, &dsh.RbLocalUsn, &dsh.CreatedAt, &dsh.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dsh)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdSongHistoryByContentIDRbLocalDeleted retrieves a row from 'djmdSongHistory' as a DjmdSongHistory.
//
// Generated from index 'djmd_song_history__content_i_d_rb_local_deleted'.
func (c *Client) DjmdSongHistoryByContentIDRbLocalDeleted(ctx context.Context, contentID sql.NullString, rbLocalDeleted sql.NullInt64) ([]*DjmdSongHistory, error) {
	// func DjmdSongHistoryByContentIDRbLocalDeleted(ctx context.Context, db DB, contentID sql.NullString, rbLocalDeleted sql.NullInt64) ([]*DjmdSongHistory, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, HistoryID, ContentID, TrackNo, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdSongHistory ` +
		`WHERE ContentID = $1 AND rb_local_deleted = $2`
	// run
	logf(sqlstr, contentID, rbLocalDeleted)
	rows, err := db.QueryContext(ctx, sqlstr, contentID, rbLocalDeleted)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdSongHistory
	for rows.Next() {
		dsh := DjmdSongHistory{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dsh.ID, &dsh.HistoryID, &dsh.ContentID, &dsh.TrackNo, &dsh.UUID, &dsh.RbDataStatus, &dsh.RbLocalDataStatus, &dsh.RbLocalDeleted, &dsh.RbLocalSynced, &dsh.Usn, &dsh.RbLocalUsn, &dsh.CreatedAt, &dsh.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dsh)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdSongHistoryByHistoryID retrieves a row from 'djmdSongHistory' as a DjmdSongHistory.
//
// Generated from index 'djmd_song_history__history_i_d'.
func (c *Client) DjmdSongHistoryByHistoryID(ctx context.Context, historyID sql.NullString) ([]*DjmdSongHistory, error) {
	// func DjmdSongHistoryByHistoryID(ctx context.Context, db DB, historyID sql.NullString) ([]*DjmdSongHistory, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, HistoryID, ContentID, TrackNo, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdSongHistory ` +
		`WHERE HistoryID = $1`
	// run
	logf(sqlstr, historyID)
	rows, err := db.QueryContext(ctx, sqlstr, historyID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdSongHistory
	for rows.Next() {
		dsh := DjmdSongHistory{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dsh.ID, &dsh.HistoryID, &dsh.ContentID, &dsh.TrackNo, &dsh.UUID, &dsh.RbDataStatus, &dsh.RbLocalDataStatus, &dsh.RbLocalDeleted, &dsh.RbLocalSynced, &dsh.Usn, &dsh.RbLocalUsn, &dsh.CreatedAt, &dsh.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dsh)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdSongHistoryByUUID retrieves a row from 'djmdSongHistory' as a DjmdSongHistory.
//
// Generated from index 'djmd_song_history__u_u_i_d'.
func (c *Client) DjmdSongHistoryByUUID(ctx context.Context, uuid sql.NullString) ([]*DjmdSongHistory, error) {
	// func DjmdSongHistoryByUUID(ctx context.Context, db DB, uuid sql.NullString) ([]*DjmdSongHistory, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, HistoryID, ContentID, TrackNo, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdSongHistory ` +
		`WHERE UUID = $1`
	// run
	logf(sqlstr, uuid)
	rows, err := db.QueryContext(ctx, sqlstr, uuid)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdSongHistory
	for rows.Next() {
		dsh := DjmdSongHistory{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dsh.ID, &dsh.HistoryID, &dsh.ContentID, &dsh.TrackNo, &dsh.UUID, &dsh.RbDataStatus, &dsh.RbLocalDataStatus, &dsh.RbLocalDeleted, &dsh.RbLocalSynced, &dsh.Usn, &dsh.RbLocalUsn, &dsh.CreatedAt, &dsh.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dsh)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdSongHistoryByRbDataStatus retrieves a row from 'djmdSongHistory' as a DjmdSongHistory.
//
// Generated from index 'djmd_song_history_rb_data_status'.
func (c *Client) DjmdSongHistoryByRbDataStatus(ctx context.Context, rbDataStatus sql.NullInt64) ([]*DjmdSongHistory, error) {
	// func DjmdSongHistoryByRbDataStatus(ctx context.Context, db DB, rbDataStatus sql.NullInt64) ([]*DjmdSongHistory, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, HistoryID, ContentID, TrackNo, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdSongHistory ` +
		`WHERE rb_data_status = $1`
	// run
	logf(sqlstr, rbDataStatus)
	rows, err := db.QueryContext(ctx, sqlstr, rbDataStatus)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdSongHistory
	for rows.Next() {
		dsh := DjmdSongHistory{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dsh.ID, &dsh.HistoryID, &dsh.ContentID, &dsh.TrackNo, &dsh.UUID, &dsh.RbDataStatus, &dsh.RbLocalDataStatus, &dsh.RbLocalDeleted, &dsh.RbLocalSynced, &dsh.Usn, &dsh.RbLocalUsn, &dsh.CreatedAt, &dsh.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dsh)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdSongHistoryByRbLocalDataStatus retrieves a row from 'djmdSongHistory' as a DjmdSongHistory.
//
// Generated from index 'djmd_song_history_rb_local_data_status'.
func (c *Client) DjmdSongHistoryByRbLocalDataStatus(ctx context.Context, rbLocalDataStatus sql.NullInt64) ([]*DjmdSongHistory, error) {
	// func DjmdSongHistoryByRbLocalDataStatus(ctx context.Context, db DB, rbLocalDataStatus sql.NullInt64) ([]*DjmdSongHistory, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, HistoryID, ContentID, TrackNo, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdSongHistory ` +
		`WHERE rb_local_data_status = $1`
	// run
	logf(sqlstr, rbLocalDataStatus)
	rows, err := db.QueryContext(ctx, sqlstr, rbLocalDataStatus)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdSongHistory
	for rows.Next() {
		dsh := DjmdSongHistory{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dsh.ID, &dsh.HistoryID, &dsh.ContentID, &dsh.TrackNo, &dsh.UUID, &dsh.RbDataStatus, &dsh.RbLocalDataStatus, &dsh.RbLocalDeleted, &dsh.RbLocalSynced, &dsh.Usn, &dsh.RbLocalUsn, &dsh.CreatedAt, &dsh.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dsh)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdSongHistoryByRbLocalDeleted retrieves a row from 'djmdSongHistory' as a DjmdSongHistory.
//
// Generated from index 'djmd_song_history_rb_local_deleted'.
func (c *Client) DjmdSongHistoryByRbLocalDeleted(ctx context.Context, rbLocalDeleted sql.NullInt64) ([]*DjmdSongHistory, error) {
	// func DjmdSongHistoryByRbLocalDeleted(ctx context.Context, db DB, rbLocalDeleted sql.NullInt64) ([]*DjmdSongHistory, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, HistoryID, ContentID, TrackNo, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdSongHistory ` +
		`WHERE rb_local_deleted = $1`
	// run
	logf(sqlstr, rbLocalDeleted)
	rows, err := db.QueryContext(ctx, sqlstr, rbLocalDeleted)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdSongHistory
	for rows.Next() {
		dsh := DjmdSongHistory{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dsh.ID, &dsh.HistoryID, &dsh.ContentID, &dsh.TrackNo, &dsh.UUID, &dsh.RbDataStatus, &dsh.RbLocalDataStatus, &dsh.RbLocalDeleted, &dsh.RbLocalSynced, &dsh.Usn, &dsh.RbLocalUsn, &dsh.CreatedAt, &dsh.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dsh)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdSongHistoryByRbLocalUsnID retrieves a row from 'djmdSongHistory' as a DjmdSongHistory.
//
// Generated from index 'djmd_song_history_rb_local_usn__i_d'.
func (c *Client) DjmdSongHistoryByRbLocalUsnID(ctx context.Context, rbLocalUsn sql.NullInt64, id sql.NullString) ([]*DjmdSongHistory, error) {
	// func DjmdSongHistoryByRbLocalUsnID(ctx context.Context, db DB, rbLocalUsn sql.NullInt64, id sql.NullString) ([]*DjmdSongHistory, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, HistoryID, ContentID, TrackNo, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdSongHistory ` +
		`WHERE rb_local_usn = $1 AND ID = $2`
	// run
	logf(sqlstr, rbLocalUsn, id)
	rows, err := db.QueryContext(ctx, sqlstr, rbLocalUsn, id)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdSongHistory
	for rows.Next() {
		dsh := DjmdSongHistory{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dsh.ID, &dsh.HistoryID, &dsh.ContentID, &dsh.TrackNo, &dsh.UUID, &dsh.RbDataStatus, &dsh.RbLocalDataStatus, &dsh.RbLocalDeleted, &dsh.RbLocalSynced, &dsh.Usn, &dsh.RbLocalUsn, &dsh.CreatedAt, &dsh.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dsh)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdSongHistoryByID retrieves a row from 'djmdSongHistory' as a DjmdSongHistory.
//
// Generated from index 'sqlite_autoindex_djmdSongHistory_1'.
func (c *Client) DjmdSongHistoryByID(ctx context.Context, id sql.NullString) (*DjmdSongHistory, error) {
	// func DjmdSongHistoryByID(ctx context.Context, db DB, id sql.NullString) (*DjmdSongHistory, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, HistoryID, ContentID, TrackNo, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdSongHistory ` +
		`WHERE ID = $1`
	// run
	logf(sqlstr, id)
	dsh := DjmdSongHistory{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&dsh.ID, &dsh.HistoryID, &dsh.ContentID, &dsh.TrackNo, &dsh.UUID, &dsh.RbDataStatus, &dsh.RbLocalDataStatus, &dsh.RbLocalDeleted, &dsh.RbLocalSynced, &dsh.Usn, &dsh.RbLocalUsn, &dsh.CreatedAt, &dsh.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &dsh, nil
}
