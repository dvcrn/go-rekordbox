package rekordbox

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"

	nulltype "github.com/mattn/go-nulltype"
)

// ContentCue represents a row from 'contentCue'.
type ContentCue struct {
	ID                nulltype.NullString `json:"id"`                   // ID
	ContentID         nulltype.NullString `json:"content_id"`           // ContentID
	Cues              nulltype.NullString `json:"cues"`                 // Cues
	RbCueCount        nulltype.NullInt64  `json:"rb_cue_count"`         // rb_cue_count
	UUID              nulltype.NullString `json:"uuid"`                 // UUID
	RbDataStatus      nulltype.NullInt64  `json:"rb_data_status"`       // rb_data_status
	RbLocalDataStatus nulltype.NullInt64  `json:"rb_local_data_status"` // rb_local_data_status
	RbLocalDeleted    nulltype.NullInt64  `json:"rb_local_deleted"`     // rb_local_deleted
	RbLocalSynced     nulltype.NullInt64  `json:"rb_local_synced"`      // rb_local_synced
	Usn               nulltype.NullInt64  `json:"usn"`                  // usn
	RbLocalUsn        nulltype.NullInt64  `json:"rb_local_usn"`         // rb_local_usn
	CreatedAt         Time                `json:"created_at"`           // created_at
	UpdatedAt         Time                `json:"updated_at"`           // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the ContentCue exists in the database.
func (cc *ContentCue) Exists() bool {
	return cc._exists
}

// Deleted returns true when the ContentCue has been marked for deletion from
// the database.
func (cc *ContentCue) Deleted() bool {
	return cc._deleted
}

// Insert inserts the ContentCue to the database.
func (c *Client) InsertContentCue(ctx context.Context, cc *ContentCue) error {
	db := c.db

	switch {
	case cc._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case cc._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO contentCue (` +
		`ID, ContentID, Cues, rb_cue_count, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13` +
		`)`
	// run
	logf(sqlstr, cc.ID, cc.ContentID, cc.Cues, cc.RbCueCount, cc.UUID, cc.RbDataStatus, cc.RbLocalDataStatus, cc.RbLocalDeleted, cc.RbLocalSynced, cc.Usn, cc.RbLocalUsn, cc.CreatedAt, cc.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, cc.ID, cc.ContentID, cc.Cues, cc.RbCueCount, cc.UUID, cc.RbDataStatus, cc.RbLocalDataStatus, cc.RbLocalDeleted, cc.RbLocalSynced, cc.Usn, cc.RbLocalUsn, cc.CreatedAt, cc.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	cc._exists = true
	return nil
}

// Update updates a ContentCue in the database.
func (c *Client) UpdateContentCue(ctx context.Context, cc *ContentCue) error {
	db := c.db

	switch {
	case !cc._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case cc._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE contentCue SET ` +
		`ContentID = $1, Cues = $2, rb_cue_count = $3, UUID = $4, rb_data_status = $5, rb_local_data_status = $6, rb_local_deleted = $7, rb_local_synced = $8, usn = $9, rb_local_usn = $10, created_at = $11, updated_at = $12 ` +
		`WHERE ID = $13`
	// run
	logf(sqlstr, cc.ContentID, cc.Cues, cc.RbCueCount, cc.UUID, cc.RbDataStatus, cc.RbLocalDataStatus, cc.RbLocalDeleted, cc.RbLocalSynced, cc.Usn, cc.RbLocalUsn, cc.CreatedAt, cc.UpdatedAt, cc.ID)
	if _, err := db.ExecContext(ctx, sqlstr, cc.ContentID, cc.Cues, cc.RbCueCount, cc.UUID, cc.RbDataStatus, cc.RbLocalDataStatus, cc.RbLocalDeleted, cc.RbLocalSynced, cc.Usn, cc.RbLocalUsn, cc.CreatedAt, cc.UpdatedAt, cc.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the ContentCue to the database.
func (c *Client) SaveContentCue(ctx context.Context, cc *ContentCue) error {
	if cc.Exists() {
		return c.UpdateContentCue(ctx, cc)
	}
	return c.InsertContentCue(ctx, cc)
}

// Upsert performs an upsert for ContentCue.
func (c *Client) UpsertContentCue(ctx context.Context, cc *ContentCue) error {
	db := c.db

	switch {
	case cc._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO contentCue (` +
		`ID, ContentID, Cues, rb_cue_count, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13` +
		`)` +
		` ON CONFLICT (ID) DO ` +
		`UPDATE SET ` +
		`ContentID = EXCLUDED.ContentID, Cues = EXCLUDED.Cues, rb_cue_count = EXCLUDED.rb_cue_count, UUID = EXCLUDED.UUID, rb_data_status = EXCLUDED.rb_data_status, rb_local_data_status = EXCLUDED.rb_local_data_status, rb_local_deleted = EXCLUDED.rb_local_deleted, rb_local_synced = EXCLUDED.rb_local_synced, usn = EXCLUDED.usn, rb_local_usn = EXCLUDED.rb_local_usn, created_at = EXCLUDED.created_at, updated_at = EXCLUDED.updated_at `
	// run
	logf(sqlstr, cc.ID, cc.ContentID, cc.Cues, cc.RbCueCount, cc.UUID, cc.RbDataStatus, cc.RbLocalDataStatus, cc.RbLocalDeleted, cc.RbLocalSynced, cc.Usn, cc.RbLocalUsn, cc.CreatedAt, cc.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, cc.ID, cc.ContentID, cc.Cues, cc.RbCueCount, cc.UUID, cc.RbDataStatus, cc.RbLocalDataStatus, cc.RbLocalDeleted, cc.RbLocalSynced, cc.Usn, cc.RbLocalUsn, cc.CreatedAt, cc.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	cc._exists = true
	return nil
}

// Delete deletes the ContentCue from the database.
func (c *Client) DeleteContentCue(ctx context.Context, cc *ContentCue) error {
	db := c.db

	switch {
	case !cc._exists: // doesn't exist
		return nil
	case cc._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM contentCue ` +
		`WHERE ID = $1`
	// run
	logf(sqlstr, cc.ID)
	if _, err := db.ExecContext(ctx, sqlstr, cc.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	cc._deleted = true
	return nil
}

func scanContentCueRows(rows *sql.Rows) ([]*ContentCue, error) {
	var res []*ContentCue
	for rows.Next() {
		cc := ContentCue{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&cc.ID, &cc.ContentID, &cc.Cues, &cc.RbCueCount, &cc.UUID, &cc.RbDataStatus, &cc.RbLocalDataStatus, &cc.RbLocalDeleted, &cc.RbLocalSynced, &cc.Usn, &cc.RbLocalUsn, &cc.CreatedAt, &cc.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &cc)
	}

	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

func (c *Client) AllContentCue(ctx context.Context) ([]*ContentCue, error) {
	db := c.db

	const sqlstr = `SELECT * FROM ContentCue`
	rows, err := db.QueryContext(ctx, sqlstr)
	if err != nil {
		return nil, logerror(err)
	}

	defer rows.Close()
	res, err := scanContentCueRows(rows)
	if err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// ContentCueByContentID retrieves a row from 'contentCue' as a ContentCue.
//
// Generated from index 'content_cue__content_i_d'.
func (c *Client) ContentCueByContentID(ctx context.Context, contentID nulltype.NullString) ([]*ContentCue, error) {
	// func ContentCueByContentID(ctx context.Context, db DB, contentID nulltype.NullString) ([]*ContentCue, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, ContentID, Cues, rb_cue_count, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM contentCue ` +
		`WHERE ContentID = $1`
	// run
	logf(sqlstr, contentID)
	rows, err := db.QueryContext(ctx, sqlstr, contentID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*ContentCue
	for rows.Next() {
		cc := ContentCue{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&cc.ID, &cc.ContentID, &cc.Cues, &cc.RbCueCount, &cc.UUID, &cc.RbDataStatus, &cc.RbLocalDataStatus, &cc.RbLocalDeleted, &cc.RbLocalSynced, &cc.Usn, &cc.RbLocalUsn, &cc.CreatedAt, &cc.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &cc)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// ContentCueByUUID retrieves a row from 'contentCue' as a ContentCue.
//
// Generated from index 'content_cue__u_u_i_d'.
func (c *Client) ContentCueByUUID(ctx context.Context, uuid nulltype.NullString) ([]*ContentCue, error) {
	// func ContentCueByUUID(ctx context.Context, db DB, uuid nulltype.NullString) ([]*ContentCue, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, ContentID, Cues, rb_cue_count, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM contentCue ` +
		`WHERE UUID = $1`
	// run
	logf(sqlstr, uuid)
	rows, err := db.QueryContext(ctx, sqlstr, uuid)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*ContentCue
	for rows.Next() {
		cc := ContentCue{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&cc.ID, &cc.ContentID, &cc.Cues, &cc.RbCueCount, &cc.UUID, &cc.RbDataStatus, &cc.RbLocalDataStatus, &cc.RbLocalDeleted, &cc.RbLocalSynced, &cc.Usn, &cc.RbLocalUsn, &cc.CreatedAt, &cc.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &cc)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// ContentCueByRbCueCount retrieves a row from 'contentCue' as a ContentCue.
//
// Generated from index 'content_cue_rb_cue_count'.
func (c *Client) ContentCueByRbCueCount(ctx context.Context, rbCueCount nulltype.NullInt64) ([]*ContentCue, error) {
	// func ContentCueByRbCueCount(ctx context.Context, db DB, rbCueCount nulltype.NullInt64) ([]*ContentCue, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, ContentID, Cues, rb_cue_count, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM contentCue ` +
		`WHERE rb_cue_count = $1`
	// run
	logf(sqlstr, rbCueCount)
	rows, err := db.QueryContext(ctx, sqlstr, rbCueCount)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*ContentCue
	for rows.Next() {
		cc := ContentCue{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&cc.ID, &cc.ContentID, &cc.Cues, &cc.RbCueCount, &cc.UUID, &cc.RbDataStatus, &cc.RbLocalDataStatus, &cc.RbLocalDeleted, &cc.RbLocalSynced, &cc.Usn, &cc.RbLocalUsn, &cc.CreatedAt, &cc.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &cc)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// ContentCueByRbDataStatus retrieves a row from 'contentCue' as a ContentCue.
//
// Generated from index 'content_cue_rb_data_status'.
func (c *Client) ContentCueByRbDataStatus(ctx context.Context, rbDataStatus nulltype.NullInt64) ([]*ContentCue, error) {
	// func ContentCueByRbDataStatus(ctx context.Context, db DB, rbDataStatus nulltype.NullInt64) ([]*ContentCue, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, ContentID, Cues, rb_cue_count, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM contentCue ` +
		`WHERE rb_data_status = $1`
	// run
	logf(sqlstr, rbDataStatus)
	rows, err := db.QueryContext(ctx, sqlstr, rbDataStatus)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*ContentCue
	for rows.Next() {
		cc := ContentCue{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&cc.ID, &cc.ContentID, &cc.Cues, &cc.RbCueCount, &cc.UUID, &cc.RbDataStatus, &cc.RbLocalDataStatus, &cc.RbLocalDeleted, &cc.RbLocalSynced, &cc.Usn, &cc.RbLocalUsn, &cc.CreatedAt, &cc.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &cc)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// ContentCueByRbLocalDataStatus retrieves a row from 'contentCue' as a ContentCue.
//
// Generated from index 'content_cue_rb_local_data_status'.
func (c *Client) ContentCueByRbLocalDataStatus(ctx context.Context, rbLocalDataStatus nulltype.NullInt64) ([]*ContentCue, error) {
	// func ContentCueByRbLocalDataStatus(ctx context.Context, db DB, rbLocalDataStatus nulltype.NullInt64) ([]*ContentCue, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, ContentID, Cues, rb_cue_count, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM contentCue ` +
		`WHERE rb_local_data_status = $1`
	// run
	logf(sqlstr, rbLocalDataStatus)
	rows, err := db.QueryContext(ctx, sqlstr, rbLocalDataStatus)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*ContentCue
	for rows.Next() {
		cc := ContentCue{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&cc.ID, &cc.ContentID, &cc.Cues, &cc.RbCueCount, &cc.UUID, &cc.RbDataStatus, &cc.RbLocalDataStatus, &cc.RbLocalDeleted, &cc.RbLocalSynced, &cc.Usn, &cc.RbLocalUsn, &cc.CreatedAt, &cc.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &cc)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// ContentCueByRbLocalDeleted retrieves a row from 'contentCue' as a ContentCue.
//
// Generated from index 'content_cue_rb_local_deleted'.
func (c *Client) ContentCueByRbLocalDeleted(ctx context.Context, rbLocalDeleted nulltype.NullInt64) ([]*ContentCue, error) {
	// func ContentCueByRbLocalDeleted(ctx context.Context, db DB, rbLocalDeleted nulltype.NullInt64) ([]*ContentCue, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, ContentID, Cues, rb_cue_count, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM contentCue ` +
		`WHERE rb_local_deleted = $1`
	// run
	logf(sqlstr, rbLocalDeleted)
	rows, err := db.QueryContext(ctx, sqlstr, rbLocalDeleted)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*ContentCue
	for rows.Next() {
		cc := ContentCue{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&cc.ID, &cc.ContentID, &cc.Cues, &cc.RbCueCount, &cc.UUID, &cc.RbDataStatus, &cc.RbLocalDataStatus, &cc.RbLocalDeleted, &cc.RbLocalSynced, &cc.Usn, &cc.RbLocalUsn, &cc.CreatedAt, &cc.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &cc)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// ContentCueByRbLocalUsnID retrieves a row from 'contentCue' as a ContentCue.
//
// Generated from index 'content_cue_rb_local_usn__i_d'.
func (c *Client) ContentCueByRbLocalUsnID(ctx context.Context, rbLocalUsn nulltype.NullInt64, id nulltype.NullString) ([]*ContentCue, error) {
	// func ContentCueByRbLocalUsnID(ctx context.Context, db DB, rbLocalUsn nulltype.NullInt64, id nulltype.NullString) ([]*ContentCue, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, ContentID, Cues, rb_cue_count, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM contentCue ` +
		`WHERE rb_local_usn = $1 AND ID = $2`
	// run
	logf(sqlstr, rbLocalUsn, id)
	rows, err := db.QueryContext(ctx, sqlstr, rbLocalUsn, id)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*ContentCue
	for rows.Next() {
		cc := ContentCue{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&cc.ID, &cc.ContentID, &cc.Cues, &cc.RbCueCount, &cc.UUID, &cc.RbDataStatus, &cc.RbLocalDataStatus, &cc.RbLocalDeleted, &cc.RbLocalSynced, &cc.Usn, &cc.RbLocalUsn, &cc.CreatedAt, &cc.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &cc)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// ContentCueByID retrieves a row from 'contentCue' as a ContentCue.
//
// Generated from index 'sqlite_autoindex_contentCue_1'.
func (c *Client) ContentCueByID(ctx context.Context, id nulltype.NullString) (*ContentCue, error) {
	// func ContentCueByID(ctx context.Context, db DB, id nulltype.NullString) (*ContentCue, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, ContentID, Cues, rb_cue_count, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM contentCue ` +
		`WHERE ID = $1`
	// run
	logf(sqlstr, id)
	cc := ContentCue{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&cc.ID, &cc.ContentID, &cc.Cues, &cc.RbCueCount, &cc.UUID, &cc.RbDataStatus, &cc.RbLocalDataStatus, &cc.RbLocalDeleted, &cc.RbLocalSynced, &cc.Usn, &cc.RbLocalUsn, &cc.CreatedAt, &cc.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &cc, nil
}
