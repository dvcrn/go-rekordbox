package rekordbox

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// DjmdSongHotCueBanklist represents a row from 'djmdSongHotCueBanklist'.
type DjmdSongHotCueBanklist struct {
	ID                 sql.NullString `json:"ID"`                   // ID
	HotCueBanklistID   sql.NullString `json:"HotCueBanklistID"`     // HotCueBanklistID
	ContentID          sql.NullString `json:"ContentID"`            // ContentID
	TrackNo            sql.NullInt64  `json:"TrackNo"`              // TrackNo
	CueID              sql.NullString `json:"CueID"`                // CueID
	InMsec             sql.NullInt64  `json:"InMsec"`               // InMsec
	InFrame            sql.NullInt64  `json:"InFrame"`              // InFrame
	InMpegFrame        sql.NullInt64  `json:"InMpegFrame"`          // InMpegFrame
	InMpegAbs          sql.NullInt64  `json:"InMpegAbs"`            // InMpegAbs
	OutMsec            sql.NullInt64  `json:"OutMsec"`              // OutMsec
	OutFrame           sql.NullInt64  `json:"OutFrame"`             // OutFrame
	OutMpegFrame       sql.NullInt64  `json:"OutMpegFrame"`         // OutMpegFrame
	OutMpegAbs         sql.NullInt64  `json:"OutMpegAbs"`           // OutMpegAbs
	Color              sql.NullInt64  `json:"Color"`                // Color
	ColorTableIndex    sql.NullInt64  `json:"ColorTableIndex"`      // ColorTableIndex
	ActiveLoop         sql.NullInt64  `json:"ActiveLoop"`           // ActiveLoop
	Comment            sql.NullString `json:"Comment"`              // Comment
	BeatLoopSize       sql.NullInt64  `json:"BeatLoopSize"`         // BeatLoopSize
	CueMicrosec        sql.NullInt64  `json:"CueMicrosec"`          // CueMicrosec
	InPointSeekInfo    sql.NullString `json:"InPointSeekInfo"`      // InPointSeekInfo
	OutPointSeekInfo   sql.NullString `json:"OutPointSeekInfo"`     // OutPointSeekInfo
	HotCueBanklistUUID sql.NullString `json:"HotCueBanklistUUID"`   // HotCueBanklistUUID
	UUID               sql.NullString `json:"UUID"`                 // UUID
	RbDataStatus       sql.NullInt64  `json:"rb_data_status"`       // rb_data_status
	RbLocalDataStatus  sql.NullInt64  `json:"rb_local_data_status"` // rb_local_data_status
	RbLocalDeleted     sql.NullInt64  `json:"rb_local_deleted"`     // rb_local_deleted
	RbLocalSynced      sql.NullInt64  `json:"rb_local_synced"`      // rb_local_synced
	Usn                sql.NullInt64  `json:"usn"`                  // usn
	RbLocalUsn         sql.NullInt64  `json:"rb_local_usn"`         // rb_local_usn
	CreatedAt          Time           `json:"created_at"`           // created_at
	UpdatedAt          Time           `json:"updated_at"`           // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the DjmdSongHotCueBanklist exists in the database.
func (dshcb *DjmdSongHotCueBanklist) Exists() bool {
	return dshcb._exists
}

// Deleted returns true when the DjmdSongHotCueBanklist has been marked for deletion from
// the database.
func (dshcb *DjmdSongHotCueBanklist) Deleted() bool {
	return dshcb._deleted
}

// Insert inserts the DjmdSongHotCueBanklist to the database.
func (c *Client) InsertDjmdSongHotCueBanklist(ctx context.Context, dshcb *DjmdSongHotCueBanklist) error {
	db := c.db

	switch {
	case dshcb._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case dshcb._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO djmdSongHotCueBanklist (` +
		`ID, HotCueBanklistID, ContentID, TrackNo, CueID, InMsec, InFrame, InMpegFrame, InMpegAbs, OutMsec, OutFrame, OutMpegFrame, OutMpegAbs, Color, ColorTableIndex, ActiveLoop, Comment, BeatLoopSize, CueMicrosec, InPointSeekInfo, OutPointSeekInfo, HotCueBanklistUUID, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31` +
		`)`
	// run
	logf(sqlstr, dshcb.ID, dshcb.HotCueBanklistID, dshcb.ContentID, dshcb.TrackNo, dshcb.CueID, dshcb.InMsec, dshcb.InFrame, dshcb.InMpegFrame, dshcb.InMpegAbs, dshcb.OutMsec, dshcb.OutFrame, dshcb.OutMpegFrame, dshcb.OutMpegAbs, dshcb.Color, dshcb.ColorTableIndex, dshcb.ActiveLoop, dshcb.Comment, dshcb.BeatLoopSize, dshcb.CueMicrosec, dshcb.InPointSeekInfo, dshcb.OutPointSeekInfo, dshcb.HotCueBanklistUUID, dshcb.UUID, dshcb.RbDataStatus, dshcb.RbLocalDataStatus, dshcb.RbLocalDeleted, dshcb.RbLocalSynced, dshcb.Usn, dshcb.RbLocalUsn, dshcb.CreatedAt, dshcb.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, dshcb.ID, dshcb.HotCueBanklistID, dshcb.ContentID, dshcb.TrackNo, dshcb.CueID, dshcb.InMsec, dshcb.InFrame, dshcb.InMpegFrame, dshcb.InMpegAbs, dshcb.OutMsec, dshcb.OutFrame, dshcb.OutMpegFrame, dshcb.OutMpegAbs, dshcb.Color, dshcb.ColorTableIndex, dshcb.ActiveLoop, dshcb.Comment, dshcb.BeatLoopSize, dshcb.CueMicrosec, dshcb.InPointSeekInfo, dshcb.OutPointSeekInfo, dshcb.HotCueBanklistUUID, dshcb.UUID, dshcb.RbDataStatus, dshcb.RbLocalDataStatus, dshcb.RbLocalDeleted, dshcb.RbLocalSynced, dshcb.Usn, dshcb.RbLocalUsn, dshcb.CreatedAt, dshcb.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	dshcb._exists = true
	return nil
}

// Update updates a DjmdSongHotCueBanklist in the database.
func (c *Client) UpdateDjmdSongHotCueBanklist(ctx context.Context, dshcb *DjmdSongHotCueBanklist) error {
	db := c.db

	switch {
	case !dshcb._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case dshcb._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE djmdSongHotCueBanklist SET ` +
		`HotCueBanklistID = $1, ContentID = $2, TrackNo = $3, CueID = $4, InMsec = $5, InFrame = $6, InMpegFrame = $7, InMpegAbs = $8, OutMsec = $9, OutFrame = $10, OutMpegFrame = $11, OutMpegAbs = $12, Color = $13, ColorTableIndex = $14, ActiveLoop = $15, Comment = $16, BeatLoopSize = $17, CueMicrosec = $18, InPointSeekInfo = $19, OutPointSeekInfo = $20, HotCueBanklistUUID = $21, UUID = $22, rb_data_status = $23, rb_local_data_status = $24, rb_local_deleted = $25, rb_local_synced = $26, usn = $27, rb_local_usn = $28, created_at = $29, updated_at = $30 ` +
		`WHERE ID = $31`
	// run
	logf(sqlstr, dshcb.HotCueBanklistID, dshcb.ContentID, dshcb.TrackNo, dshcb.CueID, dshcb.InMsec, dshcb.InFrame, dshcb.InMpegFrame, dshcb.InMpegAbs, dshcb.OutMsec, dshcb.OutFrame, dshcb.OutMpegFrame, dshcb.OutMpegAbs, dshcb.Color, dshcb.ColorTableIndex, dshcb.ActiveLoop, dshcb.Comment, dshcb.BeatLoopSize, dshcb.CueMicrosec, dshcb.InPointSeekInfo, dshcb.OutPointSeekInfo, dshcb.HotCueBanklistUUID, dshcb.UUID, dshcb.RbDataStatus, dshcb.RbLocalDataStatus, dshcb.RbLocalDeleted, dshcb.RbLocalSynced, dshcb.Usn, dshcb.RbLocalUsn, dshcb.CreatedAt, dshcb.UpdatedAt, dshcb.ID)
	if _, err := db.ExecContext(ctx, sqlstr, dshcb.HotCueBanklistID, dshcb.ContentID, dshcb.TrackNo, dshcb.CueID, dshcb.InMsec, dshcb.InFrame, dshcb.InMpegFrame, dshcb.InMpegAbs, dshcb.OutMsec, dshcb.OutFrame, dshcb.OutMpegFrame, dshcb.OutMpegAbs, dshcb.Color, dshcb.ColorTableIndex, dshcb.ActiveLoop, dshcb.Comment, dshcb.BeatLoopSize, dshcb.CueMicrosec, dshcb.InPointSeekInfo, dshcb.OutPointSeekInfo, dshcb.HotCueBanklistUUID, dshcb.UUID, dshcb.RbDataStatus, dshcb.RbLocalDataStatus, dshcb.RbLocalDeleted, dshcb.RbLocalSynced, dshcb.Usn, dshcb.RbLocalUsn, dshcb.CreatedAt, dshcb.UpdatedAt, dshcb.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the DjmdSongHotCueBanklist to the database.
func (c *Client) SaveDjmdSongHotCueBanklist(ctx context.Context, dshcb *DjmdSongHotCueBanklist) error {
	if dshcb.Exists() {
		return c.UpdateDjmdSongHotCueBanklist(ctx, dshcb)
	}
	return c.InsertDjmdSongHotCueBanklist(ctx, dshcb)
}

// Upsert performs an upsert for DjmdSongHotCueBanklist.
func (c *Client) UpsertDjmdSongHotCueBanklist(ctx context.Context, dshcb *DjmdSongHotCueBanklist) error {
	db := c.db

	switch {
	case dshcb._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO djmdSongHotCueBanklist (` +
		`ID, HotCueBanklistID, ContentID, TrackNo, CueID, InMsec, InFrame, InMpegFrame, InMpegAbs, OutMsec, OutFrame, OutMpegFrame, OutMpegAbs, Color, ColorTableIndex, ActiveLoop, Comment, BeatLoopSize, CueMicrosec, InPointSeekInfo, OutPointSeekInfo, HotCueBanklistUUID, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31` +
		`)` +
		` ON CONFLICT (ID) DO ` +
		`UPDATE SET ` +
		`HotCueBanklistID = EXCLUDED.HotCueBanklistID, ContentID = EXCLUDED.ContentID, TrackNo = EXCLUDED.TrackNo, CueID = EXCLUDED.CueID, InMsec = EXCLUDED.InMsec, InFrame = EXCLUDED.InFrame, InMpegFrame = EXCLUDED.InMpegFrame, InMpegAbs = EXCLUDED.InMpegAbs, OutMsec = EXCLUDED.OutMsec, OutFrame = EXCLUDED.OutFrame, OutMpegFrame = EXCLUDED.OutMpegFrame, OutMpegAbs = EXCLUDED.OutMpegAbs, Color = EXCLUDED.Color, ColorTableIndex = EXCLUDED.ColorTableIndex, ActiveLoop = EXCLUDED.ActiveLoop, Comment = EXCLUDED.Comment, BeatLoopSize = EXCLUDED.BeatLoopSize, CueMicrosec = EXCLUDED.CueMicrosec, InPointSeekInfo = EXCLUDED.InPointSeekInfo, OutPointSeekInfo = EXCLUDED.OutPointSeekInfo, HotCueBanklistUUID = EXCLUDED.HotCueBanklistUUID, UUID = EXCLUDED.UUID, rb_data_status = EXCLUDED.rb_data_status, rb_local_data_status = EXCLUDED.rb_local_data_status, rb_local_deleted = EXCLUDED.rb_local_deleted, rb_local_synced = EXCLUDED.rb_local_synced, usn = EXCLUDED.usn, rb_local_usn = EXCLUDED.rb_local_usn, created_at = EXCLUDED.created_at, updated_at = EXCLUDED.updated_at `
	// run
	logf(sqlstr, dshcb.ID, dshcb.HotCueBanklistID, dshcb.ContentID, dshcb.TrackNo, dshcb.CueID, dshcb.InMsec, dshcb.InFrame, dshcb.InMpegFrame, dshcb.InMpegAbs, dshcb.OutMsec, dshcb.OutFrame, dshcb.OutMpegFrame, dshcb.OutMpegAbs, dshcb.Color, dshcb.ColorTableIndex, dshcb.ActiveLoop, dshcb.Comment, dshcb.BeatLoopSize, dshcb.CueMicrosec, dshcb.InPointSeekInfo, dshcb.OutPointSeekInfo, dshcb.HotCueBanklistUUID, dshcb.UUID, dshcb.RbDataStatus, dshcb.RbLocalDataStatus, dshcb.RbLocalDeleted, dshcb.RbLocalSynced, dshcb.Usn, dshcb.RbLocalUsn, dshcb.CreatedAt, dshcb.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, dshcb.ID, dshcb.HotCueBanklistID, dshcb.ContentID, dshcb.TrackNo, dshcb.CueID, dshcb.InMsec, dshcb.InFrame, dshcb.InMpegFrame, dshcb.InMpegAbs, dshcb.OutMsec, dshcb.OutFrame, dshcb.OutMpegFrame, dshcb.OutMpegAbs, dshcb.Color, dshcb.ColorTableIndex, dshcb.ActiveLoop, dshcb.Comment, dshcb.BeatLoopSize, dshcb.CueMicrosec, dshcb.InPointSeekInfo, dshcb.OutPointSeekInfo, dshcb.HotCueBanklistUUID, dshcb.UUID, dshcb.RbDataStatus, dshcb.RbLocalDataStatus, dshcb.RbLocalDeleted, dshcb.RbLocalSynced, dshcb.Usn, dshcb.RbLocalUsn, dshcb.CreatedAt, dshcb.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	dshcb._exists = true
	return nil
}

// Delete deletes the DjmdSongHotCueBanklist from the database.
func (c *Client) DeleteDjmdSongHotCueBanklist(ctx context.Context, dshcb *DjmdSongHotCueBanklist) error {
	db := c.db

	switch {
	case !dshcb._exists: // doesn't exist
		return nil
	case dshcb._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM djmdSongHotCueBanklist ` +
		`WHERE ID = $1`
	// run
	logf(sqlstr, dshcb.ID)
	if _, err := db.ExecContext(ctx, sqlstr, dshcb.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	dshcb._deleted = true
	return nil
}

func (c *Client) AllDjmdSongHotCueBanklist(ctx context.Context) ([]*DjmdSongHotCueBanklist, error) {
	db := c.db

	const sqlstr = `SELECT * FROM DjmdSongHotCueBanklist`
	rows, err := db.QueryContext(ctx, sqlstr)
	if err != nil {
		return nil, logerror(err)
	}

	defer rows.Close()
	// process
	var res []*DjmdSongHotCueBanklist
	for rows.Next() {
		dshcb := DjmdSongHotCueBanklist{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dshcb.ID, &dshcb.HotCueBanklistID, &dshcb.ContentID, &dshcb.TrackNo, &dshcb.CueID, &dshcb.InMsec, &dshcb.InFrame, &dshcb.InMpegFrame, &dshcb.InMpegAbs, &dshcb.OutMsec, &dshcb.OutFrame, &dshcb.OutMpegFrame, &dshcb.OutMpegAbs, &dshcb.Color, &dshcb.ColorTableIndex, &dshcb.ActiveLoop, &dshcb.Comment, &dshcb.BeatLoopSize, &dshcb.CueMicrosec, &dshcb.InPointSeekInfo, &dshcb.OutPointSeekInfo, &dshcb.HotCueBanklistUUID, &dshcb.UUID, &dshcb.RbDataStatus, &dshcb.RbLocalDataStatus, &dshcb.RbLocalDeleted, &dshcb.RbLocalSynced, &dshcb.Usn, &dshcb.RbLocalUsn, &dshcb.CreatedAt, &dshcb.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dshcb)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdSongHotCueBanklistByContentID retrieves a row from 'djmdSongHotCueBanklist' as a DjmdSongHotCueBanklist.
//
// Generated from index 'djmd_song_hot_cue_banklist__content_i_d'.
// func (dshcb *DjmdSongHotCueBanklist) djmdSongHotCueBanklist(db DB) (error)
// func DjmdSongHotCueBanklistByContentID(ctx context.Context, db DB, contentID sql.NullString) ([]*DjmdSongHotCueBanklist, error) {
// DjmdSongHotCueBanklistByContentID {
// func DjmdSongHotCueBanklistByContentID(db DB, contentID sql.NullString) ([]*DjmdSongHotCueBanklist, error) {
// true
// contentID
// DjmdSongHotCueBanklist
// DjmdSongHotCueBanklistByContentID
// false
// false
func (c *Client) DjmdSongHotCueBanklistByContentID(ctx context.Context, contentID sql.NullString) ([]*DjmdSongHotCueBanklist, error) {
	// func DjmdSongHotCueBanklistByContentID(ctx context.Context, db DB, contentID sql.NullString) ([]*DjmdSongHotCueBanklist, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, HotCueBanklistID, ContentID, TrackNo, CueID, InMsec, InFrame, InMpegFrame, InMpegAbs, OutMsec, OutFrame, OutMpegFrame, OutMpegAbs, Color, ColorTableIndex, ActiveLoop, Comment, BeatLoopSize, CueMicrosec, InPointSeekInfo, OutPointSeekInfo, HotCueBanklistUUID, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdSongHotCueBanklist ` +
		`WHERE ContentID = $1`
	// run
	logf(sqlstr, contentID)
	rows, err := db.QueryContext(ctx, sqlstr, contentID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdSongHotCueBanklist
	for rows.Next() {
		dshcb := DjmdSongHotCueBanklist{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dshcb.ID, &dshcb.HotCueBanklistID, &dshcb.ContentID, &dshcb.TrackNo, &dshcb.CueID, &dshcb.InMsec, &dshcb.InFrame, &dshcb.InMpegFrame, &dshcb.InMpegAbs, &dshcb.OutMsec, &dshcb.OutFrame, &dshcb.OutMpegFrame, &dshcb.OutMpegAbs, &dshcb.Color, &dshcb.ColorTableIndex, &dshcb.ActiveLoop, &dshcb.Comment, &dshcb.BeatLoopSize, &dshcb.CueMicrosec, &dshcb.InPointSeekInfo, &dshcb.OutPointSeekInfo, &dshcb.HotCueBanklistUUID, &dshcb.UUID, &dshcb.RbDataStatus, &dshcb.RbLocalDataStatus, &dshcb.RbLocalDeleted, &dshcb.RbLocalSynced, &dshcb.Usn, &dshcb.RbLocalUsn, &dshcb.CreatedAt, &dshcb.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dshcb)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdSongHotCueBanklistByHotCueBanklistID retrieves a row from 'djmdSongHotCueBanklist' as a DjmdSongHotCueBanklist.
//
// Generated from index 'djmd_song_hot_cue_banklist__hot_cue_banklist_i_d'.
// func (dshcb *DjmdSongHotCueBanklist) djmdSongHotCueBanklist(db DB) (error)
// func DjmdSongHotCueBanklistByHotCueBanklistID(ctx context.Context, db DB, hotCueBanklistID sql.NullString) ([]*DjmdSongHotCueBanklist, error) {
// DjmdSongHotCueBanklistByHotCueBanklistID {
// func DjmdSongHotCueBanklistByHotCueBanklistID(db DB, hotCueBanklistID sql.NullString) ([]*DjmdSongHotCueBanklist, error) {
// true
// hotCueBanklistID
// DjmdSongHotCueBanklist
// DjmdSongHotCueBanklistByHotCueBanklistID
// false
// false
func (c *Client) DjmdSongHotCueBanklistByHotCueBanklistID(ctx context.Context, hotCueBanklistID sql.NullString) ([]*DjmdSongHotCueBanklist, error) {
	// func DjmdSongHotCueBanklistByHotCueBanklistID(ctx context.Context, db DB, hotCueBanklistID sql.NullString) ([]*DjmdSongHotCueBanklist, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, HotCueBanklistID, ContentID, TrackNo, CueID, InMsec, InFrame, InMpegFrame, InMpegAbs, OutMsec, OutFrame, OutMpegFrame, OutMpegAbs, Color, ColorTableIndex, ActiveLoop, Comment, BeatLoopSize, CueMicrosec, InPointSeekInfo, OutPointSeekInfo, HotCueBanklistUUID, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdSongHotCueBanklist ` +
		`WHERE HotCueBanklistID = $1`
	// run
	logf(sqlstr, hotCueBanklistID)
	rows, err := db.QueryContext(ctx, sqlstr, hotCueBanklistID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdSongHotCueBanklist
	for rows.Next() {
		dshcb := DjmdSongHotCueBanklist{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dshcb.ID, &dshcb.HotCueBanklistID, &dshcb.ContentID, &dshcb.TrackNo, &dshcb.CueID, &dshcb.InMsec, &dshcb.InFrame, &dshcb.InMpegFrame, &dshcb.InMpegAbs, &dshcb.OutMsec, &dshcb.OutFrame, &dshcb.OutMpegFrame, &dshcb.OutMpegAbs, &dshcb.Color, &dshcb.ColorTableIndex, &dshcb.ActiveLoop, &dshcb.Comment, &dshcb.BeatLoopSize, &dshcb.CueMicrosec, &dshcb.InPointSeekInfo, &dshcb.OutPointSeekInfo, &dshcb.HotCueBanklistUUID, &dshcb.UUID, &dshcb.RbDataStatus, &dshcb.RbLocalDataStatus, &dshcb.RbLocalDeleted, &dshcb.RbLocalSynced, &dshcb.Usn, &dshcb.RbLocalUsn, &dshcb.CreatedAt, &dshcb.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dshcb)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdSongHotCueBanklistByHotCueBanklistUUID retrieves a row from 'djmdSongHotCueBanklist' as a DjmdSongHotCueBanklist.
//
// Generated from index 'djmd_song_hot_cue_banklist__hot_cue_banklist_u_u_i_d'.
// func (dshcb *DjmdSongHotCueBanklist) djmdSongHotCueBanklist(db DB) (error)
// func DjmdSongHotCueBanklistByHotCueBanklistUUID(ctx context.Context, db DB, hotCueBanklistUUID sql.NullString) ([]*DjmdSongHotCueBanklist, error) {
// DjmdSongHotCueBanklistByHotCueBanklistUUID {
// func DjmdSongHotCueBanklistByHotCueBanklistUUID(db DB, hotCueBanklistUUID sql.NullString) ([]*DjmdSongHotCueBanklist, error) {
// true
// hotCueBanklistUUID
// DjmdSongHotCueBanklist
// DjmdSongHotCueBanklistByHotCueBanklistUUID
// false
// false
func (c *Client) DjmdSongHotCueBanklistByHotCueBanklistUUID(ctx context.Context, hotCueBanklistUUID sql.NullString) ([]*DjmdSongHotCueBanklist, error) {
	// func DjmdSongHotCueBanklistByHotCueBanklistUUID(ctx context.Context, db DB, hotCueBanklistUUID sql.NullString) ([]*DjmdSongHotCueBanklist, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, HotCueBanklistID, ContentID, TrackNo, CueID, InMsec, InFrame, InMpegFrame, InMpegAbs, OutMsec, OutFrame, OutMpegFrame, OutMpegAbs, Color, ColorTableIndex, ActiveLoop, Comment, BeatLoopSize, CueMicrosec, InPointSeekInfo, OutPointSeekInfo, HotCueBanklistUUID, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdSongHotCueBanklist ` +
		`WHERE HotCueBanklistUUID = $1`
	// run
	logf(sqlstr, hotCueBanklistUUID)
	rows, err := db.QueryContext(ctx, sqlstr, hotCueBanklistUUID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdSongHotCueBanklist
	for rows.Next() {
		dshcb := DjmdSongHotCueBanklist{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dshcb.ID, &dshcb.HotCueBanklistID, &dshcb.ContentID, &dshcb.TrackNo, &dshcb.CueID, &dshcb.InMsec, &dshcb.InFrame, &dshcb.InMpegFrame, &dshcb.InMpegAbs, &dshcb.OutMsec, &dshcb.OutFrame, &dshcb.OutMpegFrame, &dshcb.OutMpegAbs, &dshcb.Color, &dshcb.ColorTableIndex, &dshcb.ActiveLoop, &dshcb.Comment, &dshcb.BeatLoopSize, &dshcb.CueMicrosec, &dshcb.InPointSeekInfo, &dshcb.OutPointSeekInfo, &dshcb.HotCueBanklistUUID, &dshcb.UUID, &dshcb.RbDataStatus, &dshcb.RbLocalDataStatus, &dshcb.RbLocalDeleted, &dshcb.RbLocalSynced, &dshcb.Usn, &dshcb.RbLocalUsn, &dshcb.CreatedAt, &dshcb.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dshcb)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdSongHotCueBanklistByUUID retrieves a row from 'djmdSongHotCueBanklist' as a DjmdSongHotCueBanklist.
//
// Generated from index 'djmd_song_hot_cue_banklist__u_u_i_d'.
// func (dshcb *DjmdSongHotCueBanklist) djmdSongHotCueBanklist(db DB) (error)
// func DjmdSongHotCueBanklistByUUID(ctx context.Context, db DB, uuid sql.NullString) ([]*DjmdSongHotCueBanklist, error) {
// DjmdSongHotCueBanklistByUUID {
// func DjmdSongHotCueBanklistByUUID(db DB, uuid sql.NullString) ([]*DjmdSongHotCueBanklist, error) {
// true
// uuid
// DjmdSongHotCueBanklist
// DjmdSongHotCueBanklistByUUID
// false
// false
func (c *Client) DjmdSongHotCueBanklistByUUID(ctx context.Context, uuid sql.NullString) ([]*DjmdSongHotCueBanklist, error) {
	// func DjmdSongHotCueBanklistByUUID(ctx context.Context, db DB, uuid sql.NullString) ([]*DjmdSongHotCueBanklist, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, HotCueBanklistID, ContentID, TrackNo, CueID, InMsec, InFrame, InMpegFrame, InMpegAbs, OutMsec, OutFrame, OutMpegFrame, OutMpegAbs, Color, ColorTableIndex, ActiveLoop, Comment, BeatLoopSize, CueMicrosec, InPointSeekInfo, OutPointSeekInfo, HotCueBanklistUUID, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdSongHotCueBanklist ` +
		`WHERE UUID = $1`
	// run
	logf(sqlstr, uuid)
	rows, err := db.QueryContext(ctx, sqlstr, uuid)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdSongHotCueBanklist
	for rows.Next() {
		dshcb := DjmdSongHotCueBanklist{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dshcb.ID, &dshcb.HotCueBanklistID, &dshcb.ContentID, &dshcb.TrackNo, &dshcb.CueID, &dshcb.InMsec, &dshcb.InFrame, &dshcb.InMpegFrame, &dshcb.InMpegAbs, &dshcb.OutMsec, &dshcb.OutFrame, &dshcb.OutMpegFrame, &dshcb.OutMpegAbs, &dshcb.Color, &dshcb.ColorTableIndex, &dshcb.ActiveLoop, &dshcb.Comment, &dshcb.BeatLoopSize, &dshcb.CueMicrosec, &dshcb.InPointSeekInfo, &dshcb.OutPointSeekInfo, &dshcb.HotCueBanklistUUID, &dshcb.UUID, &dshcb.RbDataStatus, &dshcb.RbLocalDataStatus, &dshcb.RbLocalDeleted, &dshcb.RbLocalSynced, &dshcb.Usn, &dshcb.RbLocalUsn, &dshcb.CreatedAt, &dshcb.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dshcb)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdSongHotCueBanklistByRbDataStatus retrieves a row from 'djmdSongHotCueBanklist' as a DjmdSongHotCueBanklist.
//
// Generated from index 'djmd_song_hot_cue_banklist_rb_data_status'.
// func (dshcb *DjmdSongHotCueBanklist) djmdSongHotCueBanklist(db DB) (error)
// func DjmdSongHotCueBanklistByRbDataStatus(ctx context.Context, db DB, rbDataStatus sql.NullInt64) ([]*DjmdSongHotCueBanklist, error) {
// DjmdSongHotCueBanklistByRbDataStatus {
// func DjmdSongHotCueBanklistByRbDataStatus(db DB, rbDataStatus sql.NullInt64) ([]*DjmdSongHotCueBanklist, error) {
// true
// rbDataStatus
// DjmdSongHotCueBanklist
// DjmdSongHotCueBanklistByRbDataStatus
// false
// false
func (c *Client) DjmdSongHotCueBanklistByRbDataStatus(ctx context.Context, rbDataStatus sql.NullInt64) ([]*DjmdSongHotCueBanklist, error) {
	// func DjmdSongHotCueBanklistByRbDataStatus(ctx context.Context, db DB, rbDataStatus sql.NullInt64) ([]*DjmdSongHotCueBanklist, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, HotCueBanklistID, ContentID, TrackNo, CueID, InMsec, InFrame, InMpegFrame, InMpegAbs, OutMsec, OutFrame, OutMpegFrame, OutMpegAbs, Color, ColorTableIndex, ActiveLoop, Comment, BeatLoopSize, CueMicrosec, InPointSeekInfo, OutPointSeekInfo, HotCueBanklistUUID, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdSongHotCueBanklist ` +
		`WHERE rb_data_status = $1`
	// run
	logf(sqlstr, rbDataStatus)
	rows, err := db.QueryContext(ctx, sqlstr, rbDataStatus)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdSongHotCueBanklist
	for rows.Next() {
		dshcb := DjmdSongHotCueBanklist{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dshcb.ID, &dshcb.HotCueBanklistID, &dshcb.ContentID, &dshcb.TrackNo, &dshcb.CueID, &dshcb.InMsec, &dshcb.InFrame, &dshcb.InMpegFrame, &dshcb.InMpegAbs, &dshcb.OutMsec, &dshcb.OutFrame, &dshcb.OutMpegFrame, &dshcb.OutMpegAbs, &dshcb.Color, &dshcb.ColorTableIndex, &dshcb.ActiveLoop, &dshcb.Comment, &dshcb.BeatLoopSize, &dshcb.CueMicrosec, &dshcb.InPointSeekInfo, &dshcb.OutPointSeekInfo, &dshcb.HotCueBanklistUUID, &dshcb.UUID, &dshcb.RbDataStatus, &dshcb.RbLocalDataStatus, &dshcb.RbLocalDeleted, &dshcb.RbLocalSynced, &dshcb.Usn, &dshcb.RbLocalUsn, &dshcb.CreatedAt, &dshcb.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dshcb)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdSongHotCueBanklistByRbLocalDataStatus retrieves a row from 'djmdSongHotCueBanklist' as a DjmdSongHotCueBanklist.
//
// Generated from index 'djmd_song_hot_cue_banklist_rb_local_data_status'.
// func (dshcb *DjmdSongHotCueBanklist) djmdSongHotCueBanklist(db DB) (error)
// func DjmdSongHotCueBanklistByRbLocalDataStatus(ctx context.Context, db DB, rbLocalDataStatus sql.NullInt64) ([]*DjmdSongHotCueBanklist, error) {
// DjmdSongHotCueBanklistByRbLocalDataStatus {
// func DjmdSongHotCueBanklistByRbLocalDataStatus(db DB, rbLocalDataStatus sql.NullInt64) ([]*DjmdSongHotCueBanklist, error) {
// true
// rbLocalDataStatus
// DjmdSongHotCueBanklist
// DjmdSongHotCueBanklistByRbLocalDataStatus
// false
// false
func (c *Client) DjmdSongHotCueBanklistByRbLocalDataStatus(ctx context.Context, rbLocalDataStatus sql.NullInt64) ([]*DjmdSongHotCueBanklist, error) {
	// func DjmdSongHotCueBanklistByRbLocalDataStatus(ctx context.Context, db DB, rbLocalDataStatus sql.NullInt64) ([]*DjmdSongHotCueBanklist, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, HotCueBanklistID, ContentID, TrackNo, CueID, InMsec, InFrame, InMpegFrame, InMpegAbs, OutMsec, OutFrame, OutMpegFrame, OutMpegAbs, Color, ColorTableIndex, ActiveLoop, Comment, BeatLoopSize, CueMicrosec, InPointSeekInfo, OutPointSeekInfo, HotCueBanklistUUID, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdSongHotCueBanklist ` +
		`WHERE rb_local_data_status = $1`
	// run
	logf(sqlstr, rbLocalDataStatus)
	rows, err := db.QueryContext(ctx, sqlstr, rbLocalDataStatus)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdSongHotCueBanklist
	for rows.Next() {
		dshcb := DjmdSongHotCueBanklist{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dshcb.ID, &dshcb.HotCueBanklistID, &dshcb.ContentID, &dshcb.TrackNo, &dshcb.CueID, &dshcb.InMsec, &dshcb.InFrame, &dshcb.InMpegFrame, &dshcb.InMpegAbs, &dshcb.OutMsec, &dshcb.OutFrame, &dshcb.OutMpegFrame, &dshcb.OutMpegAbs, &dshcb.Color, &dshcb.ColorTableIndex, &dshcb.ActiveLoop, &dshcb.Comment, &dshcb.BeatLoopSize, &dshcb.CueMicrosec, &dshcb.InPointSeekInfo, &dshcb.OutPointSeekInfo, &dshcb.HotCueBanklistUUID, &dshcb.UUID, &dshcb.RbDataStatus, &dshcb.RbLocalDataStatus, &dshcb.RbLocalDeleted, &dshcb.RbLocalSynced, &dshcb.Usn, &dshcb.RbLocalUsn, &dshcb.CreatedAt, &dshcb.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dshcb)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdSongHotCueBanklistByRbLocalDeleted retrieves a row from 'djmdSongHotCueBanklist' as a DjmdSongHotCueBanklist.
//
// Generated from index 'djmd_song_hot_cue_banklist_rb_local_deleted'.
// func (dshcb *DjmdSongHotCueBanklist) djmdSongHotCueBanklist(db DB) (error)
// func DjmdSongHotCueBanklistByRbLocalDeleted(ctx context.Context, db DB, rbLocalDeleted sql.NullInt64) ([]*DjmdSongHotCueBanklist, error) {
// DjmdSongHotCueBanklistByRbLocalDeleted {
// func DjmdSongHotCueBanklistByRbLocalDeleted(db DB, rbLocalDeleted sql.NullInt64) ([]*DjmdSongHotCueBanklist, error) {
// true
// rbLocalDeleted
// DjmdSongHotCueBanklist
// DjmdSongHotCueBanklistByRbLocalDeleted
// false
// false
func (c *Client) DjmdSongHotCueBanklistByRbLocalDeleted(ctx context.Context, rbLocalDeleted sql.NullInt64) ([]*DjmdSongHotCueBanklist, error) {
	// func DjmdSongHotCueBanklistByRbLocalDeleted(ctx context.Context, db DB, rbLocalDeleted sql.NullInt64) ([]*DjmdSongHotCueBanklist, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, HotCueBanklistID, ContentID, TrackNo, CueID, InMsec, InFrame, InMpegFrame, InMpegAbs, OutMsec, OutFrame, OutMpegFrame, OutMpegAbs, Color, ColorTableIndex, ActiveLoop, Comment, BeatLoopSize, CueMicrosec, InPointSeekInfo, OutPointSeekInfo, HotCueBanklistUUID, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdSongHotCueBanklist ` +
		`WHERE rb_local_deleted = $1`
	// run
	logf(sqlstr, rbLocalDeleted)
	rows, err := db.QueryContext(ctx, sqlstr, rbLocalDeleted)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdSongHotCueBanklist
	for rows.Next() {
		dshcb := DjmdSongHotCueBanklist{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dshcb.ID, &dshcb.HotCueBanklistID, &dshcb.ContentID, &dshcb.TrackNo, &dshcb.CueID, &dshcb.InMsec, &dshcb.InFrame, &dshcb.InMpegFrame, &dshcb.InMpegAbs, &dshcb.OutMsec, &dshcb.OutFrame, &dshcb.OutMpegFrame, &dshcb.OutMpegAbs, &dshcb.Color, &dshcb.ColorTableIndex, &dshcb.ActiveLoop, &dshcb.Comment, &dshcb.BeatLoopSize, &dshcb.CueMicrosec, &dshcb.InPointSeekInfo, &dshcb.OutPointSeekInfo, &dshcb.HotCueBanklistUUID, &dshcb.UUID, &dshcb.RbDataStatus, &dshcb.RbLocalDataStatus, &dshcb.RbLocalDeleted, &dshcb.RbLocalSynced, &dshcb.Usn, &dshcb.RbLocalUsn, &dshcb.CreatedAt, &dshcb.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dshcb)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdSongHotCueBanklistByRbLocalUsnID retrieves a row from 'djmdSongHotCueBanklist' as a DjmdSongHotCueBanklist.
//
// Generated from index 'djmd_song_hot_cue_banklist_rb_local_usn__i_d'.
// func (dshcb *DjmdSongHotCueBanklist) djmdSongHotCueBanklist(db DB) (error)
// func DjmdSongHotCueBanklistByRbLocalUsnID(ctx context.Context, db DB, rbLocalUsn sql.NullInt64, id sql.NullString) ([]*DjmdSongHotCueBanklist, error) {
// DjmdSongHotCueBanklistByRbLocalUsnID {
// func DjmdSongHotCueBanklistByRbLocalUsnID(db DB, rbLocalUsn sql.NullInt64, id sql.NullString) ([]*DjmdSongHotCueBanklist, error) {
// true
// rbLocalUsn, id
// DjmdSongHotCueBanklist
// DjmdSongHotCueBanklistByRbLocalUsnID
// false
// false
func (c *Client) DjmdSongHotCueBanklistByRbLocalUsnID(ctx context.Context, rbLocalUsn sql.NullInt64, id sql.NullString) ([]*DjmdSongHotCueBanklist, error) {
	// func DjmdSongHotCueBanklistByRbLocalUsnID(ctx context.Context, db DB, rbLocalUsn sql.NullInt64, id sql.NullString) ([]*DjmdSongHotCueBanklist, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, HotCueBanklistID, ContentID, TrackNo, CueID, InMsec, InFrame, InMpegFrame, InMpegAbs, OutMsec, OutFrame, OutMpegFrame, OutMpegAbs, Color, ColorTableIndex, ActiveLoop, Comment, BeatLoopSize, CueMicrosec, InPointSeekInfo, OutPointSeekInfo, HotCueBanklistUUID, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdSongHotCueBanklist ` +
		`WHERE rb_local_usn = $1 AND ID = $2`
	// run
	logf(sqlstr, rbLocalUsn, id)
	rows, err := db.QueryContext(ctx, sqlstr, rbLocalUsn, id)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdSongHotCueBanklist
	for rows.Next() {
		dshcb := DjmdSongHotCueBanklist{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dshcb.ID, &dshcb.HotCueBanklistID, &dshcb.ContentID, &dshcb.TrackNo, &dshcb.CueID, &dshcb.InMsec, &dshcb.InFrame, &dshcb.InMpegFrame, &dshcb.InMpegAbs, &dshcb.OutMsec, &dshcb.OutFrame, &dshcb.OutMpegFrame, &dshcb.OutMpegAbs, &dshcb.Color, &dshcb.ColorTableIndex, &dshcb.ActiveLoop, &dshcb.Comment, &dshcb.BeatLoopSize, &dshcb.CueMicrosec, &dshcb.InPointSeekInfo, &dshcb.OutPointSeekInfo, &dshcb.HotCueBanklistUUID, &dshcb.UUID, &dshcb.RbDataStatus, &dshcb.RbLocalDataStatus, &dshcb.RbLocalDeleted, &dshcb.RbLocalSynced, &dshcb.Usn, &dshcb.RbLocalUsn, &dshcb.CreatedAt, &dshcb.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dshcb)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdSongHotCueBanklistByID retrieves a row from 'djmdSongHotCueBanklist' as a DjmdSongHotCueBanklist.
//
// Generated from index 'sqlite_autoindex_djmdSongHotCueBanklist_1'.
// func (dshcb *DjmdSongHotCueBanklist) djmdSongHotCueBanklist(db DB) (error)
// func DjmdSongHotCueBanklistByID(ctx context.Context, db DB, id sql.NullString) (*DjmdSongHotCueBanklist, error) {
// DjmdSongHotCueBanklistByID {
// func DjmdSongHotCueBanklistByID(db DB, id sql.NullString) (*DjmdSongHotCueBanklist, error) {
// true
// id
// DjmdSongHotCueBanklist
// DjmdSongHotCueBanklistByID
// true
// true
func (c *Client) DjmdSongHotCueBanklistByID(ctx context.Context, id sql.NullString) (*DjmdSongHotCueBanklist, error) {
	// func DjmdSongHotCueBanklistByID(ctx context.Context, db DB, id sql.NullString) (*DjmdSongHotCueBanklist, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, HotCueBanklistID, ContentID, TrackNo, CueID, InMsec, InFrame, InMpegFrame, InMpegAbs, OutMsec, OutFrame, OutMpegFrame, OutMpegAbs, Color, ColorTableIndex, ActiveLoop, Comment, BeatLoopSize, CueMicrosec, InPointSeekInfo, OutPointSeekInfo, HotCueBanklistUUID, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdSongHotCueBanklist ` +
		`WHERE ID = $1`
	// run
	logf(sqlstr, id)
	dshcb := DjmdSongHotCueBanklist{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&dshcb.ID, &dshcb.HotCueBanklistID, &dshcb.ContentID, &dshcb.TrackNo, &dshcb.CueID, &dshcb.InMsec, &dshcb.InFrame, &dshcb.InMpegFrame, &dshcb.InMpegAbs, &dshcb.OutMsec, &dshcb.OutFrame, &dshcb.OutMpegFrame, &dshcb.OutMpegAbs, &dshcb.Color, &dshcb.ColorTableIndex, &dshcb.ActiveLoop, &dshcb.Comment, &dshcb.BeatLoopSize, &dshcb.CueMicrosec, &dshcb.InPointSeekInfo, &dshcb.OutPointSeekInfo, &dshcb.HotCueBanklistUUID, &dshcb.UUID, &dshcb.RbDataStatus, &dshcb.RbLocalDataStatus, &dshcb.RbLocalDeleted, &dshcb.RbLocalSynced, &dshcb.Usn, &dshcb.RbLocalUsn, &dshcb.CreatedAt, &dshcb.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &dshcb, nil
}
