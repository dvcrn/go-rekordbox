package rekordbox

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// DjmdHotCueBanklist represents a row from 'djmdHotCueBanklist'.
type DjmdHotCueBanklist struct {
	ID                sql.NullString `json:"ID"`                   // ID
	Seq               sql.NullInt64  `json:"Seq"`                  // Seq
	Name              sql.NullString `json:"Name"`                 // Name
	ImagePath         sql.NullString `json:"ImagePath"`            // ImagePath
	Attribute         sql.NullInt64  `json:"Attribute"`            // Attribute
	ParentID          sql.NullString `json:"ParentID"`             // ParentID
	UUID              sql.NullString `json:"UUID"`                 // UUID
	RbDataStatus      sql.NullInt64  `json:"rb_data_status"`       // rb_data_status
	RbLocalDataStatus sql.NullInt64  `json:"rb_local_data_status"` // rb_local_data_status
	RbLocalDeleted    sql.NullInt64  `json:"rb_local_deleted"`     // rb_local_deleted
	RbLocalSynced     sql.NullInt64  `json:"rb_local_synced"`      // rb_local_synced
	Usn               sql.NullInt64  `json:"usn"`                  // usn
	RbLocalUsn        sql.NullInt64  `json:"rb_local_usn"`         // rb_local_usn
	CreatedAt         Time           `json:"created_at"`           // created_at
	UpdatedAt         Time           `json:"updated_at"`           // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the DjmdHotCueBanklist exists in the database.
func (dhcb *DjmdHotCueBanklist) Exists() bool {
	return dhcb._exists
}

// Deleted returns true when the DjmdHotCueBanklist has been marked for deletion from
// the database.
func (dhcb *DjmdHotCueBanklist) Deleted() bool {
	return dhcb._deleted
}

// Insert inserts the DjmdHotCueBanklist to the database.
func (c *Client) InsertDjmdHotCueBanklist(ctx context.Context, dhcb *DjmdHotCueBanklist) error {
	db := c.db

	switch {
	case dhcb._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case dhcb._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO djmdHotCueBanklist (` +
		`ID, Seq, Name, ImagePath, Attribute, ParentID, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15` +
		`)`
	// run
	logf(sqlstr, dhcb.ID, dhcb.Seq, dhcb.Name, dhcb.ImagePath, dhcb.Attribute, dhcb.ParentID, dhcb.UUID, dhcb.RbDataStatus, dhcb.RbLocalDataStatus, dhcb.RbLocalDeleted, dhcb.RbLocalSynced, dhcb.Usn, dhcb.RbLocalUsn, dhcb.CreatedAt, dhcb.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, dhcb.ID, dhcb.Seq, dhcb.Name, dhcb.ImagePath, dhcb.Attribute, dhcb.ParentID, dhcb.UUID, dhcb.RbDataStatus, dhcb.RbLocalDataStatus, dhcb.RbLocalDeleted, dhcb.RbLocalSynced, dhcb.Usn, dhcb.RbLocalUsn, dhcb.CreatedAt, dhcb.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	dhcb._exists = true
	return nil
}

// Update updates a DjmdHotCueBanklist in the database.
func (c *Client) UpdateDjmdHotCueBanklist(ctx context.Context, dhcb *DjmdHotCueBanklist) error {
	db := c.db

	switch {
	case !dhcb._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case dhcb._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE djmdHotCueBanklist SET ` +
		`Seq = $1, Name = $2, ImagePath = $3, Attribute = $4, ParentID = $5, UUID = $6, rb_data_status = $7, rb_local_data_status = $8, rb_local_deleted = $9, rb_local_synced = $10, usn = $11, rb_local_usn = $12, created_at = $13, updated_at = $14 ` +
		`WHERE ID = $15`
	// run
	logf(sqlstr, dhcb.Seq, dhcb.Name, dhcb.ImagePath, dhcb.Attribute, dhcb.ParentID, dhcb.UUID, dhcb.RbDataStatus, dhcb.RbLocalDataStatus, dhcb.RbLocalDeleted, dhcb.RbLocalSynced, dhcb.Usn, dhcb.RbLocalUsn, dhcb.CreatedAt, dhcb.UpdatedAt, dhcb.ID)
	if _, err := db.ExecContext(ctx, sqlstr, dhcb.Seq, dhcb.Name, dhcb.ImagePath, dhcb.Attribute, dhcb.ParentID, dhcb.UUID, dhcb.RbDataStatus, dhcb.RbLocalDataStatus, dhcb.RbLocalDeleted, dhcb.RbLocalSynced, dhcb.Usn, dhcb.RbLocalUsn, dhcb.CreatedAt, dhcb.UpdatedAt, dhcb.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the DjmdHotCueBanklist to the database.
func (c *Client) SaveDjmdHotCueBanklist(ctx context.Context, dhcb *DjmdHotCueBanklist) error {
	if dhcb.Exists() {
		return c.UpdateDjmdHotCueBanklist(ctx, dhcb)
	}
	return c.InsertDjmdHotCueBanklist(ctx, dhcb)
}

// Upsert performs an upsert for DjmdHotCueBanklist.
func (c *Client) UpsertDjmdHotCueBanklist(ctx context.Context, dhcb *DjmdHotCueBanklist) error {
	db := c.db

	switch {
	case dhcb._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO djmdHotCueBanklist (` +
		`ID, Seq, Name, ImagePath, Attribute, ParentID, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15` +
		`)` +
		` ON CONFLICT (ID) DO ` +
		`UPDATE SET ` +
		`Seq = EXCLUDED.Seq, Name = EXCLUDED.Name, ImagePath = EXCLUDED.ImagePath, Attribute = EXCLUDED.Attribute, ParentID = EXCLUDED.ParentID, UUID = EXCLUDED.UUID, rb_data_status = EXCLUDED.rb_data_status, rb_local_data_status = EXCLUDED.rb_local_data_status, rb_local_deleted = EXCLUDED.rb_local_deleted, rb_local_synced = EXCLUDED.rb_local_synced, usn = EXCLUDED.usn, rb_local_usn = EXCLUDED.rb_local_usn, created_at = EXCLUDED.created_at, updated_at = EXCLUDED.updated_at `
	// run
	logf(sqlstr, dhcb.ID, dhcb.Seq, dhcb.Name, dhcb.ImagePath, dhcb.Attribute, dhcb.ParentID, dhcb.UUID, dhcb.RbDataStatus, dhcb.RbLocalDataStatus, dhcb.RbLocalDeleted, dhcb.RbLocalSynced, dhcb.Usn, dhcb.RbLocalUsn, dhcb.CreatedAt, dhcb.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, dhcb.ID, dhcb.Seq, dhcb.Name, dhcb.ImagePath, dhcb.Attribute, dhcb.ParentID, dhcb.UUID, dhcb.RbDataStatus, dhcb.RbLocalDataStatus, dhcb.RbLocalDeleted, dhcb.RbLocalSynced, dhcb.Usn, dhcb.RbLocalUsn, dhcb.CreatedAt, dhcb.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	dhcb._exists = true
	return nil
}

// Delete deletes the DjmdHotCueBanklist from the database.
func (c *Client) DeleteDjmdHotCueBanklist(ctx context.Context, dhcb *DjmdHotCueBanklist) error {
	db := c.db

	switch {
	case !dhcb._exists: // doesn't exist
		return nil
	case dhcb._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM djmdHotCueBanklist ` +
		`WHERE ID = $1`
	// run
	logf(sqlstr, dhcb.ID)
	if _, err := db.ExecContext(ctx, sqlstr, dhcb.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	dhcb._deleted = true
	return nil
}

func scanDjmdHotCueBanklistRows(rows *sql.Rows) ([]*DjmdHotCueBanklist, error) {
	var res []*DjmdHotCueBanklist
	for rows.Next() {
		dhcb := DjmdHotCueBanklist{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dhcb.ID, &dhcb.Seq, &dhcb.Name, &dhcb.ImagePath, &dhcb.Attribute, &dhcb.ParentID, &dhcb.UUID, &dhcb.RbDataStatus, &dhcb.RbLocalDataStatus, &dhcb.RbLocalDeleted, &dhcb.RbLocalSynced, &dhcb.Usn, &dhcb.RbLocalUsn, &dhcb.CreatedAt, &dhcb.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dhcb)
	}

	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

func (c *Client) AllDjmdHotCueBanklist(ctx context.Context) ([]*DjmdHotCueBanklist, error) {
	db := c.db

	const sqlstr = `SELECT * FROM DjmdHotCueBanklist`
	rows, err := db.QueryContext(ctx, sqlstr)
	if err != nil {
		return nil, logerror(err)
	}

	defer rows.Close()
	res, err := scanDjmdHotCueBanklistRows(rows)
	if err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdHotCueBanklistByName retrieves a row from 'djmdHotCueBanklist' as a DjmdHotCueBanklist.
//
// Generated from index 'djmd_hot_cue_banklist__name'.
func (c *Client) DjmdHotCueBanklistByName(ctx context.Context, name sql.NullString) ([]*DjmdHotCueBanklist, error) {
	// func DjmdHotCueBanklistByName(ctx context.Context, db DB, name sql.NullString) ([]*DjmdHotCueBanklist, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, Seq, Name, ImagePath, Attribute, ParentID, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdHotCueBanklist ` +
		`WHERE Name = $1`
	// run
	logf(sqlstr, name)
	rows, err := db.QueryContext(ctx, sqlstr, name)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdHotCueBanklist
	for rows.Next() {
		dhcb := DjmdHotCueBanklist{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dhcb.ID, &dhcb.Seq, &dhcb.Name, &dhcb.ImagePath, &dhcb.Attribute, &dhcb.ParentID, &dhcb.UUID, &dhcb.RbDataStatus, &dhcb.RbLocalDataStatus, &dhcb.RbLocalDeleted, &dhcb.RbLocalSynced, &dhcb.Usn, &dhcb.RbLocalUsn, &dhcb.CreatedAt, &dhcb.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dhcb)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdHotCueBanklistByParentID retrieves a row from 'djmdHotCueBanklist' as a DjmdHotCueBanklist.
//
// Generated from index 'djmd_hot_cue_banklist__parent_i_d'.
func (c *Client) DjmdHotCueBanklistByParentID(ctx context.Context, parentID sql.NullString) ([]*DjmdHotCueBanklist, error) {
	// func DjmdHotCueBanklistByParentID(ctx context.Context, db DB, parentID sql.NullString) ([]*DjmdHotCueBanklist, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, Seq, Name, ImagePath, Attribute, ParentID, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdHotCueBanklist ` +
		`WHERE ParentID = $1`
	// run
	logf(sqlstr, parentID)
	rows, err := db.QueryContext(ctx, sqlstr, parentID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdHotCueBanklist
	for rows.Next() {
		dhcb := DjmdHotCueBanklist{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dhcb.ID, &dhcb.Seq, &dhcb.Name, &dhcb.ImagePath, &dhcb.Attribute, &dhcb.ParentID, &dhcb.UUID, &dhcb.RbDataStatus, &dhcb.RbLocalDataStatus, &dhcb.RbLocalDeleted, &dhcb.RbLocalSynced, &dhcb.Usn, &dhcb.RbLocalUsn, &dhcb.CreatedAt, &dhcb.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dhcb)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdHotCueBanklistByUUID retrieves a row from 'djmdHotCueBanklist' as a DjmdHotCueBanklist.
//
// Generated from index 'djmd_hot_cue_banklist__u_u_i_d'.
func (c *Client) DjmdHotCueBanklistByUUID(ctx context.Context, uuid sql.NullString) ([]*DjmdHotCueBanklist, error) {
	// func DjmdHotCueBanklistByUUID(ctx context.Context, db DB, uuid sql.NullString) ([]*DjmdHotCueBanklist, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, Seq, Name, ImagePath, Attribute, ParentID, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdHotCueBanklist ` +
		`WHERE UUID = $1`
	// run
	logf(sqlstr, uuid)
	rows, err := db.QueryContext(ctx, sqlstr, uuid)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdHotCueBanklist
	for rows.Next() {
		dhcb := DjmdHotCueBanklist{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dhcb.ID, &dhcb.Seq, &dhcb.Name, &dhcb.ImagePath, &dhcb.Attribute, &dhcb.ParentID, &dhcb.UUID, &dhcb.RbDataStatus, &dhcb.RbLocalDataStatus, &dhcb.RbLocalDeleted, &dhcb.RbLocalSynced, &dhcb.Usn, &dhcb.RbLocalUsn, &dhcb.CreatedAt, &dhcb.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dhcb)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdHotCueBanklistByRbDataStatus retrieves a row from 'djmdHotCueBanklist' as a DjmdHotCueBanklist.
//
// Generated from index 'djmd_hot_cue_banklist_rb_data_status'.
func (c *Client) DjmdHotCueBanklistByRbDataStatus(ctx context.Context, rbDataStatus sql.NullInt64) ([]*DjmdHotCueBanklist, error) {
	// func DjmdHotCueBanklistByRbDataStatus(ctx context.Context, db DB, rbDataStatus sql.NullInt64) ([]*DjmdHotCueBanklist, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, Seq, Name, ImagePath, Attribute, ParentID, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdHotCueBanklist ` +
		`WHERE rb_data_status = $1`
	// run
	logf(sqlstr, rbDataStatus)
	rows, err := db.QueryContext(ctx, sqlstr, rbDataStatus)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdHotCueBanklist
	for rows.Next() {
		dhcb := DjmdHotCueBanklist{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dhcb.ID, &dhcb.Seq, &dhcb.Name, &dhcb.ImagePath, &dhcb.Attribute, &dhcb.ParentID, &dhcb.UUID, &dhcb.RbDataStatus, &dhcb.RbLocalDataStatus, &dhcb.RbLocalDeleted, &dhcb.RbLocalSynced, &dhcb.Usn, &dhcb.RbLocalUsn, &dhcb.CreatedAt, &dhcb.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dhcb)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdHotCueBanklistByRbLocalDataStatus retrieves a row from 'djmdHotCueBanklist' as a DjmdHotCueBanklist.
//
// Generated from index 'djmd_hot_cue_banklist_rb_local_data_status'.
func (c *Client) DjmdHotCueBanklistByRbLocalDataStatus(ctx context.Context, rbLocalDataStatus sql.NullInt64) ([]*DjmdHotCueBanklist, error) {
	// func DjmdHotCueBanklistByRbLocalDataStatus(ctx context.Context, db DB, rbLocalDataStatus sql.NullInt64) ([]*DjmdHotCueBanklist, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, Seq, Name, ImagePath, Attribute, ParentID, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdHotCueBanklist ` +
		`WHERE rb_local_data_status = $1`
	// run
	logf(sqlstr, rbLocalDataStatus)
	rows, err := db.QueryContext(ctx, sqlstr, rbLocalDataStatus)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdHotCueBanklist
	for rows.Next() {
		dhcb := DjmdHotCueBanklist{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dhcb.ID, &dhcb.Seq, &dhcb.Name, &dhcb.ImagePath, &dhcb.Attribute, &dhcb.ParentID, &dhcb.UUID, &dhcb.RbDataStatus, &dhcb.RbLocalDataStatus, &dhcb.RbLocalDeleted, &dhcb.RbLocalSynced, &dhcb.Usn, &dhcb.RbLocalUsn, &dhcb.CreatedAt, &dhcb.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dhcb)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdHotCueBanklistByRbLocalDeleted retrieves a row from 'djmdHotCueBanklist' as a DjmdHotCueBanklist.
//
// Generated from index 'djmd_hot_cue_banklist_rb_local_deleted'.
func (c *Client) DjmdHotCueBanklistByRbLocalDeleted(ctx context.Context, rbLocalDeleted sql.NullInt64) ([]*DjmdHotCueBanklist, error) {
	// func DjmdHotCueBanklistByRbLocalDeleted(ctx context.Context, db DB, rbLocalDeleted sql.NullInt64) ([]*DjmdHotCueBanklist, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, Seq, Name, ImagePath, Attribute, ParentID, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdHotCueBanklist ` +
		`WHERE rb_local_deleted = $1`
	// run
	logf(sqlstr, rbLocalDeleted)
	rows, err := db.QueryContext(ctx, sqlstr, rbLocalDeleted)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdHotCueBanklist
	for rows.Next() {
		dhcb := DjmdHotCueBanklist{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dhcb.ID, &dhcb.Seq, &dhcb.Name, &dhcb.ImagePath, &dhcb.Attribute, &dhcb.ParentID, &dhcb.UUID, &dhcb.RbDataStatus, &dhcb.RbLocalDataStatus, &dhcb.RbLocalDeleted, &dhcb.RbLocalSynced, &dhcb.Usn, &dhcb.RbLocalUsn, &dhcb.CreatedAt, &dhcb.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dhcb)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdHotCueBanklistByRbLocalUsnID retrieves a row from 'djmdHotCueBanklist' as a DjmdHotCueBanklist.
//
// Generated from index 'djmd_hot_cue_banklist_rb_local_usn__i_d'.
func (c *Client) DjmdHotCueBanklistByRbLocalUsnID(ctx context.Context, rbLocalUsn sql.NullInt64, id sql.NullString) ([]*DjmdHotCueBanklist, error) {
	// func DjmdHotCueBanklistByRbLocalUsnID(ctx context.Context, db DB, rbLocalUsn sql.NullInt64, id sql.NullString) ([]*DjmdHotCueBanklist, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, Seq, Name, ImagePath, Attribute, ParentID, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdHotCueBanklist ` +
		`WHERE rb_local_usn = $1 AND ID = $2`
	// run
	logf(sqlstr, rbLocalUsn, id)
	rows, err := db.QueryContext(ctx, sqlstr, rbLocalUsn, id)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdHotCueBanklist
	for rows.Next() {
		dhcb := DjmdHotCueBanklist{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dhcb.ID, &dhcb.Seq, &dhcb.Name, &dhcb.ImagePath, &dhcb.Attribute, &dhcb.ParentID, &dhcb.UUID, &dhcb.RbDataStatus, &dhcb.RbLocalDataStatus, &dhcb.RbLocalDeleted, &dhcb.RbLocalSynced, &dhcb.Usn, &dhcb.RbLocalUsn, &dhcb.CreatedAt, &dhcb.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dhcb)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdHotCueBanklistByID retrieves a row from 'djmdHotCueBanklist' as a DjmdHotCueBanklist.
//
// Generated from index 'sqlite_autoindex_djmdHotCueBanklist_1'.
func (c *Client) DjmdHotCueBanklistByID(ctx context.Context, id sql.NullString) (*DjmdHotCueBanklist, error) {
	// func DjmdHotCueBanklistByID(ctx context.Context, db DB, id sql.NullString) (*DjmdHotCueBanklist, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, Seq, Name, ImagePath, Attribute, ParentID, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdHotCueBanklist ` +
		`WHERE ID = $1`
	// run
	logf(sqlstr, id)
	dhcb := DjmdHotCueBanklist{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&dhcb.ID, &dhcb.Seq, &dhcb.Name, &dhcb.ImagePath, &dhcb.Attribute, &dhcb.ParentID, &dhcb.UUID, &dhcb.RbDataStatus, &dhcb.RbLocalDataStatus, &dhcb.RbLocalDeleted, &dhcb.RbLocalSynced, &dhcb.Usn, &dhcb.RbLocalUsn, &dhcb.CreatedAt, &dhcb.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &dhcb, nil
}
