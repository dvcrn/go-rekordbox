package rekordbox

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"

	nulltype "github.com/mattn/go-nulltype"
)

// DjmdGenre represents a row from 'djmdGenre'.
type DjmdGenre struct {
	ID                nulltype.NullString `json:"id"`                   // ID
	Name              nulltype.NullString `json:"name"`                 // Name
	UUID              nulltype.NullString `json:"uuid"`                 // UUID
	RbDataStatus      nulltype.NullInt64  `json:"rb_data_status"`       // rb_data_status
	RbLocalDataStatus nulltype.NullInt64  `json:"rb_local_data_status"` // rb_local_data_status
	RbLocalDeleted    nulltype.NullInt64  `json:"rb_local_deleted"`     // rb_local_deleted
	RbLocalSynced     nulltype.NullInt64  `json:"rb_local_synced"`      // rb_local_synced
	Usn               nulltype.NullInt64  `json:"usn"`                  // usn
	RbLocalUsn        nulltype.NullInt64  `json:"rb_local_usn"`         // rb_local_usn
	CreatedAt         Time                `json:"created_at"`           // created_at
	UpdatedAt         Time                `json:"updated_at"`           // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the DjmdGenre exists in the database.
func (dg *DjmdGenre) Exists() bool {
	return dg._exists
}

// Deleted returns true when the DjmdGenre has been marked for deletion from
// the database.
func (dg *DjmdGenre) Deleted() bool {
	return dg._deleted
}

// Insert inserts the DjmdGenre to the database.
func (c *Client) InsertDjmdGenre(ctx context.Context, dg *DjmdGenre) error {
	db := c.db

	switch {
	case dg._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case dg._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO djmdGenre (` +
		`ID, Name, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11` +
		`)`
	// run
	logf(sqlstr, dg.ID, dg.Name, dg.UUID, dg.RbDataStatus, dg.RbLocalDataStatus, dg.RbLocalDeleted, dg.RbLocalSynced, dg.Usn, dg.RbLocalUsn, dg.CreatedAt, dg.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, dg.ID, dg.Name, dg.UUID, dg.RbDataStatus, dg.RbLocalDataStatus, dg.RbLocalDeleted, dg.RbLocalSynced, dg.Usn, dg.RbLocalUsn, dg.CreatedAt, dg.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	dg._exists = true
	return nil
}

// Update updates a DjmdGenre in the database.
func (c *Client) UpdateDjmdGenre(ctx context.Context, dg *DjmdGenre) error {
	db := c.db

	switch {
	case !dg._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case dg._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE djmdGenre SET ` +
		`Name = $1, UUID = $2, rb_data_status = $3, rb_local_data_status = $4, rb_local_deleted = $5, rb_local_synced = $6, usn = $7, rb_local_usn = $8, created_at = $9, updated_at = $10 ` +
		`WHERE ID = $11`
	// run
	logf(sqlstr, dg.Name, dg.UUID, dg.RbDataStatus, dg.RbLocalDataStatus, dg.RbLocalDeleted, dg.RbLocalSynced, dg.Usn, dg.RbLocalUsn, dg.CreatedAt, dg.UpdatedAt, dg.ID)
	if _, err := db.ExecContext(ctx, sqlstr, dg.Name, dg.UUID, dg.RbDataStatus, dg.RbLocalDataStatus, dg.RbLocalDeleted, dg.RbLocalSynced, dg.Usn, dg.RbLocalUsn, dg.CreatedAt, dg.UpdatedAt, dg.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the DjmdGenre to the database.
func (c *Client) SaveDjmdGenre(ctx context.Context, dg *DjmdGenre) error {
	if dg.Exists() {
		return c.UpdateDjmdGenre(ctx, dg)
	}
	return c.InsertDjmdGenre(ctx, dg)
}

// Upsert performs an upsert for DjmdGenre.
func (c *Client) UpsertDjmdGenre(ctx context.Context, dg *DjmdGenre) error {
	db := c.db

	switch {
	case dg._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO djmdGenre (` +
		`ID, Name, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11` +
		`)` +
		` ON CONFLICT (ID) DO ` +
		`UPDATE SET ` +
		`Name = EXCLUDED.Name, UUID = EXCLUDED.UUID, rb_data_status = EXCLUDED.rb_data_status, rb_local_data_status = EXCLUDED.rb_local_data_status, rb_local_deleted = EXCLUDED.rb_local_deleted, rb_local_synced = EXCLUDED.rb_local_synced, usn = EXCLUDED.usn, rb_local_usn = EXCLUDED.rb_local_usn, created_at = EXCLUDED.created_at, updated_at = EXCLUDED.updated_at `
	// run
	logf(sqlstr, dg.ID, dg.Name, dg.UUID, dg.RbDataStatus, dg.RbLocalDataStatus, dg.RbLocalDeleted, dg.RbLocalSynced, dg.Usn, dg.RbLocalUsn, dg.CreatedAt, dg.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, dg.ID, dg.Name, dg.UUID, dg.RbDataStatus, dg.RbLocalDataStatus, dg.RbLocalDeleted, dg.RbLocalSynced, dg.Usn, dg.RbLocalUsn, dg.CreatedAt, dg.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	dg._exists = true
	return nil
}

// Delete deletes the DjmdGenre from the database.
func (c *Client) DeleteDjmdGenre(ctx context.Context, dg *DjmdGenre) error {
	db := c.db

	switch {
	case !dg._exists: // doesn't exist
		return nil
	case dg._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM djmdGenre ` +
		`WHERE ID = $1`
	// run
	logf(sqlstr, dg.ID)
	if _, err := db.ExecContext(ctx, sqlstr, dg.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	dg._deleted = true
	return nil
}

func scanDjmdGenreRows(rows *sql.Rows) ([]*DjmdGenre, error) {
	var res []*DjmdGenre
	for rows.Next() {
		dg := DjmdGenre{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dg.ID, &dg.Name, &dg.UUID, &dg.RbDataStatus, &dg.RbLocalDataStatus, &dg.RbLocalDeleted, &dg.RbLocalSynced, &dg.Usn, &dg.RbLocalUsn, &dg.CreatedAt, &dg.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dg)
	}

	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

func (c *Client) AllDjmdGenre(ctx context.Context) ([]*DjmdGenre, error) {
	db := c.db

	const sqlstr = `SELECT * FROM DjmdGenre`
	rows, err := db.QueryContext(ctx, sqlstr)
	if err != nil {
		return nil, logerror(err)
	}

	defer rows.Close()
	res, err := scanDjmdGenreRows(rows)
	if err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdGenreByName retrieves a row from 'djmdGenre' as a DjmdGenre.
//
// Generated from index 'djmd_genre__name'.
func (c *Client) DjmdGenreByName(ctx context.Context, name nulltype.NullString) ([]*DjmdGenre, error) {
	// func DjmdGenreByName(ctx context.Context, db DB, name nulltype.NullString) ([]*DjmdGenre, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, Name, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdGenre ` +
		`WHERE Name = $1`
	// run
	logf(sqlstr, name)
	rows, err := db.QueryContext(ctx, sqlstr, name)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdGenre
	for rows.Next() {
		dg := DjmdGenre{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dg.ID, &dg.Name, &dg.UUID, &dg.RbDataStatus, &dg.RbLocalDataStatus, &dg.RbLocalDeleted, &dg.RbLocalSynced, &dg.Usn, &dg.RbLocalUsn, &dg.CreatedAt, &dg.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dg)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdGenreByUUID retrieves a row from 'djmdGenre' as a DjmdGenre.
//
// Generated from index 'djmd_genre__u_u_i_d'.
func (c *Client) DjmdGenreByUUID(ctx context.Context, uuid nulltype.NullString) ([]*DjmdGenre, error) {
	// func DjmdGenreByUUID(ctx context.Context, db DB, uuid nulltype.NullString) ([]*DjmdGenre, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, Name, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdGenre ` +
		`WHERE UUID = $1`
	// run
	logf(sqlstr, uuid)
	rows, err := db.QueryContext(ctx, sqlstr, uuid)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdGenre
	for rows.Next() {
		dg := DjmdGenre{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dg.ID, &dg.Name, &dg.UUID, &dg.RbDataStatus, &dg.RbLocalDataStatus, &dg.RbLocalDeleted, &dg.RbLocalSynced, &dg.Usn, &dg.RbLocalUsn, &dg.CreatedAt, &dg.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dg)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdGenreByRbDataStatus retrieves a row from 'djmdGenre' as a DjmdGenre.
//
// Generated from index 'djmd_genre_rb_data_status'.
func (c *Client) DjmdGenreByRbDataStatus(ctx context.Context, rbDataStatus nulltype.NullInt64) ([]*DjmdGenre, error) {
	// func DjmdGenreByRbDataStatus(ctx context.Context, db DB, rbDataStatus nulltype.NullInt64) ([]*DjmdGenre, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, Name, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdGenre ` +
		`WHERE rb_data_status = $1`
	// run
	logf(sqlstr, rbDataStatus)
	rows, err := db.QueryContext(ctx, sqlstr, rbDataStatus)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdGenre
	for rows.Next() {
		dg := DjmdGenre{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dg.ID, &dg.Name, &dg.UUID, &dg.RbDataStatus, &dg.RbLocalDataStatus, &dg.RbLocalDeleted, &dg.RbLocalSynced, &dg.Usn, &dg.RbLocalUsn, &dg.CreatedAt, &dg.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dg)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdGenreByRbLocalDataStatus retrieves a row from 'djmdGenre' as a DjmdGenre.
//
// Generated from index 'djmd_genre_rb_local_data_status'.
func (c *Client) DjmdGenreByRbLocalDataStatus(ctx context.Context, rbLocalDataStatus nulltype.NullInt64) ([]*DjmdGenre, error) {
	// func DjmdGenreByRbLocalDataStatus(ctx context.Context, db DB, rbLocalDataStatus nulltype.NullInt64) ([]*DjmdGenre, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, Name, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdGenre ` +
		`WHERE rb_local_data_status = $1`
	// run
	logf(sqlstr, rbLocalDataStatus)
	rows, err := db.QueryContext(ctx, sqlstr, rbLocalDataStatus)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdGenre
	for rows.Next() {
		dg := DjmdGenre{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dg.ID, &dg.Name, &dg.UUID, &dg.RbDataStatus, &dg.RbLocalDataStatus, &dg.RbLocalDeleted, &dg.RbLocalSynced, &dg.Usn, &dg.RbLocalUsn, &dg.CreatedAt, &dg.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dg)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdGenreByRbLocalDeleted retrieves a row from 'djmdGenre' as a DjmdGenre.
//
// Generated from index 'djmd_genre_rb_local_deleted'.
func (c *Client) DjmdGenreByRbLocalDeleted(ctx context.Context, rbLocalDeleted nulltype.NullInt64) ([]*DjmdGenre, error) {
	// func DjmdGenreByRbLocalDeleted(ctx context.Context, db DB, rbLocalDeleted nulltype.NullInt64) ([]*DjmdGenre, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, Name, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdGenre ` +
		`WHERE rb_local_deleted = $1`
	// run
	logf(sqlstr, rbLocalDeleted)
	rows, err := db.QueryContext(ctx, sqlstr, rbLocalDeleted)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdGenre
	for rows.Next() {
		dg := DjmdGenre{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dg.ID, &dg.Name, &dg.UUID, &dg.RbDataStatus, &dg.RbLocalDataStatus, &dg.RbLocalDeleted, &dg.RbLocalSynced, &dg.Usn, &dg.RbLocalUsn, &dg.CreatedAt, &dg.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dg)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdGenreByRbLocalUsnID retrieves a row from 'djmdGenre' as a DjmdGenre.
//
// Generated from index 'djmd_genre_rb_local_usn__i_d'.
func (c *Client) DjmdGenreByRbLocalUsnID(ctx context.Context, rbLocalUsn nulltype.NullInt64, id nulltype.NullString) ([]*DjmdGenre, error) {
	// func DjmdGenreByRbLocalUsnID(ctx context.Context, db DB, rbLocalUsn nulltype.NullInt64, id nulltype.NullString) ([]*DjmdGenre, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, Name, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdGenre ` +
		`WHERE rb_local_usn = $1 AND ID = $2`
	// run
	logf(sqlstr, rbLocalUsn, id)
	rows, err := db.QueryContext(ctx, sqlstr, rbLocalUsn, id)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdGenre
	for rows.Next() {
		dg := DjmdGenre{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dg.ID, &dg.Name, &dg.UUID, &dg.RbDataStatus, &dg.RbLocalDataStatus, &dg.RbLocalDeleted, &dg.RbLocalSynced, &dg.Usn, &dg.RbLocalUsn, &dg.CreatedAt, &dg.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dg)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdGenreByID retrieves a row from 'djmdGenre' as a DjmdGenre.
//
// Generated from index 'sqlite_autoindex_djmdGenre_1'.
func (c *Client) DjmdGenreByID(ctx context.Context, id nulltype.NullString) (*DjmdGenre, error) {
	// func DjmdGenreByID(ctx context.Context, db DB, id nulltype.NullString) (*DjmdGenre, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, Name, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdGenre ` +
		`WHERE ID = $1`
	// run
	logf(sqlstr, id)
	dg := DjmdGenre{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&dg.ID, &dg.Name, &dg.UUID, &dg.RbDataStatus, &dg.RbLocalDataStatus, &dg.RbLocalDeleted, &dg.RbLocalSynced, &dg.Usn, &dg.RbLocalUsn, &dg.CreatedAt, &dg.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &dg, nil
}
