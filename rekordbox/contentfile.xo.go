package rekordbox

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// ContentFile represents a row from 'contentFile'.
type ContentFile struct {
	ID                sql.NullString `json:"ID"`                   // ID
	ContentID         sql.NullString `json:"ContentID"`            // ContentID
	Path              sql.NullString `json:"Path"`                 // Path
	Hash              sql.NullString `json:"Hash"`                 // Hash
	Size              sql.NullInt64  `json:"Size"`                 // Size
	RbLocalPath       sql.NullString `json:"rb_local_path"`        // rb_local_path
	RbInsyncHash      sql.NullString `json:"rb_insync_hash"`       // rb_insync_hash
	RbInsyncLocalUsn  sql.NullInt64  `json:"rb_insync_local_usn"`  // rb_insync_local_usn
	RbFileHashDirty   sql.NullInt64  `json:"rb_file_hash_dirty"`   // rb_file_hash_dirty
	RbLocalFileStatus sql.NullInt64  `json:"rb_local_file_status"` // rb_local_file_status
	RbInProgress      sql.NullInt64  `json:"rb_in_progress"`       // rb_in_progress
	RbProcessType     sql.NullInt64  `json:"rb_process_type"`      // rb_process_type
	RbTempPath        sql.NullString `json:"rb_temp_path"`         // rb_temp_path
	RbPriority        sql.NullInt64  `json:"rb_priority"`          // rb_priority
	RbFileSizeDirty   sql.NullInt64  `json:"rb_file_size_dirty"`   // rb_file_size_dirty
	UUID              sql.NullString `json:"UUID"`                 // UUID
	RbDataStatus      sql.NullInt64  `json:"rb_data_status"`       // rb_data_status
	RbLocalDataStatus sql.NullInt64  `json:"rb_local_data_status"` // rb_local_data_status
	RbLocalDeleted    sql.NullInt64  `json:"rb_local_deleted"`     // rb_local_deleted
	RbLocalSynced     sql.NullInt64  `json:"rb_local_synced"`      // rb_local_synced
	Usn               sql.NullInt64  `json:"usn"`                  // usn
	RbLocalUsn        sql.NullInt64  `json:"rb_local_usn"`         // rb_local_usn
	CreatedAt         Time           `json:"created_at"`           // created_at
	UpdatedAt         Time           `json:"updated_at"`           // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the ContentFile exists in the database.
func (cf *ContentFile) Exists() bool {
	return cf._exists
}

// Deleted returns true when the ContentFile has been marked for deletion from
// the database.
func (cf *ContentFile) Deleted() bool {
	return cf._deleted
}

// Insert inserts the ContentFile to the database.
func (c *Client) InsertContentFile(ctx context.Context, cf *ContentFile) error {
	db := c.db

	switch {
	case cf._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case cf._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO contentFile (` +
		`ID, ContentID, Path, Hash, Size, rb_local_path, rb_insync_hash, rb_insync_local_usn, rb_file_hash_dirty, rb_local_file_status, rb_in_progress, rb_process_type, rb_temp_path, rb_priority, rb_file_size_dirty, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24` +
		`)`
	// run
	logf(sqlstr, cf.ID, cf.ContentID, cf.Path, cf.Hash, cf.Size, cf.RbLocalPath, cf.RbInsyncHash, cf.RbInsyncLocalUsn, cf.RbFileHashDirty, cf.RbLocalFileStatus, cf.RbInProgress, cf.RbProcessType, cf.RbTempPath, cf.RbPriority, cf.RbFileSizeDirty, cf.UUID, cf.RbDataStatus, cf.RbLocalDataStatus, cf.RbLocalDeleted, cf.RbLocalSynced, cf.Usn, cf.RbLocalUsn, cf.CreatedAt, cf.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, cf.ID, cf.ContentID, cf.Path, cf.Hash, cf.Size, cf.RbLocalPath, cf.RbInsyncHash, cf.RbInsyncLocalUsn, cf.RbFileHashDirty, cf.RbLocalFileStatus, cf.RbInProgress, cf.RbProcessType, cf.RbTempPath, cf.RbPriority, cf.RbFileSizeDirty, cf.UUID, cf.RbDataStatus, cf.RbLocalDataStatus, cf.RbLocalDeleted, cf.RbLocalSynced, cf.Usn, cf.RbLocalUsn, cf.CreatedAt, cf.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	cf._exists = true
	return nil
}

// Update updates a ContentFile in the database.
func (c *Client) UpdateContentFile(ctx context.Context, cf *ContentFile) error {
	db := c.db

	switch {
	case !cf._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case cf._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE contentFile SET ` +
		`ContentID = $1, Path = $2, Hash = $3, Size = $4, rb_local_path = $5, rb_insync_hash = $6, rb_insync_local_usn = $7, rb_file_hash_dirty = $8, rb_local_file_status = $9, rb_in_progress = $10, rb_process_type = $11, rb_temp_path = $12, rb_priority = $13, rb_file_size_dirty = $14, UUID = $15, rb_data_status = $16, rb_local_data_status = $17, rb_local_deleted = $18, rb_local_synced = $19, usn = $20, rb_local_usn = $21, created_at = $22, updated_at = $23 ` +
		`WHERE ID = $24`
	// run
	logf(sqlstr, cf.ContentID, cf.Path, cf.Hash, cf.Size, cf.RbLocalPath, cf.RbInsyncHash, cf.RbInsyncLocalUsn, cf.RbFileHashDirty, cf.RbLocalFileStatus, cf.RbInProgress, cf.RbProcessType, cf.RbTempPath, cf.RbPriority, cf.RbFileSizeDirty, cf.UUID, cf.RbDataStatus, cf.RbLocalDataStatus, cf.RbLocalDeleted, cf.RbLocalSynced, cf.Usn, cf.RbLocalUsn, cf.CreatedAt, cf.UpdatedAt, cf.ID)
	if _, err := db.ExecContext(ctx, sqlstr, cf.ContentID, cf.Path, cf.Hash, cf.Size, cf.RbLocalPath, cf.RbInsyncHash, cf.RbInsyncLocalUsn, cf.RbFileHashDirty, cf.RbLocalFileStatus, cf.RbInProgress, cf.RbProcessType, cf.RbTempPath, cf.RbPriority, cf.RbFileSizeDirty, cf.UUID, cf.RbDataStatus, cf.RbLocalDataStatus, cf.RbLocalDeleted, cf.RbLocalSynced, cf.Usn, cf.RbLocalUsn, cf.CreatedAt, cf.UpdatedAt, cf.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the ContentFile to the database.
func (c *Client) SaveContentFile(ctx context.Context, cf *ContentFile) error {
	if cf.Exists() {
		return c.UpdateContentFile(ctx, cf)
	}
	return c.InsertContentFile(ctx, cf)
}

// Upsert performs an upsert for ContentFile.
func (c *Client) UpsertContentFile(ctx context.Context, cf *ContentFile) error {
	db := c.db

	switch {
	case cf._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO contentFile (` +
		`ID, ContentID, Path, Hash, Size, rb_local_path, rb_insync_hash, rb_insync_local_usn, rb_file_hash_dirty, rb_local_file_status, rb_in_progress, rb_process_type, rb_temp_path, rb_priority, rb_file_size_dirty, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24` +
		`)` +
		` ON CONFLICT (ID) DO ` +
		`UPDATE SET ` +
		`ContentID = EXCLUDED.ContentID, Path = EXCLUDED.Path, Hash = EXCLUDED.Hash, Size = EXCLUDED.Size, rb_local_path = EXCLUDED.rb_local_path, rb_insync_hash = EXCLUDED.rb_insync_hash, rb_insync_local_usn = EXCLUDED.rb_insync_local_usn, rb_file_hash_dirty = EXCLUDED.rb_file_hash_dirty, rb_local_file_status = EXCLUDED.rb_local_file_status, rb_in_progress = EXCLUDED.rb_in_progress, rb_process_type = EXCLUDED.rb_process_type, rb_temp_path = EXCLUDED.rb_temp_path, rb_priority = EXCLUDED.rb_priority, rb_file_size_dirty = EXCLUDED.rb_file_size_dirty, UUID = EXCLUDED.UUID, rb_data_status = EXCLUDED.rb_data_status, rb_local_data_status = EXCLUDED.rb_local_data_status, rb_local_deleted = EXCLUDED.rb_local_deleted, rb_local_synced = EXCLUDED.rb_local_synced, usn = EXCLUDED.usn, rb_local_usn = EXCLUDED.rb_local_usn, created_at = EXCLUDED.created_at, updated_at = EXCLUDED.updated_at `
	// run
	logf(sqlstr, cf.ID, cf.ContentID, cf.Path, cf.Hash, cf.Size, cf.RbLocalPath, cf.RbInsyncHash, cf.RbInsyncLocalUsn, cf.RbFileHashDirty, cf.RbLocalFileStatus, cf.RbInProgress, cf.RbProcessType, cf.RbTempPath, cf.RbPriority, cf.RbFileSizeDirty, cf.UUID, cf.RbDataStatus, cf.RbLocalDataStatus, cf.RbLocalDeleted, cf.RbLocalSynced, cf.Usn, cf.RbLocalUsn, cf.CreatedAt, cf.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, cf.ID, cf.ContentID, cf.Path, cf.Hash, cf.Size, cf.RbLocalPath, cf.RbInsyncHash, cf.RbInsyncLocalUsn, cf.RbFileHashDirty, cf.RbLocalFileStatus, cf.RbInProgress, cf.RbProcessType, cf.RbTempPath, cf.RbPriority, cf.RbFileSizeDirty, cf.UUID, cf.RbDataStatus, cf.RbLocalDataStatus, cf.RbLocalDeleted, cf.RbLocalSynced, cf.Usn, cf.RbLocalUsn, cf.CreatedAt, cf.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	cf._exists = true
	return nil
}

// Delete deletes the ContentFile from the database.
func (c *Client) DeleteContentFile(ctx context.Context, cf *ContentFile) error {
	db := c.db

	switch {
	case !cf._exists: // doesn't exist
		return nil
	case cf._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM contentFile ` +
		`WHERE ID = $1`
	// run
	logf(sqlstr, cf.ID)
	if _, err := db.ExecContext(ctx, sqlstr, cf.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	cf._deleted = true
	return nil
}

func (c *Client) AllContentFile(ctx context.Context) ([]*ContentFile, error) {
	db := c.db

	const sqlstr = `SELECT * FROM ContentFile`
	rows, err := db.QueryContext(ctx, sqlstr)
	if err != nil {
		return nil, logerror(err)
	}

	defer rows.Close()
	// process
	var res []*ContentFile
	for rows.Next() {
		cf := ContentFile{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&cf.ID, &cf.ContentID, &cf.Path, &cf.Hash, &cf.Size, &cf.RbLocalPath, &cf.RbInsyncHash, &cf.RbInsyncLocalUsn, &cf.RbFileHashDirty, &cf.RbLocalFileStatus, &cf.RbInProgress, &cf.RbProcessType, &cf.RbTempPath, &cf.RbPriority, &cf.RbFileSizeDirty, &cf.UUID, &cf.RbDataStatus, &cf.RbLocalDataStatus, &cf.RbLocalDeleted, &cf.RbLocalSynced, &cf.Usn, &cf.RbLocalUsn, &cf.CreatedAt, &cf.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &cf)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// ContentFileByContentID retrieves a row from 'contentFile' as a ContentFile.
//
// Generated from index 'content_file__content_i_d'.
// func (cf *ContentFile) contentFile(db DB) (error)
// func ContentFileByContentID(ctx context.Context, db DB, contentID sql.NullString) ([]*ContentFile, error) {
// ContentFileByContentID {
// func ContentFileByContentID(db DB, contentID sql.NullString) ([]*ContentFile, error) {
// true
// contentID
// ContentFile
// ContentFileByContentID
// false
// false
func (c *Client) ContentFileByContentID(ctx context.Context, contentID sql.NullString) ([]*ContentFile, error) {
	// func ContentFileByContentID(ctx context.Context, db DB, contentID sql.NullString) ([]*ContentFile, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, ContentID, Path, Hash, Size, rb_local_path, rb_insync_hash, rb_insync_local_usn, rb_file_hash_dirty, rb_local_file_status, rb_in_progress, rb_process_type, rb_temp_path, rb_priority, rb_file_size_dirty, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM contentFile ` +
		`WHERE ContentID = $1`
	// run
	logf(sqlstr, contentID)
	rows, err := db.QueryContext(ctx, sqlstr, contentID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*ContentFile
	for rows.Next() {
		cf := ContentFile{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&cf.ID, &cf.ContentID, &cf.Path, &cf.Hash, &cf.Size, &cf.RbLocalPath, &cf.RbInsyncHash, &cf.RbInsyncLocalUsn, &cf.RbFileHashDirty, &cf.RbLocalFileStatus, &cf.RbInProgress, &cf.RbProcessType, &cf.RbTempPath, &cf.RbPriority, &cf.RbFileSizeDirty, &cf.UUID, &cf.RbDataStatus, &cf.RbLocalDataStatus, &cf.RbLocalDeleted, &cf.RbLocalSynced, &cf.Usn, &cf.RbLocalUsn, &cf.CreatedAt, &cf.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &cf)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// ContentFileByUUID retrieves a row from 'contentFile' as a ContentFile.
//
// Generated from index 'content_file__u_u_i_d'.
// func (cf *ContentFile) contentFile(db DB) (error)
// func ContentFileByUUID(ctx context.Context, db DB, uuid sql.NullString) ([]*ContentFile, error) {
// ContentFileByUUID {
// func ContentFileByUUID(db DB, uuid sql.NullString) ([]*ContentFile, error) {
// true
// uuid
// ContentFile
// ContentFileByUUID
// false
// false
func (c *Client) ContentFileByUUID(ctx context.Context, uuid sql.NullString) ([]*ContentFile, error) {
	// func ContentFileByUUID(ctx context.Context, db DB, uuid sql.NullString) ([]*ContentFile, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, ContentID, Path, Hash, Size, rb_local_path, rb_insync_hash, rb_insync_local_usn, rb_file_hash_dirty, rb_local_file_status, rb_in_progress, rb_process_type, rb_temp_path, rb_priority, rb_file_size_dirty, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM contentFile ` +
		`WHERE UUID = $1`
	// run
	logf(sqlstr, uuid)
	rows, err := db.QueryContext(ctx, sqlstr, uuid)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*ContentFile
	for rows.Next() {
		cf := ContentFile{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&cf.ID, &cf.ContentID, &cf.Path, &cf.Hash, &cf.Size, &cf.RbLocalPath, &cf.RbInsyncHash, &cf.RbInsyncLocalUsn, &cf.RbFileHashDirty, &cf.RbLocalFileStatus, &cf.RbInProgress, &cf.RbProcessType, &cf.RbTempPath, &cf.RbPriority, &cf.RbFileSizeDirty, &cf.UUID, &cf.RbDataStatus, &cf.RbLocalDataStatus, &cf.RbLocalDeleted, &cf.RbLocalSynced, &cf.Usn, &cf.RbLocalUsn, &cf.CreatedAt, &cf.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &cf)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// ContentFileByRbDataStatus retrieves a row from 'contentFile' as a ContentFile.
//
// Generated from index 'content_file_rb_data_status'.
// func (cf *ContentFile) contentFile(db DB) (error)
// func ContentFileByRbDataStatus(ctx context.Context, db DB, rbDataStatus sql.NullInt64) ([]*ContentFile, error) {
// ContentFileByRbDataStatus {
// func ContentFileByRbDataStatus(db DB, rbDataStatus sql.NullInt64) ([]*ContentFile, error) {
// true
// rbDataStatus
// ContentFile
// ContentFileByRbDataStatus
// false
// false
func (c *Client) ContentFileByRbDataStatus(ctx context.Context, rbDataStatus sql.NullInt64) ([]*ContentFile, error) {
	// func ContentFileByRbDataStatus(ctx context.Context, db DB, rbDataStatus sql.NullInt64) ([]*ContentFile, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, ContentID, Path, Hash, Size, rb_local_path, rb_insync_hash, rb_insync_local_usn, rb_file_hash_dirty, rb_local_file_status, rb_in_progress, rb_process_type, rb_temp_path, rb_priority, rb_file_size_dirty, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM contentFile ` +
		`WHERE rb_data_status = $1`
	// run
	logf(sqlstr, rbDataStatus)
	rows, err := db.QueryContext(ctx, sqlstr, rbDataStatus)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*ContentFile
	for rows.Next() {
		cf := ContentFile{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&cf.ID, &cf.ContentID, &cf.Path, &cf.Hash, &cf.Size, &cf.RbLocalPath, &cf.RbInsyncHash, &cf.RbInsyncLocalUsn, &cf.RbFileHashDirty, &cf.RbLocalFileStatus, &cf.RbInProgress, &cf.RbProcessType, &cf.RbTempPath, &cf.RbPriority, &cf.RbFileSizeDirty, &cf.UUID, &cf.RbDataStatus, &cf.RbLocalDataStatus, &cf.RbLocalDeleted, &cf.RbLocalSynced, &cf.Usn, &cf.RbLocalUsn, &cf.CreatedAt, &cf.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &cf)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// ContentFileByRbFileHashDirty retrieves a row from 'contentFile' as a ContentFile.
//
// Generated from index 'content_file_rb_file_hash_dirty'.
// func (cf *ContentFile) contentFile(db DB) (error)
// func ContentFileByRbFileHashDirty(ctx context.Context, db DB, rbFileHashDirty sql.NullInt64) ([]*ContentFile, error) {
// ContentFileByRbFileHashDirty {
// func ContentFileByRbFileHashDirty(db DB, rbFileHashDirty sql.NullInt64) ([]*ContentFile, error) {
// true
// rbFileHashDirty
// ContentFile
// ContentFileByRbFileHashDirty
// false
// false
func (c *Client) ContentFileByRbFileHashDirty(ctx context.Context, rbFileHashDirty sql.NullInt64) ([]*ContentFile, error) {
	// func ContentFileByRbFileHashDirty(ctx context.Context, db DB, rbFileHashDirty sql.NullInt64) ([]*ContentFile, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, ContentID, Path, Hash, Size, rb_local_path, rb_insync_hash, rb_insync_local_usn, rb_file_hash_dirty, rb_local_file_status, rb_in_progress, rb_process_type, rb_temp_path, rb_priority, rb_file_size_dirty, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM contentFile ` +
		`WHERE rb_file_hash_dirty = $1`
	// run
	logf(sqlstr, rbFileHashDirty)
	rows, err := db.QueryContext(ctx, sqlstr, rbFileHashDirty)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*ContentFile
	for rows.Next() {
		cf := ContentFile{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&cf.ID, &cf.ContentID, &cf.Path, &cf.Hash, &cf.Size, &cf.RbLocalPath, &cf.RbInsyncHash, &cf.RbInsyncLocalUsn, &cf.RbFileHashDirty, &cf.RbLocalFileStatus, &cf.RbInProgress, &cf.RbProcessType, &cf.RbTempPath, &cf.RbPriority, &cf.RbFileSizeDirty, &cf.UUID, &cf.RbDataStatus, &cf.RbLocalDataStatus, &cf.RbLocalDeleted, &cf.RbLocalSynced, &cf.Usn, &cf.RbLocalUsn, &cf.CreatedAt, &cf.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &cf)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// ContentFileByRbFileSizeDirty retrieves a row from 'contentFile' as a ContentFile.
//
// Generated from index 'content_file_rb_file_size_dirty'.
// func (cf *ContentFile) contentFile(db DB) (error)
// func ContentFileByRbFileSizeDirty(ctx context.Context, db DB, rbFileSizeDirty sql.NullInt64) ([]*ContentFile, error) {
// ContentFileByRbFileSizeDirty {
// func ContentFileByRbFileSizeDirty(db DB, rbFileSizeDirty sql.NullInt64) ([]*ContentFile, error) {
// true
// rbFileSizeDirty
// ContentFile
// ContentFileByRbFileSizeDirty
// false
// false
func (c *Client) ContentFileByRbFileSizeDirty(ctx context.Context, rbFileSizeDirty sql.NullInt64) ([]*ContentFile, error) {
	// func ContentFileByRbFileSizeDirty(ctx context.Context, db DB, rbFileSizeDirty sql.NullInt64) ([]*ContentFile, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, ContentID, Path, Hash, Size, rb_local_path, rb_insync_hash, rb_insync_local_usn, rb_file_hash_dirty, rb_local_file_status, rb_in_progress, rb_process_type, rb_temp_path, rb_priority, rb_file_size_dirty, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM contentFile ` +
		`WHERE rb_file_size_dirty = $1`
	// run
	logf(sqlstr, rbFileSizeDirty)
	rows, err := db.QueryContext(ctx, sqlstr, rbFileSizeDirty)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*ContentFile
	for rows.Next() {
		cf := ContentFile{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&cf.ID, &cf.ContentID, &cf.Path, &cf.Hash, &cf.Size, &cf.RbLocalPath, &cf.RbInsyncHash, &cf.RbInsyncLocalUsn, &cf.RbFileHashDirty, &cf.RbLocalFileStatus, &cf.RbInProgress, &cf.RbProcessType, &cf.RbTempPath, &cf.RbPriority, &cf.RbFileSizeDirty, &cf.UUID, &cf.RbDataStatus, &cf.RbLocalDataStatus, &cf.RbLocalDeleted, &cf.RbLocalSynced, &cf.Usn, &cf.RbLocalUsn, &cf.CreatedAt, &cf.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &cf)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// ContentFileByRbLocalDataStatus retrieves a row from 'contentFile' as a ContentFile.
//
// Generated from index 'content_file_rb_local_data_status'.
// func (cf *ContentFile) contentFile(db DB) (error)
// func ContentFileByRbLocalDataStatus(ctx context.Context, db DB, rbLocalDataStatus sql.NullInt64) ([]*ContentFile, error) {
// ContentFileByRbLocalDataStatus {
// func ContentFileByRbLocalDataStatus(db DB, rbLocalDataStatus sql.NullInt64) ([]*ContentFile, error) {
// true
// rbLocalDataStatus
// ContentFile
// ContentFileByRbLocalDataStatus
// false
// false
func (c *Client) ContentFileByRbLocalDataStatus(ctx context.Context, rbLocalDataStatus sql.NullInt64) ([]*ContentFile, error) {
	// func ContentFileByRbLocalDataStatus(ctx context.Context, db DB, rbLocalDataStatus sql.NullInt64) ([]*ContentFile, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, ContentID, Path, Hash, Size, rb_local_path, rb_insync_hash, rb_insync_local_usn, rb_file_hash_dirty, rb_local_file_status, rb_in_progress, rb_process_type, rb_temp_path, rb_priority, rb_file_size_dirty, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM contentFile ` +
		`WHERE rb_local_data_status = $1`
	// run
	logf(sqlstr, rbLocalDataStatus)
	rows, err := db.QueryContext(ctx, sqlstr, rbLocalDataStatus)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*ContentFile
	for rows.Next() {
		cf := ContentFile{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&cf.ID, &cf.ContentID, &cf.Path, &cf.Hash, &cf.Size, &cf.RbLocalPath, &cf.RbInsyncHash, &cf.RbInsyncLocalUsn, &cf.RbFileHashDirty, &cf.RbLocalFileStatus, &cf.RbInProgress, &cf.RbProcessType, &cf.RbTempPath, &cf.RbPriority, &cf.RbFileSizeDirty, &cf.UUID, &cf.RbDataStatus, &cf.RbLocalDataStatus, &cf.RbLocalDeleted, &cf.RbLocalSynced, &cf.Usn, &cf.RbLocalUsn, &cf.CreatedAt, &cf.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &cf)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// ContentFileByRbLocalDeleted retrieves a row from 'contentFile' as a ContentFile.
//
// Generated from index 'content_file_rb_local_deleted'.
// func (cf *ContentFile) contentFile(db DB) (error)
// func ContentFileByRbLocalDeleted(ctx context.Context, db DB, rbLocalDeleted sql.NullInt64) ([]*ContentFile, error) {
// ContentFileByRbLocalDeleted {
// func ContentFileByRbLocalDeleted(db DB, rbLocalDeleted sql.NullInt64) ([]*ContentFile, error) {
// true
// rbLocalDeleted
// ContentFile
// ContentFileByRbLocalDeleted
// false
// false
func (c *Client) ContentFileByRbLocalDeleted(ctx context.Context, rbLocalDeleted sql.NullInt64) ([]*ContentFile, error) {
	// func ContentFileByRbLocalDeleted(ctx context.Context, db DB, rbLocalDeleted sql.NullInt64) ([]*ContentFile, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, ContentID, Path, Hash, Size, rb_local_path, rb_insync_hash, rb_insync_local_usn, rb_file_hash_dirty, rb_local_file_status, rb_in_progress, rb_process_type, rb_temp_path, rb_priority, rb_file_size_dirty, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM contentFile ` +
		`WHERE rb_local_deleted = $1`
	// run
	logf(sqlstr, rbLocalDeleted)
	rows, err := db.QueryContext(ctx, sqlstr, rbLocalDeleted)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*ContentFile
	for rows.Next() {
		cf := ContentFile{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&cf.ID, &cf.ContentID, &cf.Path, &cf.Hash, &cf.Size, &cf.RbLocalPath, &cf.RbInsyncHash, &cf.RbInsyncLocalUsn, &cf.RbFileHashDirty, &cf.RbLocalFileStatus, &cf.RbInProgress, &cf.RbProcessType, &cf.RbTempPath, &cf.RbPriority, &cf.RbFileSizeDirty, &cf.UUID, &cf.RbDataStatus, &cf.RbLocalDataStatus, &cf.RbLocalDeleted, &cf.RbLocalSynced, &cf.Usn, &cf.RbLocalUsn, &cf.CreatedAt, &cf.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &cf)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// ContentFileByRbLocalDeletedRbInProgressRbLocalFileStatusRbProcessTypeRbPriority retrieves a row from 'contentFile' as a ContentFile.
//
// Generated from index 'content_file_rb_local_deleted_rb_in_progress_rb_local_file_status_rb_process_type_rb_priority'.
// func (cf *ContentFile) contentFile(db DB) (error)
// func ContentFileByRbLocalDeletedRbInProgressRbLocalFileStatusRbProcessTypeRbPriority(ctx context.Context, db DB, rbLocalDeleted sql.NullInt64, rbInProgress sql.NullInt64, rbLocalFileStatus sql.NullInt64, rbProcessType sql.NullInt64, rbPriority sql.NullInt64) ([]*ContentFile, error) {
// ContentFileByRbLocalDeletedRbInProgressRbLocalFileStatusRbProcessTypeRbPriority {
// func ContentFileByRbLocalDeletedRbInProgressRbLocalFileStatusRbProcessTypeRbPriority(db DB, rbLocalDeleted sql.NullInt64, rbInProgress sql.NullInt64, rbLocalFileStatus sql.NullInt64, rbProcessType sql.NullInt64, rbPriority sql.NullInt64) ([]*ContentFile, error) {
// true
// rbLocalDeleted, rbInProgress, rbLocalFileStatus, rbProcessType, rbPriority
// ContentFile
// ContentFileByRbLocalDeletedRbInProgressRbLocalFileStatusRbProcessTypeRbPriority
// false
// false
func (c *Client) ContentFileByRbLocalDeletedRbInProgressRbLocalFileStatusRbProcessTypeRbPriority(ctx context.Context, rbLocalDeleted, rbInProgress, rbLocalFileStatus, rbProcessType, rbPriority sql.NullInt64) ([]*ContentFile, error) {
	// func ContentFileByRbLocalDeletedRbInProgressRbLocalFileStatusRbProcessTypeRbPriority(ctx context.Context, db DB, rbLocalDeleted sql.NullInt64, rbInProgress sql.NullInt64, rbLocalFileStatus sql.NullInt64, rbProcessType sql.NullInt64, rbPriority sql.NullInt64) ([]*ContentFile, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, ContentID, Path, Hash, Size, rb_local_path, rb_insync_hash, rb_insync_local_usn, rb_file_hash_dirty, rb_local_file_status, rb_in_progress, rb_process_type, rb_temp_path, rb_priority, rb_file_size_dirty, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM contentFile ` +
		`WHERE rb_local_deleted = $1 AND rb_in_progress = $2 AND rb_local_file_status = $3 AND rb_process_type = $4 AND rb_priority = $5`
	// run
	logf(sqlstr, rbLocalDeleted, rbInProgress, rbLocalFileStatus, rbProcessType, rbPriority)
	rows, err := db.QueryContext(ctx, sqlstr, rbLocalDeleted, rbInProgress, rbLocalFileStatus, rbProcessType, rbPriority)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*ContentFile
	for rows.Next() {
		cf := ContentFile{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&cf.ID, &cf.ContentID, &cf.Path, &cf.Hash, &cf.Size, &cf.RbLocalPath, &cf.RbInsyncHash, &cf.RbInsyncLocalUsn, &cf.RbFileHashDirty, &cf.RbLocalFileStatus, &cf.RbInProgress, &cf.RbProcessType, &cf.RbTempPath, &cf.RbPriority, &cf.RbFileSizeDirty, &cf.UUID, &cf.RbDataStatus, &cf.RbLocalDataStatus, &cf.RbLocalDeleted, &cf.RbLocalSynced, &cf.Usn, &cf.RbLocalUsn, &cf.CreatedAt, &cf.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &cf)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// ContentFileByRbLocalUsnID retrieves a row from 'contentFile' as a ContentFile.
//
// Generated from index 'content_file_rb_local_usn__i_d'.
// func (cf *ContentFile) contentFile(db DB) (error)
// func ContentFileByRbLocalUsnID(ctx context.Context, db DB, rbLocalUsn sql.NullInt64, id sql.NullString) ([]*ContentFile, error) {
// ContentFileByRbLocalUsnID {
// func ContentFileByRbLocalUsnID(db DB, rbLocalUsn sql.NullInt64, id sql.NullString) ([]*ContentFile, error) {
// true
// rbLocalUsn, id
// ContentFile
// ContentFileByRbLocalUsnID
// false
// false
func (c *Client) ContentFileByRbLocalUsnID(ctx context.Context, rbLocalUsn sql.NullInt64, id sql.NullString) ([]*ContentFile, error) {
	// func ContentFileByRbLocalUsnID(ctx context.Context, db DB, rbLocalUsn sql.NullInt64, id sql.NullString) ([]*ContentFile, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, ContentID, Path, Hash, Size, rb_local_path, rb_insync_hash, rb_insync_local_usn, rb_file_hash_dirty, rb_local_file_status, rb_in_progress, rb_process_type, rb_temp_path, rb_priority, rb_file_size_dirty, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM contentFile ` +
		`WHERE rb_local_usn = $1 AND ID = $2`
	// run
	logf(sqlstr, rbLocalUsn, id)
	rows, err := db.QueryContext(ctx, sqlstr, rbLocalUsn, id)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*ContentFile
	for rows.Next() {
		cf := ContentFile{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&cf.ID, &cf.ContentID, &cf.Path, &cf.Hash, &cf.Size, &cf.RbLocalPath, &cf.RbInsyncHash, &cf.RbInsyncLocalUsn, &cf.RbFileHashDirty, &cf.RbLocalFileStatus, &cf.RbInProgress, &cf.RbProcessType, &cf.RbTempPath, &cf.RbPriority, &cf.RbFileSizeDirty, &cf.UUID, &cf.RbDataStatus, &cf.RbLocalDataStatus, &cf.RbLocalDeleted, &cf.RbLocalSynced, &cf.Usn, &cf.RbLocalUsn, &cf.CreatedAt, &cf.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &cf)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// ContentFileByID retrieves a row from 'contentFile' as a ContentFile.
//
// Generated from index 'sqlite_autoindex_contentFile_1'.
// func (cf *ContentFile) contentFile(db DB) (error)
// func ContentFileByID(ctx context.Context, db DB, id sql.NullString) (*ContentFile, error) {
// ContentFileByID {
// func ContentFileByID(db DB, id sql.NullString) (*ContentFile, error) {
// true
// id
// ContentFile
// ContentFileByID
// true
// true
func (c *Client) ContentFileByID(ctx context.Context, id sql.NullString) (*ContentFile, error) {
	// func ContentFileByID(ctx context.Context, db DB, id sql.NullString) (*ContentFile, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, ContentID, Path, Hash, Size, rb_local_path, rb_insync_hash, rb_insync_local_usn, rb_file_hash_dirty, rb_local_file_status, rb_in_progress, rb_process_type, rb_temp_path, rb_priority, rb_file_size_dirty, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM contentFile ` +
		`WHERE ID = $1`
	// run
	logf(sqlstr, id)
	cf := ContentFile{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&cf.ID, &cf.ContentID, &cf.Path, &cf.Hash, &cf.Size, &cf.RbLocalPath, &cf.RbInsyncHash, &cf.RbInsyncLocalUsn, &cf.RbFileHashDirty, &cf.RbLocalFileStatus, &cf.RbInProgress, &cf.RbProcessType, &cf.RbTempPath, &cf.RbPriority, &cf.RbFileSizeDirty, &cf.UUID, &cf.RbDataStatus, &cf.RbLocalDataStatus, &cf.RbLocalDeleted, &cf.RbLocalSynced, &cf.Usn, &cf.RbLocalUsn, &cf.CreatedAt, &cf.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &cf, nil
}
