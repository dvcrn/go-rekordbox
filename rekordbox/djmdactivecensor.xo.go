package rekordbox

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"

	nulltype "github.com/mattn/go-nulltype"
)

// DjmdActiveCensor represents a row from 'djmdActiveCensor'.
type DjmdActiveCensor struct {
	ID                nulltype.NullString `json:"ID"`                   // ID
	ContentID         nulltype.NullString `json:"ContentID"`            // ContentID
	InMsec            nulltype.NullInt64  `json:"InMsec"`               // InMsec
	OutMsec           nulltype.NullInt64  `json:"OutMsec"`              // OutMsec
	Info              nulltype.NullInt64  `json:"Info"`                 // Info
	ParameterList     nulltype.NullString `json:"ParameterList"`        // ParameterList
	ContentUUID       nulltype.NullString `json:"ContentUUID"`          // ContentUUID
	UUID              nulltype.NullString `json:"UUID"`                 // UUID
	RbDataStatus      nulltype.NullInt64  `json:"rb_data_status"`       // rb_data_status
	RbLocalDataStatus nulltype.NullInt64  `json:"rb_local_data_status"` // rb_local_data_status
	RbLocalDeleted    nulltype.NullInt64  `json:"rb_local_deleted"`     // rb_local_deleted
	RbLocalSynced     nulltype.NullInt64  `json:"rb_local_synced"`      // rb_local_synced
	Usn               nulltype.NullInt64  `json:"usn"`                  // usn
	RbLocalUsn        nulltype.NullInt64  `json:"rb_local_usn"`         // rb_local_usn
	CreatedAt         Time                `json:"created_at"`           // created_at
	UpdatedAt         Time                `json:"updated_at"`           // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the DjmdActiveCensor exists in the database.
func (dac *DjmdActiveCensor) Exists() bool {
	return dac._exists
}

// Deleted returns true when the DjmdActiveCensor has been marked for deletion from
// the database.
func (dac *DjmdActiveCensor) Deleted() bool {
	return dac._deleted
}

// Insert inserts the DjmdActiveCensor to the database.
func (c *Client) InsertDjmdActiveCensor(ctx context.Context, dac *DjmdActiveCensor) error {
	db := c.db

	switch {
	case dac._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case dac._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO djmdActiveCensor (` +
		`ID, ContentID, InMsec, OutMsec, Info, ParameterList, ContentUUID, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16` +
		`)`
	// run
	logf(sqlstr, dac.ID, dac.ContentID, dac.InMsec, dac.OutMsec, dac.Info, dac.ParameterList, dac.ContentUUID, dac.UUID, dac.RbDataStatus, dac.RbLocalDataStatus, dac.RbLocalDeleted, dac.RbLocalSynced, dac.Usn, dac.RbLocalUsn, dac.CreatedAt, dac.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, dac.ID, dac.ContentID, dac.InMsec, dac.OutMsec, dac.Info, dac.ParameterList, dac.ContentUUID, dac.UUID, dac.RbDataStatus, dac.RbLocalDataStatus, dac.RbLocalDeleted, dac.RbLocalSynced, dac.Usn, dac.RbLocalUsn, dac.CreatedAt, dac.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	dac._exists = true
	return nil
}

// Update updates a DjmdActiveCensor in the database.
func (c *Client) UpdateDjmdActiveCensor(ctx context.Context, dac *DjmdActiveCensor) error {
	db := c.db

	switch {
	case !dac._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case dac._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE djmdActiveCensor SET ` +
		`ContentID = $1, InMsec = $2, OutMsec = $3, Info = $4, ParameterList = $5, ContentUUID = $6, UUID = $7, rb_data_status = $8, rb_local_data_status = $9, rb_local_deleted = $10, rb_local_synced = $11, usn = $12, rb_local_usn = $13, created_at = $14, updated_at = $15 ` +
		`WHERE ID = $16`
	// run
	logf(sqlstr, dac.ContentID, dac.InMsec, dac.OutMsec, dac.Info, dac.ParameterList, dac.ContentUUID, dac.UUID, dac.RbDataStatus, dac.RbLocalDataStatus, dac.RbLocalDeleted, dac.RbLocalSynced, dac.Usn, dac.RbLocalUsn, dac.CreatedAt, dac.UpdatedAt, dac.ID)
	if _, err := db.ExecContext(ctx, sqlstr, dac.ContentID, dac.InMsec, dac.OutMsec, dac.Info, dac.ParameterList, dac.ContentUUID, dac.UUID, dac.RbDataStatus, dac.RbLocalDataStatus, dac.RbLocalDeleted, dac.RbLocalSynced, dac.Usn, dac.RbLocalUsn, dac.CreatedAt, dac.UpdatedAt, dac.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the DjmdActiveCensor to the database.
func (c *Client) SaveDjmdActiveCensor(ctx context.Context, dac *DjmdActiveCensor) error {
	if dac.Exists() {
		return c.UpdateDjmdActiveCensor(ctx, dac)
	}
	return c.InsertDjmdActiveCensor(ctx, dac)
}

// Upsert performs an upsert for DjmdActiveCensor.
func (c *Client) UpsertDjmdActiveCensor(ctx context.Context, dac *DjmdActiveCensor) error {
	db := c.db

	switch {
	case dac._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO djmdActiveCensor (` +
		`ID, ContentID, InMsec, OutMsec, Info, ParameterList, ContentUUID, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16` +
		`)` +
		` ON CONFLICT (ID) DO ` +
		`UPDATE SET ` +
		`ContentID = EXCLUDED.ContentID, InMsec = EXCLUDED.InMsec, OutMsec = EXCLUDED.OutMsec, Info = EXCLUDED.Info, ParameterList = EXCLUDED.ParameterList, ContentUUID = EXCLUDED.ContentUUID, UUID = EXCLUDED.UUID, rb_data_status = EXCLUDED.rb_data_status, rb_local_data_status = EXCLUDED.rb_local_data_status, rb_local_deleted = EXCLUDED.rb_local_deleted, rb_local_synced = EXCLUDED.rb_local_synced, usn = EXCLUDED.usn, rb_local_usn = EXCLUDED.rb_local_usn, created_at = EXCLUDED.created_at, updated_at = EXCLUDED.updated_at `
	// run
	logf(sqlstr, dac.ID, dac.ContentID, dac.InMsec, dac.OutMsec, dac.Info, dac.ParameterList, dac.ContentUUID, dac.UUID, dac.RbDataStatus, dac.RbLocalDataStatus, dac.RbLocalDeleted, dac.RbLocalSynced, dac.Usn, dac.RbLocalUsn, dac.CreatedAt, dac.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, dac.ID, dac.ContentID, dac.InMsec, dac.OutMsec, dac.Info, dac.ParameterList, dac.ContentUUID, dac.UUID, dac.RbDataStatus, dac.RbLocalDataStatus, dac.RbLocalDeleted, dac.RbLocalSynced, dac.Usn, dac.RbLocalUsn, dac.CreatedAt, dac.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	dac._exists = true
	return nil
}

// Delete deletes the DjmdActiveCensor from the database.
func (c *Client) DeleteDjmdActiveCensor(ctx context.Context, dac *DjmdActiveCensor) error {
	db := c.db

	switch {
	case !dac._exists: // doesn't exist
		return nil
	case dac._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM djmdActiveCensor ` +
		`WHERE ID = $1`
	// run
	logf(sqlstr, dac.ID)
	if _, err := db.ExecContext(ctx, sqlstr, dac.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	dac._deleted = true
	return nil
}

func scanDjmdActiveCensorRows(rows *sql.Rows) ([]*DjmdActiveCensor, error) {
	var res []*DjmdActiveCensor
	for rows.Next() {
		dac := DjmdActiveCensor{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dac.ID, &dac.ContentID, &dac.InMsec, &dac.OutMsec, &dac.Info, &dac.ParameterList, &dac.ContentUUID, &dac.UUID, &dac.RbDataStatus, &dac.RbLocalDataStatus, &dac.RbLocalDeleted, &dac.RbLocalSynced, &dac.Usn, &dac.RbLocalUsn, &dac.CreatedAt, &dac.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dac)
	}

	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

func (c *Client) AllDjmdActiveCensor(ctx context.Context) ([]*DjmdActiveCensor, error) {
	db := c.db

	const sqlstr = `SELECT * FROM DjmdActiveCensor`
	rows, err := db.QueryContext(ctx, sqlstr)
	if err != nil {
		return nil, logerror(err)
	}

	defer rows.Close()
	res, err := scanDjmdActiveCensorRows(rows)
	if err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdActiveCensorByContentID retrieves a row from 'djmdActiveCensor' as a DjmdActiveCensor.
//
// Generated from index 'djmd_active_censor__content_i_d'.
func (c *Client) DjmdActiveCensorByContentID(ctx context.Context, contentID nulltype.NullString) ([]*DjmdActiveCensor, error) {
	// func DjmdActiveCensorByContentID(ctx context.Context, db DB, contentID nulltype.NullString) ([]*DjmdActiveCensor, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, ContentID, InMsec, OutMsec, Info, ParameterList, ContentUUID, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdActiveCensor ` +
		`WHERE ContentID = $1`
	// run
	logf(sqlstr, contentID)
	rows, err := db.QueryContext(ctx, sqlstr, contentID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdActiveCensor
	for rows.Next() {
		dac := DjmdActiveCensor{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dac.ID, &dac.ContentID, &dac.InMsec, &dac.OutMsec, &dac.Info, &dac.ParameterList, &dac.ContentUUID, &dac.UUID, &dac.RbDataStatus, &dac.RbLocalDataStatus, &dac.RbLocalDeleted, &dac.RbLocalSynced, &dac.Usn, &dac.RbLocalUsn, &dac.CreatedAt, &dac.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dac)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdActiveCensorByContentUUID retrieves a row from 'djmdActiveCensor' as a DjmdActiveCensor.
//
// Generated from index 'djmd_active_censor__content_u_u_i_d'.
func (c *Client) DjmdActiveCensorByContentUUID(ctx context.Context, contentUUID nulltype.NullString) ([]*DjmdActiveCensor, error) {
	// func DjmdActiveCensorByContentUUID(ctx context.Context, db DB, contentUUID nulltype.NullString) ([]*DjmdActiveCensor, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, ContentID, InMsec, OutMsec, Info, ParameterList, ContentUUID, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdActiveCensor ` +
		`WHERE ContentUUID = $1`
	// run
	logf(sqlstr, contentUUID)
	rows, err := db.QueryContext(ctx, sqlstr, contentUUID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdActiveCensor
	for rows.Next() {
		dac := DjmdActiveCensor{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dac.ID, &dac.ContentID, &dac.InMsec, &dac.OutMsec, &dac.Info, &dac.ParameterList, &dac.ContentUUID, &dac.UUID, &dac.RbDataStatus, &dac.RbLocalDataStatus, &dac.RbLocalDeleted, &dac.RbLocalSynced, &dac.Usn, &dac.RbLocalUsn, &dac.CreatedAt, &dac.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dac)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdActiveCensorByUUID retrieves a row from 'djmdActiveCensor' as a DjmdActiveCensor.
//
// Generated from index 'djmd_active_censor__u_u_i_d'.
func (c *Client) DjmdActiveCensorByUUID(ctx context.Context, uuid nulltype.NullString) ([]*DjmdActiveCensor, error) {
	// func DjmdActiveCensorByUUID(ctx context.Context, db DB, uuid nulltype.NullString) ([]*DjmdActiveCensor, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, ContentID, InMsec, OutMsec, Info, ParameterList, ContentUUID, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdActiveCensor ` +
		`WHERE UUID = $1`
	// run
	logf(sqlstr, uuid)
	rows, err := db.QueryContext(ctx, sqlstr, uuid)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdActiveCensor
	for rows.Next() {
		dac := DjmdActiveCensor{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dac.ID, &dac.ContentID, &dac.InMsec, &dac.OutMsec, &dac.Info, &dac.ParameterList, &dac.ContentUUID, &dac.UUID, &dac.RbDataStatus, &dac.RbLocalDataStatus, &dac.RbLocalDeleted, &dac.RbLocalSynced, &dac.Usn, &dac.RbLocalUsn, &dac.CreatedAt, &dac.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dac)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdActiveCensorByRbDataStatus retrieves a row from 'djmdActiveCensor' as a DjmdActiveCensor.
//
// Generated from index 'djmd_active_censor_rb_data_status'.
func (c *Client) DjmdActiveCensorByRbDataStatus(ctx context.Context, rbDataStatus nulltype.NullInt64) ([]*DjmdActiveCensor, error) {
	// func DjmdActiveCensorByRbDataStatus(ctx context.Context, db DB, rbDataStatus nulltype.NullInt64) ([]*DjmdActiveCensor, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, ContentID, InMsec, OutMsec, Info, ParameterList, ContentUUID, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdActiveCensor ` +
		`WHERE rb_data_status = $1`
	// run
	logf(sqlstr, rbDataStatus)
	rows, err := db.QueryContext(ctx, sqlstr, rbDataStatus)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdActiveCensor
	for rows.Next() {
		dac := DjmdActiveCensor{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dac.ID, &dac.ContentID, &dac.InMsec, &dac.OutMsec, &dac.Info, &dac.ParameterList, &dac.ContentUUID, &dac.UUID, &dac.RbDataStatus, &dac.RbLocalDataStatus, &dac.RbLocalDeleted, &dac.RbLocalSynced, &dac.Usn, &dac.RbLocalUsn, &dac.CreatedAt, &dac.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dac)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdActiveCensorByRbLocalDataStatus retrieves a row from 'djmdActiveCensor' as a DjmdActiveCensor.
//
// Generated from index 'djmd_active_censor_rb_local_data_status'.
func (c *Client) DjmdActiveCensorByRbLocalDataStatus(ctx context.Context, rbLocalDataStatus nulltype.NullInt64) ([]*DjmdActiveCensor, error) {
	// func DjmdActiveCensorByRbLocalDataStatus(ctx context.Context, db DB, rbLocalDataStatus nulltype.NullInt64) ([]*DjmdActiveCensor, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, ContentID, InMsec, OutMsec, Info, ParameterList, ContentUUID, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdActiveCensor ` +
		`WHERE rb_local_data_status = $1`
	// run
	logf(sqlstr, rbLocalDataStatus)
	rows, err := db.QueryContext(ctx, sqlstr, rbLocalDataStatus)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdActiveCensor
	for rows.Next() {
		dac := DjmdActiveCensor{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dac.ID, &dac.ContentID, &dac.InMsec, &dac.OutMsec, &dac.Info, &dac.ParameterList, &dac.ContentUUID, &dac.UUID, &dac.RbDataStatus, &dac.RbLocalDataStatus, &dac.RbLocalDeleted, &dac.RbLocalSynced, &dac.Usn, &dac.RbLocalUsn, &dac.CreatedAt, &dac.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dac)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdActiveCensorByRbLocalDeleted retrieves a row from 'djmdActiveCensor' as a DjmdActiveCensor.
//
// Generated from index 'djmd_active_censor_rb_local_deleted'.
func (c *Client) DjmdActiveCensorByRbLocalDeleted(ctx context.Context, rbLocalDeleted nulltype.NullInt64) ([]*DjmdActiveCensor, error) {
	// func DjmdActiveCensorByRbLocalDeleted(ctx context.Context, db DB, rbLocalDeleted nulltype.NullInt64) ([]*DjmdActiveCensor, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, ContentID, InMsec, OutMsec, Info, ParameterList, ContentUUID, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdActiveCensor ` +
		`WHERE rb_local_deleted = $1`
	// run
	logf(sqlstr, rbLocalDeleted)
	rows, err := db.QueryContext(ctx, sqlstr, rbLocalDeleted)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdActiveCensor
	for rows.Next() {
		dac := DjmdActiveCensor{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dac.ID, &dac.ContentID, &dac.InMsec, &dac.OutMsec, &dac.Info, &dac.ParameterList, &dac.ContentUUID, &dac.UUID, &dac.RbDataStatus, &dac.RbLocalDataStatus, &dac.RbLocalDeleted, &dac.RbLocalSynced, &dac.Usn, &dac.RbLocalUsn, &dac.CreatedAt, &dac.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dac)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdActiveCensorByRbLocalUsnID retrieves a row from 'djmdActiveCensor' as a DjmdActiveCensor.
//
// Generated from index 'djmd_active_censor_rb_local_usn__i_d'.
func (c *Client) DjmdActiveCensorByRbLocalUsnID(ctx context.Context, rbLocalUsn nulltype.NullInt64, id nulltype.NullString) ([]*DjmdActiveCensor, error) {
	// func DjmdActiveCensorByRbLocalUsnID(ctx context.Context, db DB, rbLocalUsn nulltype.NullInt64, id nulltype.NullString) ([]*DjmdActiveCensor, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, ContentID, InMsec, OutMsec, Info, ParameterList, ContentUUID, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdActiveCensor ` +
		`WHERE rb_local_usn = $1 AND ID = $2`
	// run
	logf(sqlstr, rbLocalUsn, id)
	rows, err := db.QueryContext(ctx, sqlstr, rbLocalUsn, id)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DjmdActiveCensor
	for rows.Next() {
		dac := DjmdActiveCensor{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dac.ID, &dac.ContentID, &dac.InMsec, &dac.OutMsec, &dac.Info, &dac.ParameterList, &dac.ContentUUID, &dac.UUID, &dac.RbDataStatus, &dac.RbLocalDataStatus, &dac.RbLocalDeleted, &dac.RbLocalSynced, &dac.Usn, &dac.RbLocalUsn, &dac.CreatedAt, &dac.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dac)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DjmdActiveCensorByID retrieves a row from 'djmdActiveCensor' as a DjmdActiveCensor.
//
// Generated from index 'sqlite_autoindex_djmdActiveCensor_1'.
func (c *Client) DjmdActiveCensorByID(ctx context.Context, id nulltype.NullString) (*DjmdActiveCensor, error) {
	// func DjmdActiveCensorByID(ctx context.Context, db DB, id nulltype.NullString) (*DjmdActiveCensor, error) {
	db := c.db

	// query
	const sqlstr = `SELECT ` +
		`ID, ContentID, InMsec, OutMsec, Info, ParameterList, ContentUUID, UUID, rb_data_status, rb_local_data_status, rb_local_deleted, rb_local_synced, usn, rb_local_usn, created_at, updated_at ` +
		`FROM djmdActiveCensor ` +
		`WHERE ID = $1`
	// run
	logf(sqlstr, id)
	dac := DjmdActiveCensor{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&dac.ID, &dac.ContentID, &dac.InMsec, &dac.OutMsec, &dac.Info, &dac.ParameterList, &dac.ContentUUID, &dac.UUID, &dac.RbDataStatus, &dac.RbLocalDataStatus, &dac.RbLocalDeleted, &dac.RbLocalSynced, &dac.Usn, &dac.RbLocalUsn, &dac.CreatedAt, &dac.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &dac, nil
}
